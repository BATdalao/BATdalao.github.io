<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTCondor下多台Linux计算集群的搭建</title>
      <link href="/posts/1f58.html"/>
      <url>/posts/1f58.html</url>
      
        <content type="html"><![CDATA[<h2 id="HTCondor下多台Linux计算集群的搭建"><a href="#HTCondor下多台Linux计算集群的搭建" class="headerlink" title="HTCondor下多台Linux计算集群的搭建"></a>HTCondor下多台Linux计算集群的搭建</h2><blockquote><p>环境：<strong>四台同网段的Linux虚拟机</strong></p><ul><li>一台当作Central Manager</li><li>一台用来Submit </li><li>两台用来Execute</li></ul></blockquote><h3 id="（一）对四台虚拟机分别进行此操作"><a href="#（一）对四台虚拟机分别进行此操作" class="headerlink" title="（一）对四台虚拟机分别进行此操作"></a>（一）对四台虚拟机分别进行此操作</h3><pre class=" language-python"><code class="language-python">apt<span class="token operator">-</span>get update <span class="token operator">&amp;</span><span class="token operator">&amp;</span> apt<span class="token operator">-</span>get install <span class="token operator">-</span>y curl</code></pre><p><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20210526024911229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mjc1MjEz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="（二）对三个角色分别进行如下操作"><a href="#（二）对三个角色分别进行如下操作" class="headerlink" title="（二）对三个角色分别进行如下操作"></a>（二）对三个角色分别进行如下操作</h3><h4 id="1）充当Central-Manager角色的虚拟机"><a href="#1）充当Central-Manager角色的虚拟机" class="headerlink" title="1）充当Central Manager角色的虚拟机"></a>1）充当Central Manager角色的虚拟机</h4><p>首先，查找此虚拟机的IP<br>命令行输入<code>ifconfig -a</code>,红框的即为虚拟机IP<br><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20210526031738725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mjc1MjEz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>将此IP替换192.168.87.132，输入如下命令</p><pre class=" language-python"><code class="language-python">sudo curl <span class="token operator">-</span>fsSL https<span class="token punctuation">:</span><span class="token operator">//</span>get<span class="token punctuation">.</span>htcondor<span class="token punctuation">.</span>org <span class="token operator">|</span> GET_HTCONDOR_PASSWORD<span class="token operator">=</span>wmcoder <span class="token operator">/</span>bin<span class="token operator">/</span>bash <span class="token operator">-</span>s <span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">-</span><span class="token operator">-</span>no<span class="token operator">-</span>dry<span class="token operator">-</span>run <span class="token operator">-</span><span class="token operator">-</span>central<span class="token operator">-</span>manager <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">87.132</span></code></pre><h4 id="2）充当Submit-角色的虚拟机"><a href="#2）充当Submit-角色的虚拟机" class="headerlink" title="2）充当Submit 角色的虚拟机"></a>2）充当Submit 角色的虚拟机</h4><p>192.168.87.132用Central Manager角色虚拟机的IP来替换</p><pre class=" language-python"><code class="language-python">sudo curl <span class="token operator">-</span>fsSL https<span class="token punctuation">:</span><span class="token operator">//</span>get<span class="token punctuation">.</span>htcondor<span class="token punctuation">.</span>org <span class="token operator">|</span> GET_HTCONDOR_PASSWORD<span class="token operator">=</span>wmcoder <span class="token operator">/</span>bin<span class="token operator">/</span>bash <span class="token operator">-</span>s <span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">-</span><span class="token operator">-</span>no<span class="token operator">-</span>dry<span class="token operator">-</span>run <span class="token operator">-</span><span class="token operator">-</span>submit <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">87.132</span></code></pre><h4 id="3）充当Execute角色的虚拟机（两台）"><a href="#3）充当Execute角色的虚拟机（两台）" class="headerlink" title="3）充当Execute角色的虚拟机（两台）"></a>3）充当Execute角色的虚拟机（两台）</h4><p>192.168.87.132用Central Manager角色虚拟机的IP来替换</p><pre class=" language-python"><code class="language-python">sudo curl <span class="token operator">-</span>fsSL https<span class="token punctuation">:</span><span class="token operator">//</span>get<span class="token punctuation">.</span>htcondor<span class="token punctuation">.</span>org <span class="token operator">|</span> GET_HTCONDOR_PASSWORD<span class="token operator">=</span>wmcoder <span class="token operator">/</span>bin<span class="token operator">/</span>bash <span class="token operator">-</span>s <span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">-</span><span class="token operator">-</span>no<span class="token operator">-</span>dry<span class="token operator">-</span>run <span class="token operator">-</span><span class="token operator">-</span>execute <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">87.132</span></code></pre><h3 id="（三）执行condor-status查看"><a href="#（三）执行condor-status查看" class="headerlink" title="（三）执行condor_status查看"></a>（三）执行condor_status查看</h3><p>登录到提交计算机上的用户应该能够查看池中的执行计算机（使用condor_status），提交作业（使用condor_submit）以及运行（使用condor_q）。显示的为两台执行角色的虚拟机。<br><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20210526030428631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mjc1MjEz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="（附）部分bug及解决方案"><a href="#（附）部分bug及解决方案" class="headerlink" title="（附）部分bug及解决方案"></a>（附）部分bug及解决方案</h3><h4 id="因未设置密码问题无法使用root权限"><a href="#因未设置密码问题无法使用root权限" class="headerlink" title="因未设置密码问题无法使用root权限"></a>因未设置密码问题无法使用root权限</h4><p><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20210526034256456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mjc1MjEz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>参考链接：<br><a href="https://htcondor.readthedocs.io/en/latest/getting-htcondor/install-linux-as-root.html" target="_blank" rel="noopener">https://htcondor.readthedocs.io/en/latest/getting-htcondor/install-linux-as-root.html</a><br><a href="https://htcondor.readthedocs.io/en/latest/getting-htcondor/admin-quick-start.html#admin-quick-start-guide" target="_blank" rel="noopener">https://htcondor.readthedocs.io/en/latest/getting-htcondor/admin-quick-start.html#admin-quick-start-guide</a></p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTCondor计算集群的搭建历程</title>
      <link href="/posts/1f59.html"/>
      <url>/posts/1f59.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTCondor计算集群的搭建历程"><a href="#HTCondor计算集群的搭建历程" class="headerlink" title="HTCondor计算集群的搭建历程"></a>HTCondor计算集群的搭建历程</h1><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>首先是Windows下的操作，仔细对照实验指导书来说，反复修改重启，最后突然发现只要改一个配置文件就可以完成这些操作。虽然Windows的最终还是没有搞出来，但还是学到了很多知识。</p><p>Windows下的方法不行了，后来开了个Windows的虚拟机，但是htcondor软件不支持在windows虚拟机上安装，于是又改用Linux的方法，有个ubuntu18的虚拟机，但因为忘了root密码无法使用，当时只有centos和ubuntu19的镜像，于是连开了几台centos和ubuntu19的虚拟机，发现无法输入命令，更别提进行通信，一气之下，直接开了三台国外的服务器，配置相互之间的通信。</p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/BATdalao/cdn_jsDelivr/imgs/052602.png" alt=""></p><p>一切都很顺利，输入命令没有报错，但最后condor status的时候出现6001无法连接的问题，这时候突然意识到没有在同一个网段内，又做了很多无用功。</p><p>后来弄到了ubuntu18的iso文件，一连开了五个虚拟机咔咔一顿配置才弄好。</p><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><ul><li><p>通过配置文件改变权限属性的意识要有</p></li><li><p>虚拟机的root密码和登录密码尽量简单些，比如直接弄成123456</p></li><li><p>分析好属性了再做，比如要在同一网段和ubuntu18</p></li><li><p>理解原理了再去做会更容易些</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术杂谈 </tag>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么不建议你谈恋爱</title>
      <link href="/posts/644b.html"/>
      <url>/posts/644b.html</url>
      
        <content type="html"><![CDATA[<h1 id="为什么不建议你谈恋爱"><a href="#为什么不建议你谈恋爱" class="headerlink" title="为什么不建议你谈恋爱"></a>为什么不建议你谈恋爱</h1><p><video src="https://cdn.jsdelivr.net/gh/BATdalao/cdn_jsDelivr/videos/aiqingguan.mp4" controls="controls" width=90% height=30% controlspreload="auto" ></video></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/BATdalao/cdn_jsDelivr/imgs/052401.png" controls="controls" width=50% height=30% controlspreload="auto" ></img></p><iframe src="//player.bilibili.com/player.html?aid=331642399&bvid=BV11A411T7NC&cid=309734691&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>原因好多啊 一时我居然还列不完</p><p>不是很懂得辨别对异性的感觉是心动、好感、喜欢还是爱，所以不想含含糊糊脱单</p><p>单身太久了，以至于让我习惯了什么事情都自己来，不喜欢依靠和麻烦别人，也不喜欢突然有个人打乱了我的生活节奏</p><p>我无法让恋爱在我的生活中占比过多，大部分的时间我都无法分配给另一半，总觉得自己没有能力照顾和爱他，所以不想耽误别人</p><p>我心思比较敏感和细腻，会想很远想很多，所以一旦开始了我就会陷入，很容易伤到自己，所以我选择不轻易开始</p><p>最重要的应该就是，遇不到自己喜欢而且合适的叭，所以不想将就，也就不想谈恋爱了</p><hr><p>因为不敢动心，太了解自己的德行，<br>一旦动心，被玩死的一定是我，<br>所以习惯性地压着感情，<br>有好感了就开始挑刺把好感压下去，</p><p>我一个人的时候能过得很好，<br>上课，买菜做饭，健身，晚上约朋友吃点夜宵喝个小酒，规律又惬意，<br>有空的话去旅行，平时周末拿相机去扫街，把生活安排得井井有条，充满主见充满理性，</p><p>一旦有那么一个人出现，我的所作所为都会被他打乱，即使他什么也没做，<br>一直看手机有没有消息，想他在做什么，要不要问一下，发消息怎么没有回我，如果他有事没有联系我那么这一段时间我会失魂落魄，时间再长一点我甚至能哭出来，</p><p>看到好吃的会想要不要给他带，看到男装店就像进，看到有趣的东西就会发给他，会耗费大量的精力送他一些礼物，他的每一句话我都会去认真揣度他的意思，<br>不敢提要求，不敢反驳他的意见，只会去顺从，怕他对我有一点点不满，</p><p>我这个人有个毛病，太容易把承诺当真，哪怕只是他的随口一提，<br>他说会带我去哪里，我就真的会提上日程认真计划，<br>他说他会做到的事，我就真的一万分相信他能做到，<br>而等着我的往往都是失望，</p><p>我会觉得自己不够好，长相不好身材不好性格不好，也没有什么拿得出手的本事和闪光点，没有出众的能力，凭什么留下他，说每一句话做每一件事都会想他喜不喜欢我这个样子，把自己爱到尘埃里，变得不像自己，</p><p>一个孤独的人如果出现了那么一个同行者，依赖感就会一瞬间爆发出来，变得小心又敏感，<br>我十多年来建立的城墙立刻分崩离析，</p><p>如果有一天他离我而去，我担心自己会没有足够的力气去重新适应孤独，<br>就像那句话，<br>本来我在绝望里活得好好的，你非要多手把我捞出来，然后又把我扔回去，</p><p>正是对爱太渴望才不敢去获得，<br>我也没有那么满意我现在的样子，我也希望在困难的时候可以示弱，而不是强打精神去面对，然后听别人说我怎么这么坚强，</p><p>但比起患得患失地去依赖另一个人，<br>比起承受那个人给了我一切又把它们都带走，<br>我更习惯于自己一个人去适应生命中的各种苦难，<br>不能克服的软肋就隐藏起来，<br>好累啊，可是没有办法，</p><p>最好最安全的方法，<br>就是一直，一个人，走下去。</p><p>-——————————————————————–</p><p>这一段补充又删掉，删掉又补充上，<br>不写总觉得缺了些什么，要写却又表达不完，<br>没有不恋爱的意思，一个人固然好，<br>但我人生里最快乐的时候还是两个人，<br>只是觉得自己已经浪费掉太多感情，<br>所以不愿再轻易去尝试，</p><p>我始终相信会有那么一个人出现，<br>只是我不知道他什么时候会来，<br>我要做的就是像他明天就会来那样去期待，<br>像他永远都不会来那样去生活，</p><p>已经经历过了爱情里所有美好和值得怀念的东西，<br>借用另一位答主的话来说，就是失明前已经见过了彩虹，极光，和海洋，<br>所以心态变得很平和，能复明固然很好，但就算一直这样下去，我也没有遗憾。</p><hr><p>谈恋爱一定会想要给对方一个未来，以前的我什么都没有，也许连彩礼的钱都拿不出来。</p><p><strong>所以我想让自己变得足够优秀，才能在对的时间，给对的人一个未来。</strong></p><p>大部分人总觉得大学不谈一场恋爱是遗憾，但其实在给不起对方未来的时间，遇到了一个想要相伴一生的人，却最终败给了现实，这才是遗憾。</p><p>所以，不是不想谈恋爱，只是想等自己足够优秀了，让单身成为自己的加分项。</p><p>爱情不是不会来，只是来的晚一些罢了。</p><p>无论什么时候都必须要知道：</p><p><strong>先学会好好爱自己，才会好好爱别人；</strong></p><p><strong>先学会让自己变得更好，才有能力让彼此变得更好。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 情感日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 情感日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三步秒刷青年大学习</title>
      <link href="/posts/3c52.html"/>
      <url>/posts/3c52.html</url>
      
        <content type="html"><![CDATA[<h1 id="三步秒刷青年大学习"><a href="#三步秒刷青年大学习" class="headerlink" title="三步秒刷青年大学习"></a>三步秒刷青年大学习</h1><blockquote><p>关于如何刷青年大学习，各位网友可谓各显神通，但遗憾的是，那些方法都太局限了，换一个型号的手机可能就不适用了。小编这里介绍一种通用的方法。</p><p>声明，本方法以通用为主，操作流程也比较简单。但如果要追求秒刷，请付费后查看付费内容。如果要求提交最后截图，请查看 付费秒刷一。如果仅追求秒刷弄积分，请查看 付费秒刷二。（绝对秒刷哦！！！）<a href="https://mp.weixin.qq.com/s?__biz=MzIxNjAyMjAyMA==&mid=2247484952&idx=1&sn=bbae005e84c9925ab97746d6e2885673&chksm=978e2b73a0f9a265b2938a7e6f4980aaefabb1cb498633e59bd4e7bb21bf5d672d282a9f05b9&token=665827666&lang=zh_CN#rd" target="_blank" rel="noopener">付费阅读渠道</a><br>1、在电脑登录微信，进入团课学习的界面，然后点击在网页中打开。<br>2、按F12，点击左上角的箭头，然后点击视频界面，找到类似<a href="http://dxxsv.cyol.com/9dxx3.mp4格式的链接。" target="_blank" rel="noopener">http://dxxsv.cyol.com/9dxx3.mp4格式的链接。</a><br>3、复制该链接至新标签页，拖动进度条至最后，然后就ok了。</p></blockquote><ul><li><a href="https://www.bilibili.com/video/BV135411W7JW/" target="_blank" rel="noopener">点击此处查看视频讲解</a></li><li>如果需要小编亲自指导可以关注微信公众号<strong>未名编程</strong>，在菜单栏<strong>关于作者</strong>中<strong>联系方式</strong>里加小编微信进行详细讲解。</li><li>是不是有点懵，下面小编逐步解释一下。<br>第一步：在电脑登录微信，进入团课学习的界面，然后点击在网页中打开（点击红框的按钮即可）。<br><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20200530211930526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mjc1MjEz,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>第二步：按F12，出来此界面<br><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20200530212310871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mjc1MjEz,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>点击左上角的箭头<br><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20200530212321170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mjc1MjEz,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>然后点击视频界面（即红框里的内容）<br><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/2020053021245744.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mjc1MjEz,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>然后在下方找到类似<a href="http://dxxsv.cyol.com/9dxx3.mp4格式的链接。" target="_blank" rel="noopener">http://dxxsv.cyol.com/9dxx3.mp4格式的链接。</a><br><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20200530212618161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mjc1MjEz,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>第三步，复制该链接<br><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20200530212734918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mjc1MjEz,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>将复制的链接放入新标签页<br><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20200530212922857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mjc1MjEz,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>拖动进度条至最后，然后就ok了。<br><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20200530213020832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0Mjc1MjEz,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>然后回到积分界面耐心等会儿或者刷新几遍，然后就卧槽，积分真的多了哈哈。<br>本方法以通用为主，操作流程也比较简单。但如果要追求秒刷，请关注小编微信公众号查看内容（满满的干货哈哈）。<br><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/20200606142335174.png" alt="在这里插入图片描述"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标管理技巧</title>
      <link href="/posts/80c5.html"/>
      <url>/posts/80c5.html</url>
      
        <content type="html"><![CDATA[<h1 id="目标管理"><a href="#目标管理" class="headerlink" title="目标管理"></a>目标管理</h1><h2 id="三大原则："><a href="#三大原则：" class="headerlink" title="三大原则："></a>三大原则：</h2><p>1、<strong>明确量化</strong>。目标要量化且可执行，这是所有目标管理书都会教你的第一件事。比如“要减肥”这不算一个量化的目标，甚至“这个月要减5斤”也不是，因为不可执行。减肥是一件非线性的事情，不是每个月减5斤、5个月就能减25斤的，完全可能第一个月没减，第二三个月逐渐开始减。所以你定的可量化减肥计划需要是这样的：每周跑步4次、每天饮食摄入量小于1200卡（用个app计算卡路里）、每天食谱为xxxxxxx……诸如此类，<strong>只有这样才能把大目标分解为可执行的量化目标</strong></p><p>2、<strong>来都来了</strong>。意思是当你惰性很大的时候，你尽量啥也别想先直接开始，比如你的目标是写文章，你就先打开电脑新建一个文档，先随便写一句话；如果你的目标是跑步，你就先把衣服换好出门。此时虽然你只刚开始，但实际上你已经成功了一大半了，你的惰性已经被克服了。</p><p>3、<strong>反复提醒</strong>。我每天早上一到公司打开电脑，第一件事就是打开我的计划表，对昨天的表现进行打分，再看看今天的计划。一年之计在于春，一日之计在于晨，这番话是绝对有道理的，每到年初、月初、周一、每天上午，都需要拟定新的计划，或提醒自己要完成自己的计划。绝大部分人之所以不能完成自己的计划，是因为他只在头一天制定了计划，然后执行了三五天，后面就没有每天、每周、每月提醒自己。这样没过几天就回到原来固有的生活轨迹中去了。</p><h2 id="三中原则："><a href="#三中原则：" class="headerlink" title="三中原则："></a>三中原则：</h2><p>1、<strong>拒绝完美主义</strong>。完美主义是目标管理的大敌，除了极少数的清华学霸那样的人，绝大多数人都必然不可能完成自己列的计划，接下来他们就失去了自信心，草草结束，直到一两年后才再次鼓起勇气想再次挑战自己的计划，结果再次失败，最终得到失败的一生。所以从列计划的一开始，你就要知道你是完不成你的计划的。那这岂非很矛盾吗？我解决这一矛盾的方法是，对于年度计划、月度计划，我可能有三个目标，能完成其中一个就算合格，完成两个就算优秀，完成三个就算完美（我至今从没有在某一年度完成自己定的三个计划）</p><p>拒绝完美主义的第二个要点，是制定目标时不要好高骛远。对于这件事，如果你持之以恒制定目标并去执行，那你很快就懂得要降低自己的目标。降低没有什么统一标准，全靠你自己觉得只要完成了xx事情，这周/这个月/今年就算没有白过，以此为标准就行。</p><p>2、<strong>打分制</strong>。上面讲的三个目标完成一个就算合格，是对于年度、月度计划来讲的。对于周计划还需要更细致才行，对此我采取了打分制。</p><p>我给每周的3、4件任务赋予分值，每个任务都是有重复性的，比如跑步一周要跑4次，写作一周要写3篇，读书一周要读5次等等。对于不同的任务，我根据其重要性大小、和其难度的大小，给予不同的分值，例如跑步最难且最要紧，一次给5分；写作其次，一次给4分；读书最简单，一次给3分。那么一周总共就有 4x5 + 3x4 + 5x3=47分。得分80%以上为优秀、70%为良好，60%为及格，也即38分优秀、33分良好、28分及格。</p><p>我不需要真的不折不扣执行了这么多次任务，我只需要得分28，这周就是合格的。得分38，这周就是优秀的。</p><p>大家可以试试看，刚开始你想得及格分都是很不容易的，但是你只要及格了，就会有成就感；今天都周五了你还离及格差不少分，那你就有紧迫感。凭借这种成就感和紧迫感，就能持续不断地让你去完成你的每个周计划、月计划。</p><p>到后面你会觉得每周给自己定目标并且打分是一件很有意思的事情，你会主动去执行，而不需要痛苦地“坚持”。</p><p>对了，如果一周不及格、甚至一个月不及格，接受它，<strong>别崩溃</strong>。不及格就不及格吧，下周一我又是个活蹦乱跳、精力旺盛的目标管理小王子。</p><p>3、<strong>复利效应</strong>。有一句名言说的是：“我们常常高估自己一年的成就，而低估自己五年的成就”。这句话有人说是巴菲特说的，有人说是比尔盖茨说的，那都不重要。关键是你不要指望你今年就能取得多高的成就，相信我，你年初假如制定了3个计划，年底能完成1个已经很了不起了。</p><p>但是假如我一开始只有1的水平，我一年只能进步10%，达到1.1，那么5年后我就能达到1.61； 十年后我甚至能达到2.6， 2.6的水平跟1相比，用脱胎换骨来形容毫不为过，这就叫做复利效应。而且，随着我们在目标管理上越来越得心应手，我们第一年只能进步10%，也许第二年可以进步12%，第三年可以进步15%，那就是复利上又加复利，真可以令人几年不见刮目相看。</p><p>现在的我，跟五年前相比就已经脱胎换骨了，站的高度和五年前完全不同。所以，你在战略上要重视你五年、十年的成就，战术上不要高估你当下的执行力，千万不要完美主义。</p><p>所以除了制定周计划、月计划、年计划以外，我还有三年五年规划，但那只有寥寥的几条而已，没有具体的执行步骤，也无法制定具体步骤。我只要能一个月一个月、一年一年完成，那么终将逼近我的三年五年计划。</p><h2 id="三小原则"><a href="#三小原则" class="headerlink" title="三小原则"></a>三小原则</h2><p>1、<strong>别崩溃</strong>。无论计划执行得多么糟糕，也千万都不要崩溃，不及格就不及格吧，下周一再来重新制定一周计划。看看我五年以来的计划表，前几年经常有一周、一月不及格的，现在已经很少很少了。这就是我在目标管理上取得成就的证明。曾经我在备考研究生时，国庆假期制定了满满的计划，结果因为回老家、走亲访友等等原因，几乎一点也没有复习，而12月份马上就要考试了，当时我也濒临崩溃的边缘；但我及时调整心态，给了这个星期以合格分，告诉自己就当这周是休养生息的一周，好好休息之后再投入后面的复习中去。靠这个方法，我重整旗鼓，最终成功撑过了考试。</p><p>2、<strong>前半程时间要完成前半程工作量</strong>。每个目标周期内，前半段时间内要完成总目标量的一半，比如周计划，你这周假如30分及格，你需要在周四之前完成15分。我有无数次惨痛经验证明凡事要做在前面，不要在最后deadline的时候来赶，最后两天如果你还差很多分的话，心里会有巨大的压力，很容易崩溃和自暴自弃，何况周末两天很可能会发生预期之外的聚会，完全打乱你的补分计划。假如你养成了把工作做在前面的习惯，你能获得很强大的心理势能，会有一种尽在掌控的感觉。这是非常好的良性循环，可以提升你的自信心。</p><p>3、<strong>每周的目标只订3个</strong>。说是三个，实际你也可以订1-5个，但是订少了我总觉得这周有点白过，订多了我又做不过来，而且我也记不住； 你最好根据自己的经验来制定。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>目标管理不是短跑而是马拉松长跑、是一个持之以恒与自己谈话的过程，在这个过程中，你会逐渐认识自己的不完美，逐渐喜欢上目标管理这件事情，或者说你喜欢上了自己能掌控自己这件事情。你的生活不再是随波逐流，而是朝着目标快乐地、持续地前进。这是世界上最美好的事情之一。</p><p>有句话说的是：<strong>希望我们有勇气来改变可以改变的事情,有胸怀来接受不可改变的事情,有智慧来分辨两者的不同</strong>。只要持续做目标管理，你终有一天可以拥有这一智慧。</p>]]></content>
      
      
      <categories>
          
          <category> 心理学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言指令</title>
      <link href="/posts/77fc.html"/>
      <url>/posts/77fc.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>mem: memory的简写，表示内存单元<br>reg: register的简写，表示寄存器</p></blockquote><h2 id="LEA"><a href="#LEA" class="headerlink" title="LEA"></a>LEA</h2><blockquote><p>LEA是微机8086/8088系列的一条指令，取自英语Load effective address——取有效地址，也就是取偏移地址。在微机8086/8088中有20位物理地址，由16位段基址向左偏移4位再与偏移地址之和得到。地址传送指令之一。LEA指令用于把源操作数的地址偏移量传送目的操作数。源操作数一定要是一个存贮器操作数，而召的操作数可以是任何的16位的通用寄存器，包括指针寄存器/变址寄存器。lea指令允许源操作数被下标标出，但是不允许使用带有OFFSET操作符的MOV指令。另外，后面的操作一定要使用被定义的段中的变量偏移量。然而，如果这组仅仅能够通过最后的ASSUME伪指令操作存取的话，lea指令将把它当作一组偏移量。</p></blockquote><h3 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h3><p>如下：<br>LEA reg16,mem<br>LEA指令将存储器操作数mem的4位16进制偏移地址送到指定的寄存器。这里，源操作数必须是存储器操作数，目标操作数必须是16位通用寄存器。因该寄存器常用来作为地址指针，故在此最好选用四个间址寄存器BX,BP,SI,DI之一。<br>LEA 取有效地址指令 （Load Effective Address )<br>指令格式：LEA 目的，源<br>解释：指定的寄存器的内容被标出的变量偏移量取代，也可以用标号，或地址表达式所取代。<br>指令功能：取源操作数地址的偏移量，并把它传送到目的操作数所在的单元。如：<br>LEA BX ，BUFFER<br>LEA AX，[BX] [DI] (j基址加变址寻址)<br>LEA DX，DATA [BX] [SI] (相对基址加变址寻址)  [3]<br>LEA 指令要求源操作数必须是存储单元，而且目的操作数必须是一个除段寄存器之外的16位或32位寄存器。当目的操作数是16位通用寄存器时，那么只装入有效地址的低16位。使用时要注意它与MOV指令的区别，MOV指令传送的一般是源操作数中的内容而不是地址。</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ul><li>例1 假设：SI=1000H , DS=5000H, (51000H)=1234H<ul><li>执行指令 LEA BX , [SI]后，BX=1000H</li><li>执行指令 MOV BX , [SI]后，BX=1234H</li></ul></li></ul><p><strong>有时，LEA指令也可用取偏移地址的MOV指令替代。</strong></p><ul><li>例2 下面两条指令就是等价的，他们都取TABLE的偏移地址，然后送到BX中，即<ul><li>LEA BX,TABLE</li><li>MOV BX,OFFSET TABLE</li></ul></li></ul><p>但有些时候，必须使用LEA指令来完成某些功能，不能用MOV指令来实现，必须使用下面指令：<br>LEA BX, 6[DI]<br>解释：某数组含20个元素，每个元素占一个字节，序号为0~19。设DI指向数组开头处，如果把序号为6的元素的偏移地址送到BX中。</p><h3 id="LEA与MOV指令"><a href="#LEA与MOV指令" class="headerlink" title="LEA与MOV指令"></a>LEA与MOV指令</h3><p><strong>LEA指令和MOV指令一样是移动数据，但是与MOV不同的是，它移动的是“[ ]”里面的内容</strong>，例如：LEA EAX,[ECX]中，执行这条指令相当于MOV EAX,ECX。而MOV EAX,[ECX]是把“[ ]”里面的数据当成是内存地址编号，取地址里面的内容。<br>注意LEA指令与MOV指令的区别，比较下面两条指令：<br>　　LEA BX, BUFFER<br>　　MOV BX, BUFFER<br><strong>前者将存储器变量BUFFER的偏移地址送到BX</strong>，而<strong>后者将存储器变量BUFFER的内容（两个字节）传送到BX</strong>。</p><p>当然也可以用MOV指令来得到存储器的偏移地址，例如以下两条指令的效果相同：<br>　　LEA BX, BUFFER<br>　　MOV BX, OFFSET BUFFER<br>其中，OFFSET BUFFER表示存储器变量BUFFER的偏移地址。</p><hr><h2 id="HLT"><a href="#HLT" class="headerlink" title="HLT"></a>HLT</h2><p>在汇编语言中，本指令是处理器<strong>“</strong>暂停<strong>”</strong>指令。</p><p>功能：<br>使程序停止运行，处理器进入暂停状态，不执行任何操作，不影响标志。当复位（外语：RESET）线上有复位信号、CPU响应非屏蔽中断、CPU响应可屏蔽中断3种情况之一时，CPU脱离暂停状态，执行HLT的下一条指令。<br>【指令格式】HLT 指令没有操作数。</p><hr><h2 id="XCHG"><a href="#XCHG" class="headerlink" title="XCHG"></a>XCHG</h2><blockquote><p>交换指令XCHG是两个寄存器，寄存器和内存变量之间内容的交换指令，两个操作数的数据类型要相同，可以是一个字节，也可以是一个字，也可以是双字。功能：交换两个操作数的数据，</p></blockquote><ul><li>XCHG CH,AL 寄存器之间相互交换，字节操作</li><li>XCHG BX,SI 寄存器之间相互交换，字操作</li><li>XCHG [SI],CX 存储器与寄存器之间交换，字操作 </li><li><strong>该指令的功能和MOV指令不同，后者是一个操作数的内容被修改，而前者是两个操作数都会发生改变。</strong>寄存器不能是段寄存器，两个操作数也不能同时为内存变量。 XCHG指令不影响标志位。</li></ul><hr><h2 id="SCASB"><a href="#SCASB" class="headerlink" title="SCASB"></a>SCASB</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用:"></a>作用:</h3><p>　　对于字节串，执行（AL）-(DI)；根据执行结果设置状态位，但执行结果不改变DI所指向的内存单元的值。</p><p>　　根据DF的值及使用的指令是SCASB修改SI和DI，使SI和DI指向串处理方向的下一个元素。</p><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件:"></a>使用条件:</h3><p>　　目的串是在附加数据段ES定义的，根据串的类型选用指令SCASB</p><p>　　指令规定用DI指向目的串，DI的初始值指向串首或者串尾。</p><p> 根据具体情况决定串的处理方向，根据串的处理方向设置DF的值。如果从串首到串尾处理串，必须设置DF=0（CLD），DI的初始值指向串首；如果从串尾到串首处理串，必须设置DF=1（STD），DI的初始值指向串尾；源串和目的串的处理方向是一致的。</p><hr><h2 id="PUSH、POP"><a href="#PUSH、POP" class="headerlink" title="PUSH、POP"></a>PUSH、POP</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/BATdalao/cdn_jsDelivr/imgs/092003.png" alt="PUSH、POP"></p><hr><h2 id="标志位介绍"><a href="#标志位介绍" class="headerlink" title="标志位介绍"></a>标志位介绍</h2><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/BATdalao/cdn_jsDelivr/imgs/092001.png" alt="标志位位置"></p><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/BATdalao/cdn_jsDelivr/imgs/092002.png" alt="标志位简介"></p><h2 id="一、运算结果标志位"><a href="#一、运算结果标志位" class="headerlink" title="一、运算结果标志位"></a>一、运算结果标志位</h2><h3 id="1、进位标志CF-Carry-Flag"><a href="#1、进位标志CF-Carry-Flag" class="headerlink" title="1、进位标志CF(Carry Flag)"></a>1、进位标志CF(Carry Flag)</h3><p>进位标志CF主要用来反映运算是否产生<strong>进位或借位</strong>。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。</p><p>使用该标志位的情况有：多字(字节)数的加减运算，无符号数的大小比较运算，移位操作，字(字节)之间移位，专门改变CF值的指令等。</p><h3 id="2、奇偶标志PF-Parity-Flag"><a href="#2、奇偶标志PF-Parity-Flag" class="headerlink" title="2、奇偶标志PF(Parity Flag)"></a>2、奇偶标志PF(Parity Flag)</h3><p>奇偶标志PF用于反映运算结果中<strong>“1”的个数的奇偶性</strong>。如果“1”的个数为偶数，则PF的值为1，否则其值为0。</p><p>利用PF可进行奇偶校验检查，或产生奇偶校验位。在数据传送过程中，为了提供传送的可靠性，如果采用奇偶校验的方法，就可使用该标志位。</p><h3 id="3、辅助进位标志AF-Auxiliary-Carry-Flag"><a href="#3、辅助进位标志AF-Auxiliary-Carry-Flag" class="headerlink" title="3、辅助进位标志AF(Auxiliary Carry Flag)"></a>3、辅助进位标志AF(Auxiliary Carry Flag)</h3><p>在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：</p><p><strong>(1)、在字操作时，发生低字节向高字节进位或借位时；</strong><br><strong>(2)、在字节操作时，发生低4位向高4位进位或借位时。</strong></p><p>对以上6个运算结果标志位，在一般编程情况下，标志位CF、ZF、SF和OF的使用频率较高，而标志位PF和AF的使用频率较低。</p><h3 id="4、零标志ZF-Zero-Flag"><a href="#4、零标志ZF-Zero-Flag" class="headerlink" title="4、零标志ZF(Zero Flag)"></a>4、零标志ZF(Zero Flag)</h3><p>零标志ZF用来反映<strong>运算结果是否为0</strong>。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。</p><h3 id="5、符号标志SF-Sign-Flag"><a href="#5、符号标志SF-Sign-Flag" class="headerlink" title="5、符号标志SF(Sign Flag)"></a>5、符号标志SF(Sign Flag)</h3><p>符号标志SF用来反映<strong>运算结果的符号位，它与运算结果的最高位相同</strong>。在微机系统中，有符号数采用补码表示法，所以，SF也就反映运算结果的正负号。运算结果为正数时，SF的值为0，否则其值为1。</p><h3 id="6、溢出标志OF-Overflow-Flag"><a href="#6、溢出标志OF-Overflow-Flag" class="headerlink" title="6、溢出标志OF(Overflow Flag)"></a>6、溢出标志OF(Overflow Flag)</h3><p>溢出标志OF用于反映<strong>有符号数加减运算所得结果是否溢出</strong>。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。</p><p>“溢出”和“进位”是两个不同含义的概念，不要混淆。如果不太清楚的话，请查阅《计算机组成原理》课程中的有关章节。</p><h2 id="二、状态控制标志位"><a href="#二、状态控制标志位" class="headerlink" title="二、状态控制标志位"></a>二、状态控制标志位</h2><p>状态控制标志位是用来控制CPU操作的，它们要通过专门的指令才能使之发生改变。</p><h3 id="1、追踪标志TF-Trap-Flag"><a href="#1、追踪标志TF-Trap-Flag" class="headerlink" title="1、追踪标志TF(Trap Flag)"></a>1、追踪标志TF(Trap Flag)</h3><p>当追踪标志TF被置为1时，CPU进入单步执行方式，即每执行一条指令，产生一个单步中断请求。这种方式主要用于程序的调试。</p><p>指令系统中没有专门的指令来改变标志位TF的值，但程序员可用其它办法来改变其值。</p><h3 id="2、中断允许标志IF-Interrupt-enable-Flag"><a href="#2、中断允许标志IF-Interrupt-enable-Flag" class="headerlink" title="2、中断允许标志IF(Interrupt-enable Flag)"></a>2、中断允许标志IF(Interrupt-enable Flag)</h3><p>中断允许标志IF是用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。具体规定如下：</p><p>(1)、当IF=1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求；</p><p>(2)、当IF=0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。</p><p>CPU的指令系统中也有专门的指令来改变标志位IF的值。</p><h3 id="3、方向标志DF-Direction-Flag"><a href="#3、方向标志DF-Direction-Flag" class="headerlink" title="3、方向标志DF(Direction Flag)"></a>3、方向标志DF(Direction Flag)</h3><p>方向标志DF用来决定在串操作指令执行时有关指针寄存器发生调整的方向。具体规定在第5.2.11节——字符串操作指令——中给出。在微机的指令系统中，还提供了专门的指令来改变标志位DF的值。</p><h2 id="三、32位标志寄存器增加的标志位"><a href="#三、32位标志寄存器增加的标志位" class="headerlink" title="三、32位标志寄存器增加的标志位"></a>三、32位标志寄存器增加的标志位</h2><h3 id="1、I-O特权标志IOPL-I-O-Privilege-Level"><a href="#1、I-O特权标志IOPL-I-O-Privilege-Level" class="headerlink" title="1、I/O特权标志IOPL(I/O Privilege Level)"></a>1、I/O特权标志IOPL(I/O Privilege Level)</h3><p>I/O特权标志用两位二进制位来表示，也称为I/O特权级字段。该字段指定了要求执行I/O指令的特权级。如果当前的特权级别在数值上小于等于IOPL的值，那么，该I/O指令可执行，否则将发生一个保护异常。</p><h3 id="2、嵌套任务标志NT-Nested-Task"><a href="#2、嵌套任务标志NT-Nested-Task" class="headerlink" title="2、嵌套任务标志NT(Nested Task)"></a>2、嵌套任务标志NT(Nested Task)</h3><p>嵌套任务标志NT用来控制中断返回指令IRET的执行。具体规定如下：</p><p>(1)、当NT=0，用堆栈中保存的值恢复EFLAGS、CS和EIP，执行常规的中断返回操作；</p><p>(2)、当NT=1，通过任务转换实现中断返回。</p><h3 id="3、重启动标志RF-Restart-Flag"><a href="#3、重启动标志RF-Restart-Flag" class="headerlink" title="3、重启动标志RF(Restart Flag)"></a>3、重启动标志RF(Restart Flag)</h3><p>重启动标志RF用来控制是否接受调试故障。规定：RF=0时，表示“接受”调试故障，否则拒绝之。在成功执行完一条指令后，处理机把RF置为0，当接受到一个非调试故障时，处理机就把它置为1。</p><h3 id="4、虚拟8086方式标志VM-Virtual-8086-Mode"><a href="#4、虚拟8086方式标志VM-Virtual-8086-Mode" class="headerlink" title="4、虚拟8086方式标志VM(Virtual 8086 Mode)"></a>4、虚拟8086方式标志VM(Virtual 8086 Mode)</h3><p>如果该标志的值为1，则表示处理机处于虚拟的8086方式下的工作状态，否则，处理机处于一般保护方式下的工作状态。</p><h2 id="标志位操作指令"><a href="#标志位操作指令" class="headerlink" title="标志位操作指令"></a>标志位操作指令</h2><p>标志位操作指令是一组对标志位置位、复位、保存和恢复等操作的指令。</p><h3 id="1、进位CF操作指令"><a href="#1、进位CF操作指令" class="headerlink" title="1、进位CF操作指令"></a>1、进位CF操作指令</h3><ul><li>清进位指令CLC(Clear Carry Flag)：CF←0</li><li>置进位指令STC(Set Carry Flag)：CF←1</li><li>进位取反指令CMC(Complement Carry Flag)：CF←not CF</li></ul><h3 id="2、方向位DF操作指令"><a href="#2、方向位DF操作指令" class="headerlink" title="2、方向位DF操作指令"></a>2、方向位DF操作指令</h3><ul><li>清方向位指令CLD(Clear Direction Flag)：DF←0</li><li>置方向位指令STD(Set Direction Flag)：DF←1</li></ul><h3 id="3、中断允许位IF操作指令"><a href="#3、中断允许位IF操作指令" class="headerlink" title="3、中断允许位IF操作指令"></a>3、中断允许位IF操作指令</h3><ul><li><p>清中断允许位指令CLI(Clear Interrupt Flag)：IF←0<br>其功能是不允许可屏蔽的外部中断来中断其后程序段的执行。</p></li><li><p>置中断允许位指令STI(Set Interrupt Flag)：IF←1<br>其功能是恢复可屏蔽的外部中断的中断响应功能，通常是与CLI成对使用的。</p></li></ul><h3 id="4、取标志位操作指令"><a href="#4、取标志位操作指令" class="headerlink" title="4、取标志位操作指令"></a>4、取标志位操作指令</h3><ul><li>LAHF(Load AH from Flags)：AH←Flags的低8位</li><li>SAHF(Store AH in Flags)：Flags的低8位←AH</li></ul><h3 id="5、标志位堆栈操作指令"><a href="#5、标志位堆栈操作指令" class="headerlink" title="5、标志位堆栈操作指令"></a>5、标志位堆栈操作指令</h3><ul><li>PUSHF/PUSHFD(Push Flags onto Stack)：把16位/32位标志寄存器进栈；</li><li>POPF/POPFD(Pop Flags off Stack)：把16位/32位标志寄存器出栈；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微机原理两个程序</title>
      <link href="/posts/d72.html"/>
      <url>/posts/d72.html</url>
      
        <content type="html"><![CDATA[<h2 id="显示一个固定的字符串"><a href="#显示一个固定的字符串" class="headerlink" title="显示一个固定的字符串"></a>显示一个固定的字符串</h2><pre class=" language-bash"><code class="language-bash">TITLE  STRING DISPLAY<span class="token punctuation">;</span> DATA SEGMENTSTRING1 DB <span class="token string">'WELCOME TO XTU $'</span> ；字符串以’$’符号结尾，以单引号括起来DATA ENDSCODE SEGMENT  ASSUME CS:CODE,DS:DATASTART:  PUSH DS  MOV AX,0  PUSH AX  MOV AX,DATA  MOV DS,AX  LEA DX,STRING1  MOV AH,9；DOS功能调用，在屏幕上显示字符串  INT 21H   ；DOS中断  MOV AH,4CH  INT 21HCODE ENDS  END START该程序成功显示了固定字符串WELCOME TO XTU，完成了字符显示程序。</code></pre><h2 id="寻找字符串中某个字符的数量"><a href="#寻找字符串中某个字符的数量" class="headerlink" title="寻找字符串中某个字符的数量"></a>寻找字符串中某个字符的数量</h2><pre class=" language-bash"><code class="language-bash">TITLE  calculate word quantity<span class="token punctuation">;</span> DATA SEGMENTSTRING1 DB <span class="token string">'ABAaAAAAABaaaaaBBBBBB'</span>  <span class="token punctuation">;</span>输入待检测的字符串STRING2 DB <span class="token string">'B'</span>           <span class="token punctuation">;</span>给定要检测的那个数<span class="token punctuation">;</span>STRING3 DB STRING2-STRING1 DATA ENDSCODE SEGMENT  ASSUME CS:CODE,DS:DATA,ES:DATASTART:  MOV  AX,DATA <span class="token punctuation">;</span>将数据送给AX  MOV  DS,AX   <span class="token punctuation">;</span>将AX中的数据送到DS  MOV  ES,AX   <span class="token punctuation">;</span>将AX中的数据送到ES  MOV  DI,OFFSET STRING1  <span class="token punctuation">;</span>将字符串1的偏移地址送到DI  MOV  AL,STRING2         <span class="token punctuation">;</span>将字符串2的内容送给AL  MOV  CX,50              <span class="token punctuation">;</span>设置循环次数NEXT:                        <span class="token punctuation">;</span>调用一个函数  CMP <span class="token punctuation">[</span>DI<span class="token punctuation">]</span>,AL              <span class="token punctuation">;</span>以DI里的内容为地址所对应的数与AL比较  JNE NO_FOUND             <span class="token punctuation">;</span>比较结果如果不相等，跳转到NO_FOUND  INC BX                  <span class="token punctuation">;</span>如果比较结果相等，则执行这条语句，BX自加1NO_FOUND:  INC DI            <span class="token punctuation">;</span>比较结果不等，则让DI自加，让字符串1的下一个字符                    <span class="token punctuation">;</span>进行比较  LOOP NEXT                 <span class="token punctuation">;</span>回到NEXT比较,直到CX为0  MOV  DL,BL                <span class="token punctuation">;</span>将计好的数给DL    ADD DL,30H                <span class="token punctuation">;</span>将DL转换成ASCII码  MOV  AH,02  INT  21H  MOV  AH,4CH  INT  21HCODE ENDSEND START</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络期末考试重点</title>
      <link href="/posts/e967.html"/>
      <url>/posts/e967.html</url>
      
        <content type="html"><![CDATA[<p>题型：选择、填空简答、问答、名词解释、计算设计</p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述 ."></a>一、概述 .</h2><ol><li><p>计算机网络的几种不同分类</p><p>(1) 按交换功能分为：电路交换；报文交换；分组交换；混合交换。</p><p>(2) 按网络的作用范围分类：广域网；局域网；城域网；接入网</p><p>(3) 按网络使用者分类：公用网；专用网</p></li><li><p>带宽</p><p>带宽本来指信道上具有的频带宽度，带宽的单位是赫。人们都将带宽作为数字信道所能传送的最高数据率。</p><p>（计算机中字节作为度量的单位。一个字节代表 8 个比特，它的缩写是大写的 B. 千字节的千用大写表示，它等于 2^10. 即 1024 而不是 1000 ， 1MB=2^20 等。在通信领域 k 表示 10^3. ）</p></li><li><p>时延</p><p>(1)  时延是指一个报文或分组从一个网络（或一个链路）的一端传送到另一端所需的时间。</p><p>(2) 发送时延 = 数据块长度 / 信道带宽</p><p>(3) 传播时延 = 信道长度 / 电磁波在信道上的传播速率</p><p>(4) 总时延 = 传播时延 + 发送时延 + 处理时延</p><p>(5) 对于高速网络链路，我们提高的仅仅是数据的发送速率而不是比特在链路上的传播速率。</p><ol start="4"><li>计算机网络划分层次的必要性</li></ol><p>(1) 为进行网络中的数据交换而建立的规则、标准或约定即称为网络协议，其主要由三个要素组成。</p></li></ol><p>语法，数据与控制信息的结构或格式</p><p>语义，需要发出何种控制信息，完成何种控制动作以及做出何种响应</p><p>同步，时间实现顺序的详细说明</p><p>(2) 其带来的好处：</p><p>各层之间是独立的；灵活性好；结构上可分割；易于实现和维护；能促进标准化工作。每一层所要实现的一般功能有一种或多种：流量控制；差错控制；分装盒重装；复用和分用；链接建立和释放。</p><p>(3) 缺点：有些功能会再不同的层次中重复出现，因而产生了额外的开销。</p><ol start="5"><li><p>具有五层协议的体系结构</p><p>(1) 应用层，是体系结构中的最高层，直接为用户的应用进程提供服务。</p><p>(2) 运输层，任务是负责两个主机中进程之间的通信。</p><p>（可使用两种不同的协议：传输控制协议 TCP ，面向链接的，数据传输的单位是报文段，能提供可靠的交付；用户数据协议 UDP ，无连接的，数据传输单位是用户数据报，不保证提供可靠的交付，只能提供尽最大努力的交付。）</p><p>(3) 网络层，负责为分组交换网上的不同主机提供通信。因特网主要的网络层协议是无连接的网际协议 IP 。</p><p>(4) 数据链路层，在发送数据时，它将网际层交下来的 IP 数据报组装成帧，在两个相邻结点间的链路上传送以帧为单位的数据。</p><p>(5) 物理层，主要任务就是透明地传送比特流。</p></li></ol><p>（在 OSI 参考模型中，在对等层次上传送的数据，其单位都称为该层的  协议数据单元 PDU 。）</p><ol start="6"><li>实体、协议、服务和服务访问点</li></ol><p>(1) 实体表示任何可发送或接收信息的硬件或软件进程；协议是控制两个对等实体进行通信的规则的集合。</p><p>(2) 在协议的控制下，两个对等的实体间的通信使得本层能够向上一层提供服务。要实现本层协议，还需要使用下面一层所提供的服务。</p><p>(3) 本层的服务用户只能看见服务而无法看见下面的协议。下面的协议对上面的服务用户是透明的。其次，协议是水平的，是控制对等实体之间的通信规则；但服务是垂直的，是由下层向上层通过层间接口提供的。另外明知有那些被高一层看得见的功能才能称为服务。（协议与服务概念的根本区别）</p><ol start="7"><li><p>面向连接与无连接服务。</p><p>(1) 面向连接服务具有连接建立、数据传输和连接释放三个阶段，适合于在一定期间内要向同一目的地发送许多报文的情况。</p><p>(2) 无连接服务不需要先建立好一个连接，其下层的有关资源不需要事先进行预定保留。其优点是灵活方便和比较迅速，但不能防止报文的丢失、重复或失序。</p></li></ol><p>8.OSI 与 TCP/IP 体系结构的比较</p><p> (1)TCP/IP 一开始就考虑到多种异构网的互联问题，并将网际协议 IP 作为 TCP/IP 的重要组成部分。</p><p> (2)TCP/IP 一开始就对面向连接服务和无连接服务并重，而 OSI 在开始时只强调面向连接这一种服务。</p><p> TCP/IP 较早就有较好的网络管理功能。</p><h2 id="二、物理层"><a href="#二、物理层" class="headerlink" title="二、物理层"></a>二、物理层</h2><ol><li><p>有关信道的几个基本概念</p><p>信道一般都是用来表示向某一个方向传送信息的媒体。一条通信电路往往包含一跳发送信道和一条接收信道。</p></li></ol><p>从通信的双方信息交互方式来看，可以有三个基本方式：</p><p>单向通信，只有一个方向没有反方向的交互；双向交替通信，又称半双工通信，双方都可以发送信息，但不能同时发送或接收；双向同时通信，双方可以同时发送和接收信息。</p><p>  信道上传送的信号还有基带信号和宽带信号之分。基带信号是将数字信号 1 或 0 直接用两种不同的电压来表示，然后送到线路上去传输；而宽甸信号则是将基带信号进行调制后形成的频分复用模拟信号。</p><ol start="2"><li><p>信道的最高码元传输速率</p><p>码元传输的速率越高，或信号传输的距离越远，在信道的输出端的波形的失真就越严重。</p><p>奈氏准则：理想低通信道的最高码元传输速率 =2W Baud ， W 是理想低通信道的带宽，单位为赫， Baud 是波特，是码元传输速率的单位， 1 波特为每秒传送 1 个码元。</p><p>理想带通信道的最高码元 =W Baud 。</p><p>一个实际的信道所能传输的最高码元速率要明显低于奈氏准则给出的这个上限数值。波特是码元传输的速率单位，它说明每秒传多少个码元。比特是信息量的单位。</p><p>香农公式： C=W long2 （ 1+s/n ）  b/s W 为信道的带宽， S 为信道内所传信号的平均功率， N 为信道内部的高斯噪音功率。</p><p>由于码元的传输速率受到奈氏准则的制约，所以要提高信息的传输速率就必须设法使每一个码元能鞋带更多个比特的信息量。</p></li><li><p>导向传输媒体</p><p>双绞线：屏蔽双绞线 STP ；无屏蔽双绞线</p><p>同轴电缆 :50 欧姆同轴电缆，主要用于在数据通信中传送基带数字信号，传输速率越高，所能传送的距离就越短； 75 欧姆同轴电缆，这种同轴电缆用于模拟传输系统。</p><p>光缆：多模光缆（经多次反射，在传输中光脉冲会逐渐展宽，造成失真）；单模光缆（使光线一直向前传播，不会产生多次反射，但成本高）</p></li><li><p>非导向传输媒体</p><p>地面微波接力通信和卫星通信。和微波接力通信相似，卫星通信的频带很宽，通信容量很大，信号所受到的干扰也比较小，通信比较稳定。</p><ol start="5"><li>调制解调器</li></ol><p>调制器的主要作用就是个波形变换器，解调器的作用就是个波形识别器</p><p>调制方法：调幅 AM 、调频 FM 、调相 PM  即载波的振幅 / 频率 / 初始相位随基带数字信号而变化。</p><ol start="6"><li>数字传输系统</li></ol><p>现在得数字传输系统都是采用脉码调制 PCM ，其有 2 个互不兼容的国际标准，即北美的 24 路 PCM(T1) 和欧洲的 30 路 PCM( 简称为 E1). 我国采用的是 E1 标准。 T1 的速率是 1.544MB/S ， E1 的速率是 2.048MB/S 。</p><ol start="7"><li>信道复用技术</li></ol><p>频分复用 FDM 的所有用户在同样的时间占有不同的带宽资源；时分复用 TDM 的所有用户是在不同的时间占用同样的频带宽度；统计时分复用 STDM 是一种改进的时分复用，它能明显地提高信道的利用率。</p><p>频分和时分复用的有点是技术比较成熟，但缺点是不够灵活，时分复用更有利于数字信号的传输。</p><p>波分复用就是光的频分复用。</p><p>掺铒光纤放大器 EDFA 是一种光放大器，不需要进行光电转换而直接对光信号进行放大 .</p></li></ol><p>  码分复用 CDM 最初用于军事通信，采用 CDMA 可提高通信的话音质量和数据传输的可靠性，减少干扰对通信的影响，增大通信系统的容量，降低手机的平均发射功率等。</p><p>  同步光纤网 SONET 为光纤传输系统定义了同步传输的线路速率等级结构，其传输速率以 54.84MB/S 为基础，大约对应于 T3/E3 的传输速率，此速率对电信号称为第 1 级同步传送信号 STS-1; 对光信号则称为第 1 级光载波 OC-1.</p><p>  同步数字系列 SDH 的基本速率为 155.52MB/S ，称为第 1 级同步传递模块 STM-1.</p><h2 id="三、点对点信道的数据链路层"><a href="#三、点对点信道的数据链路层" class="headerlink" title="三、点对点信道的数据链路层"></a>三、点对点信道的数据链路层</h2><ol><li><p>数据链路层的基本概念</p><p>帧为数据链路层的协议数据单元。</p><p>数据链路层的最主要的功能可归纳为：</p><ul><li><p>结点 A 的数据链路层把网络层交下来的 IP 数据报封装成帧；</p></li><li><p>结点 A 把封装好的帧发送给结点 B 的数据链路层 ;</p></li><li><p>若结点 B 的数据链路层收到的帧无差错，则从收到的帧中提取 IP 数据报上交给上面的网络层，否则丢弃这个帧。</p></li></ul><p>一般的网络适配器都包括了数据链路层和物理层这两层的功能。</p></li><li><p>透明传输</p><p>为了解决透明传输问题，必须设法使数据中可能出现的控制字符 SOH 和 EOT 在接收端不被解释为控制字符。具体方法是：每当数据中出现字符 SOH 或 EOT 时就将其转换为另一个字符，而这个字符是不会被错误解释为控制字符的。这种方法称为字节插入。</p></li></ol><p>局域网</p><ol><li><p>局域网按网络拓扑进行分类：星形网、环形网、总线网、树形网</p><p>局域网的数据链路层拆分为两个子层，即逻辑链路控制 LLC 子层和媒体接入控制 MAC 子层。</p></li></ol><p>2.CSMA/CD 协议</p><p>  载波监听多点接入 / 碰撞检测 CSMA/CD 协议的要点：多点接入就是说嘛这是总线型网络，许多计算机以多点接入的方式连接在一根总线上。协议的实质是载波监听和碰撞检测</p><p>  载波监听是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。</p><p>  碰撞检测就是计算机边发送数据边检测信道上的信号电压大小。</p><p>3.MAC 层的硬件地址</p><p> 在局域网中硬件地址又称为物理地址或 MAC 地址。 MAC 地址实际上就是网卡地址或网卡标识符 EUI-48.</p><ol start="4"><li><p>两种不同的 MAC 帧格式</p><p>DIX Rthernet V2 标准和 IEEE 的 802.3 标准，其简单格式件 P113</p></li><li><p>在物理层扩展局域网是使用转发器和集线器。</p></li><li><p>在数据链路层扩展局域网是使用网桥</p></li><li><p>网桥的工作原理：网桥从端口接收网段上传送的各种帧。每当收到一个帧时，就先暂存在其缓存中，若此帧未出现差错，且欲发往母的站 MAC 地址属于另一个网桥，则通过查找转发表，将收到的帧传送往对应的端口转发出去。若该帧出现差错，则丢弃此帧。因此尽在同一个网段中通信的帧不会被网桥转发到另一个网段去，因而不会加重整个网络的负担。 P116</p></li><li><p>目前使用得最多的网桥是透明网桥。透明是指局域网上的站点并不知道所发送的帧将经过哪几个网桥，因为网桥对各站来说是看不见的。透明网桥是一种即插即用设备，其标准是 IEE 802.1D 。</p></li><li><p>（什么）虚拟局域网 VLAN 是由一些局域网段构成的与物理位置无关的逻辑组，而这些网段具有某些共同的需求。   （为什么用）虚拟局域网限制了接收广播信息的工作站数，使得网络不会因传播过多的广播信息而引起性能恶化。</p></li></ol><h2 id="四、网络互连"><a href="#四、网络互连" class="headerlink" title="四、网络互连"></a>四、网络互连</h2><ol><li><p>路由器在网际互连中的作用</p><p>离开路由器就无法在互联网上传送数据。路由器是一种具有多个输入端口和多个输出端口的专用计算机，其任务是转发分组。整个路由器结构可划分为两大部分：路由选择部分和分组转发部分。</p></li><li><p>因特网的网际协议 IP</p><p>网际协议 IP 是 TCP/IP 体系中两个最主要的协议之一也是最重要的因特网标准协议之一。与 IP 协议配套使用的还有 4 个协议：</p></li></ol><ul><li><p>地址解析协议 ARP</p></li><li><p>逆地主解析协议 RARP</p></li><li><p>因特网控制报文协议 ICMP</p></li><li><p>因特网组管理协议 IGMP</p></li></ul><ol start="3"><li><p>分类的 IP 地址</p><p>IP 地址编址方法共经历三个历史阶段：分类的 IP 地址；子网的划分；构成超网</p><p>IP 地址  ={&lt; 网络号 &gt; ， &lt; 主机号 &gt;}  见 P174 页图</p><p>常用的三种类别 IP 地址：结合 P174 、 P176 的图</p></li><li><p>IP 地址与硬件地址区别：从层次角度看，物理地址是数据链路层和物理层使用的地址，而 IP 地址是网络层和以上各层使用的地址。 P178 图</p></li></ol><ol start="5"><li>连接在通信链路上的舌部（主机或路由器）在接收 MAC 帧时，其根据是 MAC 帧收不中的硬件地址。在数据链路层看不见隐蔽在 MAC 帧的数据中的 IP 地址。只有在剥去 MAC 帧的首部和尾部后将 MAC 层的数据上交给网络层（这时 MAC 层的数据就变成了 IP 数据包），网络层才能在 IP 数据包的首部中找打源 IP 地址和目的 IP 地址 .(IP 地址与硬件地址映射和转换关系） P178 图</li></ol><p>6.IP 数据包的格式。 P182</p><p>7.IP 层转发分组的流程</p><p>  当路由器收到一个待转发的数据报，从路由表得出下一条路由器的 IP 地址后，不是将下一跳路由器的 IP 地址填入 IP 数据报，而是送交下层的网络接口软件。网络接口软件负责将下一跳路由器的 IP 地址转换成硬件地址（使用 ARP) ，并将此硬件地址放在链路层的 MAC 帧的首部，然后根据这个硬件地址找到下一跳路由器。</p><ol start="8"><li><p>划分子网</p><p>为什么要划分子网：</p></li></ol><p>*IP 地址空间的利用率有时很低</p><ul><li><p>给每一个物理网络分配一个网络号会使路由表变得太大而使网络性能变坏</p></li><li><p>两级 IP 地址不够灵活</p><p>划分子网的基本思路：</p></li><li><p>一个拥有许多物理网络的单位，可将所属的物理网络划分为若干个子网</p></li><li><p>划分子网的方法是从网络的主机号借用若干个比特作为子网号，而主机号也就相应减少了若干个比特  即  IP 地址 ={&lt; 网络号 &gt;,&lt; 子网号 &gt;,&lt; 主机号 &gt;}</p></li><li><p>凡是从其他网络发送给本单位某个主机的 IP 数据报，仍然是根据 IP 数据报的目的网络号找到连接在本单位上的路由器。由此路由器在收到 IP 数据报后，再按目的网络号和子网号找到目的子网，将 IP 数据报交付给目的主机</p></li></ul><ol start="9"><li><p>使用子网掩码的分组转发过程。 P190  掌握计算与转算方法</p></li><li><p>无分类编址 CIDR （计算题）</p></li><li><p>从匹配结果中选择具有最长网络前缀的路由叫做最长前缀匹配。</p></li><li><p>内部网关协议 RIP</p><p>工作原理： RIP 是一种分布式的基于距离向量的鲈鱼选择协议，是因特网的标准协议，其最大特点就是简单。 RIP 允许一条路径最多只能包含 15 个路由器，因此距离的最大值为 16 时即详单与不可达，可见 RIP 只适用于小型互联网。</p></li><li><p>内部网关协议 OSPF 、外部网关协议 BGP （记住名词）</p></li></ol><h2 id="五、运输层"><a href="#五、运输层" class="headerlink" title="五、运输层"></a>五、运输层</h2><p>1 运输层中的两个协议</p><p>  用户数据报协议 UDP 和传输控制协议 TCP</p><p>  两个对等运势实体在通信时传送的数据单位叫做运输协议数据单元 TPDU 。</p><p> TPDU 两种情况：在 TCP/IP 体系中，根据所使用的协议是 TCP 货 UDP 分别称之为 TCP 报文段或 UDP 报文或用户数据报。</p><ol start="2"><li><p>端口的概念</p><p>应用层的各种进程是通过相应的端口与运输实体进行交互。端口的作用就是让应用层的各种应用进程都能将其数据通过端口向下交付给运输层，以及让运输层知道应当将其报文段中的数据向上通过端口交付给应用层相应的进程。</p></li><li><p>为了在通信时不致发生混乱，必须把端口号和主机的 IP 地址结合在一起使用，一个 TCP 链接由它的两个端点来标志，而每一个端点又是由 IP 地址和端口号决定的。因此， TCP 使用链接作为最基本的抽象，同时将 TCP 链接的端点称为插口，或套接字、套接口</p></li></ol><p>插口 = （ IP 地址，端口号）   例如（ 131.6.23.13,1500 ）</p><p>4.UDP 概述</p><ul><li>发送数据之前不需要建立链接，因此减少了开销和发送数据之前的时延。</li></ul><p>*UDP 不使用拥塞控制，也不保证可靠交付，因此主机不需要维持具有许多参数的、复杂的链接状态表。</p><p>*UDP 用户数据只有 8 个字节的首部开销，比 TCP 的 20 个字节的首部要段。</p><ul><li>由于 UDP 没有拥塞控制，因此网络出现的拥塞不会使源主机的发送速率降低。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当自己颓废的时候怎么激励自己？</title>
      <link href="/posts/7dd.html"/>
      <url>/posts/7dd.html</url>
      
        <content type="html"><![CDATA[<p>知乎热答：</p><p>很简单。 打开一个招聘网站，选择你理想的职位和薪资，看一下对应的招聘要求，想想自己符合几条。 打开你想去的学校官网，选择你想申请的专业和项目，看一下申请要求，想想自己能否申请上。 想一下你喜欢的那个Ta，思考一下她的择偶标准，想想自己符合几条，能不能给Ta幸福，能不能追到Ta。 想一下你想住的房子，查一下该房子在你想居住地段的价格，看一下自己的银行卡余额。 想一下你想买的车，查一下价格，看看自己的存款。 想一下自己的父母和孩子，思考一下你想给他们怎样的生活，看看自己现在的能力和差距。 想一下自己理想的体重和样貌，称一下自己实际的重量，再照照镜子。 想一下自己一直想去旅行的地方和想去吃的餐厅，思考一下什么时候能去玩能去吃以及能去的频率。 想一下自己一直想去做的某件事，不管是创业、出国旅行、做个spa，买个珠宝、包包、衣服还是换辆车、买个单反、换个电脑等等，现在可以去做了吗，如 果不可以，思考一下为什么。 想一下上一次因为自己能力或者实力不足，而没能达成的一个目标或者没能实现的事情，不管是找工作失败或者买件衣服价格超过自己的预期还是考试成绩 没让自己满意、自己喜欢的女孩儿没看上自己等等，现在你的目标能实现了吗 ？如果不可以，想想怎么做。 想一下你现在做的事情是不是自己喜欢的，想一下你现在是不是可以只做自己喜欢的事情。 如果不可以，那就请加油努力。</p>]]></content>
      
      
      <categories>
          
          <category> 励志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 励志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个优秀的人的八条标志</title>
      <link href="/posts/f196.html"/>
      <url>/posts/f196.html</url>
      
        <content type="html"><![CDATA[<p>我相信一个人的成长，即使到了80岁，只要还活着，依然可以继续下去。我一直在向优秀的人靠近，这辈子一直在追随优秀的人的脚步。从进入北大开始，我的很多同学就成为我学习的榜样。到我大学毕业以后，很多北大的老师也成为我学习的榜样，否则我不会从一个给50人的课堂上课，只剩下3个学生的人，变成北大的优秀老师。创立新东方以后，我不断地向新东方里的各种人学习，不管年轻的、年老的，对我来说没有区别，唯一的区别就是他们身上有没有值得我学习的东西。现在我跟中国和世界范围内的很多著名企业家、政治家、思想家打交道的时候，跟很多成功人士打交道的时候，也从他们身上看到了某些优秀的特质。</p><p>当然，人无完人，如果你在我身边工作，就会发现我身上有很多缺点，而且有些缺点还挺顽固的。优秀真的是很难的一件事情，但是，我们可以归纳一下，一个优秀的人具有哪些特质。我总结了一下，一个优秀的人的标志和特点大概有八条。</p><h2 id="第一条，热爱生命"><a href="#第一条，热爱生命" class="headerlink" title="第一条，热爱生命"></a>第一条，<strong>热爱生命</strong></h2><p>一个优秀的人首先是一个热爱生命的人。热爱生命首先是爱自己，自信而不狂妄。其次兼顾他人，喜欢交朋友。热爱大自然也是热爱生命的一个重要组成部分。总的来说，就是“三热爱”——爱自己，爱他人，爱自然。“三热爱”是优秀的人的第一个标志，我们每个人都可以检讨一下自己，不管生命中遇到多少艰难困苦，我们依然对生命保持热情吗？</p><h2 id="第二条，有一份喜欢并且愿意专注投入的工作"><a href="#第二条，有一份喜欢并且愿意专注投入的工作" class="headerlink" title="第二条，有一份喜欢并且愿意专注投入的工作"></a>第二条，<strong>有一份喜欢并且愿意专注投入的工作</strong></h2><p>一个人热爱工作、专注工作，就一定会在工作上取得好成绩。无数名人讲过“工作着就是幸福的”。一个人有斗志，就会喜欢挑战更难的工作，喜欢锻炼自己，让自己的生命更充实。有一份自己真正喜欢的工作，愿意把它深入下去，做得尽善尽美，同时通过这份工作获取一份收入，这是再好不过的事情。</p><h2 id="第三条，不在乎得失"><a href="#第三条，不在乎得失" class="headerlink" title="第三条，不在乎得失"></a>第三条，<strong>不在乎得失</strong></h2><p>人们对“得”很容易接受，但对“失”却很难坦然接受。即便是一个小小的“失”，我们都会很难受，更何况大“失”呢？但残酷的是，我们一生中不可避免地会失去很多东西。如果我们对得失，尤其是“失”特别在乎，就会走很多弯路。许多企业家已经有了几十亿、上百亿的资产，却还想通过不法途径得到更多财富。一心只想得到，不止是贪心。有些公司让财务人员做假账，只为少交税，少失去一些钱财，不止是吝啬。得失心太重，很可能导致我们走上歧途。所以我们应该正确看待得失：得到是人生的赏赐，要心怀感恩；失去是人生的磨炼，要坦然面对。</p><h2 id="第四条，心怀他人"><a href="#第四条，心怀他人" class="headerlink" title="第四条，心怀他人"></a>第四条，<strong>心怀他人</strong></h2><p>一个优秀的人做任何事都会关注他人的感受，考虑他人的利益，心怀他人。任何人不管说话还是做事，如果只顾自己，不顾他人感受，只会让自己活动的空间越来越窄。当然，任何人都不可能没有伤害别人的时候，但我们还是应该尽力照顾别人的感受，减少伤害。尤其是处于领导层的人，面对下属时要尊重他们，切忌侮辱谩骂。关注他人的感受，从语言上到行为上都是一件特别重要的事情。否则，即便你有能力也不一定有好结果。</p><h2 id="第五条，努力追求成就感和荣誉感"><a href="#第五条，努力追求成就感和荣誉感" class="headerlink" title="第五条，努力追求成就感和荣誉感"></a>第五条，<strong>努力追求成就感和荣誉感</strong></h2><p>请注意，努力追求不包括不择手段。一个优秀的人会永怀上进之心，不断追求成就感和荣誉感，并且把它们放在财富和社会地位之前，这样才会变得越来越好。</p><h2 id="第六条，每天坚持学习和成长"><a href="#第六条，每天坚持学习和成长" class="headerlink" title="第六条，每天坚持学习和成长"></a>第六条，<strong>每天坚持学习和成长</strong></h2><p>读书是我们不断学习和成长最重要的一条途径。世界名牌大学的公开课也是一条促进成长的有效途径。观察并学习周围的人的优点，也能让我们变得更加优秀。一个优秀的人肯定每天都在通过各种各样的方式学习、进步和成长。</p><h2 id="第七条，有真诚、坦率、阳光的性格"><a href="#第七条，有真诚、坦率、阳光的性格" class="headerlink" title="第七条，有真诚、坦率、阳光的性格"></a>第七条，<strong>有真诚、坦率、阳光的性格</strong></h2><p>一个真诚、坦率、阳光的人很容易就能获得他人的好感，交到更多朋友。相反，一个虚伪、隐讳、阴暗的人很难让人接近，常常孤独自处。这是人的天性，没有人会喜欢给自己阴郁感觉的人，人们总是喜欢、欣赏能灿烂自己生活的人。</p><h2 id="第八条，虚心谦卑，不妄自尊大"><a href="#第八条，虚心谦卑，不妄自尊大" class="headerlink" title="第八条，虚心谦卑，不妄自尊大"></a>第八条，<strong>虚心谦卑，不妄自尊大</strong></h2><p>一个优秀的人不会因为他人的赞赏、崇拜，便抬高自己，妄自尊大。他会永远保持自己是一个普通人的心态，这也有利于平衡得失心。其实，优秀的人还有很多其他的普遍特征。但是，这八条中，如果我们能做到其中一两条，也不失为一个优秀的人。做一个优秀的人吧，让我们以此共勉！</p>]]></content>
      
      
      <categories>
          
          <category> 励志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 励志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给自己的每一天注入力量</title>
      <link href="/posts/dce.html"/>
      <url>/posts/dce.html</url>
      
        <content type="html"><![CDATA[<h1 id="十个自问"><a href="#十个自问" class="headerlink" title="十个自问"></a>十个自问</h1><h2 id="1-我拥有什么？"><a href="#1-我拥有什么？" class="headerlink" title="1.我拥有什么？"></a>1.我拥有什么？</h2><p>我们通常会为自己没有的东西而苦恼，却看不到自己拥有的。比如健康，爱与被爱的能力，每天都有食物供我们享用等。正如那句口口相传的话所说：“失去了才知道珍贵。”让我们走出哀怨，这样就可以看到什么是我们拥有的。</p><h2 id="2-我应该为什么感到自豪？"><a href="#2-我应该为什么感到自豪？" class="headerlink" title="2.我应该为什么感到自豪？"></a>2.我应该为什么感到自豪？</h2><p>为自己已经取得的成绩而自豪。成绩不分大小，每一次成功都意味着向前迈出了一步。每个人都有自己值得自豪的东西，你可以为自己刚刚战胜了一个挑战而感到骄傲，可以为帮助了一个陌生人而感到幸福，也可以为结识了新朋友或读了一本新书而感到高兴。</p><h2 id="3-我应该对什么心存感激？"><a href="#3-我应该对什么心存感激？" class="headerlink" title="3.我应该对什么心存感激？"></a>3.我应该对什么心存感激？</h2><p>每天都有很多事情让我们为之心存感激，同时也有很多人值得我们感谢，因为他们在无形中教会了我们许多事情。活着的每一天对于我们来说都是一份珍贵的礼物。</p><h2 id="4-我怎样才能充满活力？"><a href="#4-我怎样才能充满活力？" class="headerlink" title="4.我怎样才能充满活力？"></a>4.我怎样才能充满活力？</h2><p>每天都要计划做一些积极的事情，让自己充满活力。例如，你可以给那些一直以来很欣赏，却很久未联系的人打电话；对工作伙伴说一些鼓励的话；保持微笑，或者留出时间和孩子玩耍等。</p><h2 id="5-我今天能解决什么问题？"><a href="#5-我今天能解决什么问题？" class="headerlink" title="5.我今天能解决什么问题？"></a>5.我今天能解决什么问题？</h2><p>设法把那些原本想留到明天再解决的问题今天就解决掉。尽量在当天完成手头的工作，敢于面对那些棘手的问题，并换一种角度看待它们。</p><h2 id="6-我能抛下过去的包袱吗？"><a href="#6-我能抛下过去的包袱吗？" class="headerlink" title="6.我能抛下过去的包袱吗？"></a>6.我能抛下过去的包袱吗？</h2><p>“过去的包袱”是指长年累积起来的伤心的经历和怨气。背着这些沉重的生活包袱有什么用呢？建议对过去做一个总结，把值得借鉴的经验保存起来，然后永远地卸下重负。</p><h2 id="7-我怎么换个角度看问题？"><a href="#7-我怎么换个角度看问题？" class="headerlink" title="7.我怎么换个角度看问题？"></a>7.我怎么换个角度看问题？</h2><p>人往往都是别人的建议者，却不是自己的。很多时候，根本原因就是我们看待事物的方式。很多人都有过为一件事苦恼不堪，过后又觉得可笑的经历。其实悲和喜只是因为我们看问题的角度不同而已。</p><h2 id="8-我怎样过好今天？"><a href="#8-我怎样过好今天？" class="headerlink" title="8.我怎样过好今天？"></a>8.我怎样过好今天？</h2><p>做些与平常不一样的事。如果我们走出常规，学会享受生活，那么生活就是丰富多彩的。要敢于创造和创新。</p><h2 id="9-今天我要拥抱谁？"><a href="#9-今天我要拥抱谁？" class="headerlink" title="9.今天我要拥抱谁？"></a>9.今天我要拥抱谁？</h2><p>拥抱是我们的精神食粮。曾经有一位心理学家说过，要想健康，每天要至少与人拥抱8次。身体接触是人最基本的需求，它甚至可以帮助我们开发大脑。</p><h2 id="10-现在我就开始行动？"><a href="#10-现在我就开始行动？" class="headerlink" title="10.现在我就开始行动？"></a>10.现在我就开始行动？</h2><p>不要认为这些都是“听起来不错”的建议，也不要认为生活很难是这样的。是让生活过得索然无味，还是积极向上，决定权就在你自已手中。努力幸福地生活，你又会失去什么呢？所以，现在就开始行动吧。</p><h1 id="六条管理措施"><a href="#六条管理措施" class="headerlink" title="六条管理措施"></a>六条管理措施</h1><p>作为一个优秀的管理者，首先必须要有效管理好自己。对于长远的自我管理，我有六条管理措施可以分享给大家。</p><h2 id="1-设定长远目标"><a href="#1-设定长远目标" class="headerlink" title="1.设定长远目标"></a>1.设定长远目标</h2><p>比如，除经营新东方之外，我还设立了三个长远目标：一是创办一所“两三千人、永远不扩招”的私立大学；二是设立一所文化研究院；三是在全世界进行深度旅行，写出深度游记。</p><h2 id="2-确立阶段性目标"><a href="#2-确立阶段性目标" class="headerlink" title="2.确立阶段性目标"></a>2.确立阶段性目标</h2><p>一个人要想获得成就感，应该设立阶段性目标。比如今天要把这篇课文背出来，到睡觉之前背下来了，就是阶段性的小成功和小成就。把这些小成功加起来，最后可能就是一个大成功。</p><h2 id="3-以“看见最后成果”来自我激励"><a href="#3-以“看见最后成果”来自我激励" class="headerlink" title="3.以“看见最后成果”来自我激励"></a>3.以“看见最后成果”来自我激励</h2><p>特别是身在企业高处的管理者，他们由谁来激励？答案是通过“看见最后成果”来激励自己。新东方作为一个培训机构，最后成果就是对学员的改变。我在新东方工作有非常大的动力，就是因为我认为自己做了一件好事，这个则要通过经常给学生们做讲座来强化，要是半年一年没接触学生，激励机制就会减弱。</p><h2 id="4-每周总结，给自己打星"><a href="#4-每周总结，给自己打星" class="headerlink" title="4.每周总结，给自己打星"></a>4.每周总结，给自己打星</h2><p>我会每周写一次日记，回顾七天的经历，并根据收获大小给自己打星。以下情况会得到比较多的星：在家里读了一本书，没有受到其他任何事情的干扰；写了一两篇我认为比较出色的文章；跟别人聊天，学到了很多东西。</p><h2 id="5-保持学习心态"><a href="#5-保持学习心态" class="headerlink" title="5.保持学习心态"></a>5.保持学习心态</h2><p>我不把跟新东方相关的工作列入打星的范围，因为这些工作做得再好，也只是能力的重复，而不是提高。不过有一个例外，就是我在哈佛商学院参与讨论新东方案例，这也被我算在打星的范围之内。因为我从他们的行为方式、表达方式和教授的讲解方式中学到了很多东西，这个对我来说是全新的，尽管那一天我连觉都没睡好，但是我依然要给它打五星。</p><h2 id="6-经常放松自己"><a href="#6-经常放松自己" class="headerlink" title="6.经常放松自己"></a>6.经常放松自己</h2><p>我有的时候会突然跑出去爬山、看云。有时候晚上月亮升起，我会跑到院子里，坐在月亮底下，什么都不干，就静静地看着月亮。没错，这都是我放松自己的方式。</p>]]></content>
      
      
      <categories>
          
          <category> 励志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 励志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不吃苦，你要青春干嘛</title>
      <link href="/posts/b533.html"/>
      <url>/posts/b533.html</url>
      
        <content type="html"><![CDATA[<p>”当你不去旅行，不去冒险，不去拼一份奖学金，不过没试过的生活，整天挂着QQ，刷着微博，逛着淘宝，玩着网游，干着我80岁都能做的事，你要青春干嘛?”你是否也曾被这句网传的流行语唤醒了心底那一丝早已沉寂的上进心?锦瑟流年，花开花落，岁月蹉跎匆匆过，而恰如同学少年，在最能学习的时候你选择恋爱，在最能吃苦的时候你选择安逸，自是年少，却韶华倾负，再无少年之时。错过了人生最为难得的吃苦经历，对生活的理解和感悟就会浅薄。</p><p>   什么叫吃苦?当你抱怨自己已经很辛苦的时候，请看看那些透支着体力却依旧食不果腹的劳动者，在办公室里整整资料能算吃苦?在有空调的写字楼里敲敲键盘算是吃苦?认真地看看书，学学习，算吃苦?如果你为人生画出了一条很浅的吃苦底线，就请不要妄图跨越深邃的幸福极限。</p><p>   当你看了《杜拉拉升职记》，你觉得外企真好，可以出入高档写字楼，说着让人听不懂的英语，拿着让人眼红的薪水;当你看了《亲密敌人》，你觉得投行男好帅，开着凯迪拉克，漫步澳大利亚的海滩，随手签着几百万的合同;当你看到一条精妙的广告赞不绝口，你觉得做营销好潮，可以把握市场脉搏，纵情挥洒自己的创意;当你看到一位做房地产的朋友，每天和有钱人出入各种高档场所，发着各种挥霍的微博，你觉得做房地产好赚钱;当你看到一位快消人员满世界出差，在各种地方住五星级酒店，你觉得做快消好风光。你疯狂地爱上了那种洋洋得意的状态，却不曾想到你日思夜想称之为梦想的状态，其实并不等于你看到的那样简单。</p><p>   他所吃的苦，是早就开始每天只睡3个小时，从N年前的数据查到昨天，一点点地做着细致无比的分析;他所吃的苦，是为了去争取一个客户，挤在一辆卧铺大巴车上，冒着被偷被抢被撞车的风险，一边敲邮件，一边环顾周围诧异的眼神;他所吃的苦，是为了一套更合理更系统的管理方法，而不断地和各个领导去磨合，去询问，去思考;他所吃的苦，是为了签下一个大订单，自己一个人在他乡，看着别人世界中的团圆，装饰着自己的相思梦;他所吃的苦，是为了一个上市项目，在3天之内自学几十万字的材料，让自己在3天之内从一个门外汉变成一个行家。他也曾许多次摔倒在泥土里，甚至让别人从自己的身体上踩过去。</p><p>​    他成功地取得了让人望尘莫及的荣耀，只因为他是一个懂得吃苦的人，能够承担得起那种厚重的魅力。他辛勤工作的身影，他随时洋溢的才华，他的一切禁得起岁月的推敲。</p><p>   亲爱的朋友，如果老天善待你，给了你优越的生活，请不要收敛了自己的斗志;如果老天对你百般设障，更请不要磨灭了对自己的信心和向前奋斗的勇气。当你想要放弃了，一定要想想那些睡得比你晚、起得比你早、跑得比你卖力、天赋还比你高的牛人，他们早已在晨光中跑向那个你永远只能眺望的远方。</p><p>   在你经历过风吹雨打之后，也许会伤痕累累，但是当雨后的第一缕阳光投射到你那苍白、憔悴的脸庞时，你应该欣喜若狂，并不是因为阳光的温暖，而是在苦了心志，劳了筋骨，饿了体肤之后，你毅然站立在前进的路上，做着坚韧上进的自己。其实你现在在哪里，并不是那么重要。只要你有一颗永远向上的心，你终究会找到那个属于你自己的方向。</p><p>   所以，请不要在最能吃苦的时候选择安逸，没有人的青春是在红地毯上走过，既然梦想成为那个别人无法企及的自我，就应该选择一条属于自己的道路，为了到达终点，付出别人无法企及的努力。</p>]]></content>
      
      
      <categories>
          
          <category> 励志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 励志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拖延处理技巧</title>
      <link href="/posts/6558.html"/>
      <url>/posts/6558.html</url>
      
        <content type="html"><![CDATA[<h1 id="拖延处理技巧"><a href="#拖延处理技巧" class="headerlink" title="拖延处理技巧"></a>拖延处理技巧</h1><h4 id="1-确立一个可操作的目标（可观察、具体而实在的），而不是那种模糊而抽象的目标。"><a href="#1-确立一个可操作的目标（可观察、具体而实在的），而不是那种模糊而抽象的目标。" class="headerlink" title="1.确立一个可操作的目标（可观察、具体而实在的），而不是那种模糊而抽象的目标。"></a>1.确立一个可操作的目标（可观察、具体而实在的），而不是那种模糊而抽象的目标。</h4><ul><li>不是：“我要停止拖延。”</li><li>而是：“我要在九月一日之前打扫和整理我的车库。”</li></ul><h4 id="2-设定一个务实的目标。不要异想天开，而要从小事做起。不要过于理想化，而要选择一个能接受的程度最低的目标。"><a href="#2-设定一个务实的目标。不要异想天开，而要从小事做起。不要过于理想化，而要选择一个能接受的程度最低的目标。" class="headerlink" title="2.设定一个务实的目标。不要异想天开，而要从小事做起。不要过于理想化，而要选择一个能接受的程度最低的目标。"></a>2.设定一个务实的目标。不要异想天开，而要从小事做起。不要过于理想化，而要选择一个能接受的程度最低的目标。</h4><ul><li>不是：“我绝不再拖延！”</li><li>而是：“我会每天花一个小时时间学习数学。”</li></ul><h4 id="3-将你的目标分解成短小具体的迷你目标。每一个迷你目标都要比大目标容易达成，小目标可以累积成大目标。"><a href="#3-将你的目标分解成短小具体的迷你目标。每一个迷你目标都要比大目标容易达成，小目标可以累积成大目标。" class="headerlink" title="3.将你的目标分解成短小具体的迷你目标。每一个迷你目标都要比大目标容易达成，小目标可以累积成大目标。"></a>3.将你的目标分解成短小具体的迷你目标。每一个迷你目标都要比大目标容易达成，小目标可以累积成大目标。</h4><ul><li>不是：“我打算要写那份报告。”</li><li>而是：“今晚我将花半个小时设计表格。明天我将花另外半个小时把数据填进去，再接下来一天，我将根据那些数据花一个小时将报告写出来。”</li></ul><h4 id="4-现实地（而不是按照自己的愿望）对待时间。问自己：这个任务事实上将花去我多少时间？我真正能抽出多少时间投入其中？"><a href="#4-现实地（而不是按照自己的愿望）对待时间。问自己：这个任务事实上将花去我多少时间？我真正能抽出多少时间投入其中？" class="headerlink" title="4.现实地（而不是按照自己的愿望）对待时间。问自己：这个任务事实上将花去我多少时间？我真正能抽出多少时间投入其中？"></a>4.现实地（而不是按照自己的愿望）对待时间。问自己：这个任务事实上将花去我多少时间？我真正能抽出多少时间投入其中？</h4><ul><li>不是：“明天我有充足的时间去做这件事。”</li><li>而是：“我最好看一下我的日程表，看看我什么时候可以开始做。上次那件事所花的时间超出了我的预期。”</li></ul><h4 id="5-只管开始做！不要想一下子做完整件事情，每次只要迈出一小步。记住：“千里之行始于足下。”"><a href="#5-只管开始做！不要想一下子做完整件事情，每次只要迈出一小步。记住：“千里之行始于足下。”" class="headerlink" title="5.只管开始做！不要想一下子做完整件事情，每次只要迈出一小步。记住：“千里之行始于足下。”"></a>5.只管开始做！不要想一下子做完整件事情，每次只要迈出一小步。记住：“千里之行始于足下。”</h4><ul><li>不是：“我一坐下来就要把事情做完。”</li><li>而是：“我可以采取的第一个行动是什么？”</li></ul><h4 id="6-利用接下来的15分钟。任何事情你都可以忍受15分钟。你只能通过一次又一次的15分钟才能完成一件事情。因此，你在15分钟时间内所做的事情是相当有意义的。"><a href="#6-利用接下来的15分钟。任何事情你都可以忍受15分钟。你只能通过一次又一次的15分钟才能完成一件事情。因此，你在15分钟时间内所做的事情是相当有意义的。" class="headerlink" title="6.利用接下来的15分钟。任何事情你都可以忍受15分钟。你只能通过一次又一次的15分钟才能完成一件事情。因此，你在15分钟时间内所做的事情是相当有意义的。"></a>6.利用接下来的15分钟。任何事情你都可以忍受15分钟。你只能通过一次又一次的15分钟才能完成一件事情。因此，你在15分钟时间内所做的事情是相当有意义的。</h4><ul><li>不是：“我只有15分钟时间了，何必费力去做呢？”</li><li>而是：“在接下来的15分钟时间内，这件事的哪个部分我可以上手去做呢？”</li></ul><h4 id="7-为困难和挫折做好心理准备。当你遭遇到第一个（或者第二、第三个）困难时，不要放弃。困难只不过是一个需要你去解决的问题，它不是你个人价值或能力的反映。"><a href="#7-为困难和挫折做好心理准备。当你遭遇到第一个（或者第二、第三个）困难时，不要放弃。困难只不过是一个需要你去解决的问题，它不是你个人价值或能力的反映。" class="headerlink" title="7.为困难和挫折做好心理准备。当你遭遇到第一个（或者第二、第三个）困难时，不要放弃。困难只不过是一个需要你去解决的问题，它不是你个人价值或能力的反映。"></a>7.为困难和挫折做好心理准备。当你遭遇到第一个（或者第二、第三个）困难时，不要放弃。困难只不过是一个需要你去解决的问题，它不是你个人价值或能力的反映。</h4><ul><li>不是：“教授不在办公室，所以我没办法写论文了。我想去看场电影。”</li><li>而是：“虽然教授不在，但是我可以在他回来之前先列出论文提纲。”</li></ul><h4 id="8-可能的话，将任务分派出去（甚至扔掉不管！）。你真的是能够做这件事的唯一人选吗？这件事情真的有必要去做吗？记住：没有人可以什么事情都做——你也是。"><a href="#8-可能的话，将任务分派出去（甚至扔掉不管！）。你真的是能够做这件事的唯一人选吗？这件事情真的有必要去做吗？记住：没有人可以什么事情都做——你也是。" class="headerlink" title="8.可能的话，将任务分派出去（甚至扔掉不管！）。你真的是能够做这件事的唯一人选吗？这件事情真的有必要去做吗？记住：没有人可以什么事情都做——你也是。"></a>8.可能的话，将任务分派出去（甚至扔掉不管！）。你真的是能够做这件事的唯一人选吗？这件事情真的有必要去做吗？记住：没有人可以什么事情都做——你也是。</h4><ul><li>不是：“我是唯一一个可以做好这件事的人。”</li><li>而是：“我会给这件事找个合适的人来做，这样我就可以去做更重要的事了。”</li></ul><h4 id="9-保护你的时间。学会怎样说不，不要去做额外的或者不必要的事情。为了从事重要的事务，你可以决定对“急迫”的事情置之不理。"><a href="#9-保护你的时间。学会怎样说不，不要去做额外的或者不必要的事情。为了从事重要的事务，你可以决定对“急迫”的事情置之不理。" class="headerlink" title="9.保护你的时间。学会怎样说不，不要去做额外的或者不必要的事情。为了从事重要的事务，你可以决定对“急迫”的事情置之不理。"></a>9.保护你的时间。学会怎样说不，不要去做额外的或者不必要的事情。为了从事重要的事务，你可以决定对“急迫”的事情置之不理。</h4><ul><li>不是：“我必须对任何需要我的人有求必应。”</li><li>而是：“在工作的时候，我没必要接听电话。我会收看留言，然后在我做完事情后再回电。”</li></ul><h4 id="10-留意你的借口。不要习惯性地利用借口来拖延，而要将它看做是再做15分钟的一个信号。或者利用你的借口作为完成一个步骤之后的奖赏。"><a href="#10-留意你的借口。不要习惯性地利用借口来拖延，而要将它看做是再做15分钟的一个信号。或者利用你的借口作为完成一个步骤之后的奖赏。" class="headerlink" title="10.留意你的借口。不要习惯性地利用借口来拖延，而要将它看做是再做15分钟的一个信号。或者利用你的借口作为完成一个步骤之后的奖赏。"></a>10.留意你的借口。不要习惯性地利用借口来拖延，而要将它看做是再做15分钟的一个信号。或者利用你的借口作为完成一个步骤之后的奖赏。</h4><ul><li>不是：“我累了（抑郁/饿了/很忙/很烦，等等），我以后再做。”</li><li>而是：“我累了，所以我将只花15分钟写报告，接下来我会小睡片刻。”</li></ul><h4 id="11-奖赏你一路上的进步。将奖赏聚焦于你的努力，而不是结果。小心非此即彼的思维方式：你可以说杯子是半空的，也可以说它是半满的。记住：即便是迈出一小步也是进步。"><a href="#11-奖赏你一路上的进步。将奖赏聚焦于你的努力，而不是结果。小心非此即彼的思维方式：你可以说杯子是半空的，也可以说它是半满的。记住：即便是迈出一小步也是进步。" class="headerlink" title="11.奖赏你一路上的进步。将奖赏聚焦于你的努力，而不是结果。小心非此即彼的思维方式：你可以说杯子是半空的，也可以说它是半满的。记住：即便是迈出一小步也是进步。"></a>11.奖赏你一路上的进步。将奖赏聚焦于你的努力，而不是结果。小心非此即彼的思维方式：你可以说杯子是半空的，也可以说它是半满的。记住：即便是迈出一小步也是进步。</h4><ul><li>不是：“除非我全部完成，否则我就会感觉哪里不对。”</li><li>而是：“我已经走出了几步，而且我做事非常努力，这感觉很好。现在我打算去看一部电影。”</li></ul><h4 id="12-将拖延看成是一个信号。停下来问自己：“拖延传递给我的是什么信息？”"><a href="#12-将拖延看成是一个信号。停下来问自己：“拖延传递给我的是什么信息？”" class="headerlink" title="12.将拖延看成是一个信号。停下来问自己：“拖延传递给我的是什么信息？”"></a>12.将拖延看成是一个信号。停下来问自己：“拖延传递给我的是什么信息？”</h4><ul><li>不是：“我又在拖延，我恨我自己。”</li><li>而是：“我又在拖延，我的感受是怎样的？它意味着什么？我可以从中学到什么？”</li></ul><p>记住：你能够做出自己的选择。你可以拖延，你也可以行动。即便在你心里不舒服的时候，你还是可以行动。以往的历史无法决定你当下要怎样做。你可以从学习、成长和挑战自己中获得快乐。你不必等到完美之后才觉得自己具有价值。</p>]]></content>
      
      
      <categories>
          
          <category> 心理学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王爽汇编原理</title>
      <link href="/posts/ac56.html"/>
      <url>/posts/ac56.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h1><h3 id="1、指令"><a href="#1、指令" class="headerlink" title="1、指令"></a>1、指令</h3><p>机器指令：CPU能直接识别并执行的二进制编码</p><p>汇编指令：汇编指令是机器指令的助记符，同机器指令一一对应。</p><p>指令：指令通常由操作码和地址码（操作数）两部分组成</p><p>指令集：每种CPU都有自己的汇编指令集。</p><p>汇编语言由3类指令组成。</p><ul><li><p>汇编指令</p></li><li><p>伪指令：没有对应的机器码，由编译器执行，计算机并不执行</p></li><li><p>其他符号：如+、-、*、/等，由编译器识别，没有对应的机器码。</p></li></ul><p>编译器：够将汇编指令转换成机器指令的翻译程序每一种CPU都有自己的汇编指令集。</p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDcxLnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>在内存或磁盘上，指令和数据没有任何区别，都是二进制信息</p><h3 id="2、存储器"><a href="#2、存储器" class="headerlink" title="2、存储器"></a>2、存储器</h3><p>随机存储器（RAM）在程序的执行过程中可读可写，必须带电存储</p><p>只读存储器（ROM）在程序的执行过程中只读，关机数据不丢失</p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDcyLnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDczLnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDc0LnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>（以上3张图片来自王道考研 - 计算机组成原理课件）</p><h3 id="3、总线"><a href="#3、总线" class="headerlink" title="3、总线"></a>3、总线</h3><p>1、总线</p><p>总线是连接各个部件的信息传输线，是各个部件共享的传输介质。</p><p>主板上有核心器件和一些主要器件，这些器件通过总线（地址总线、数据总线、控制总线）相连。这些器件有CPU、存储器、外围芯片组、扩展插槽等。扩展插槽上一般插有RAM内存条和各类接口卡。</p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDg1LnBuZw?x-oss-process=image/format,png" alt="来自唐朔飞·计算机组成原理经典课件"></p><p>总线根据位置分类：</p><ul><li><p>片内总线（芯片内部总线）</p></li><li><p>系统总线（计算机各部件之间的信息传输线）</p><p>根据传送信息的不同，系统总线从逻辑上又分为3类，地址总线、控制总线和数据总线。</p></li></ul><p>CPU要想进行数据的读写，必须和外部器件（标准的说法是芯片）进行以下3类信息的交互。</p><ol><li>地址总线：CPU通过地址总线来指定存储单元<br><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDg2LnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>1根导线可以传送的稳定状态只有两种，高电平或是低电平。用二进制表示就是1或0</li></ol><p>图示有10根地址线即一次可以传输10位，访问存储单元地址为1011，寻址范围为0 ~ (210 - 1)</p><ol><li>数据总线：CPU与内存或其他器件之间的数据传送是通过数据总线来进行的<br><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDg3LnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>8根数据线一次可传送一个8位二进制数据（即一个字节），传送2个字节需要两次；16根数据线一次可传送2个字节（内存对齐核心原理）</li><li>控制总线：CPU对外部器件的控制是通过控制总线来进行的。</li></ol><p>有多少根控制总线，就意味着CPU提供了对外部器件的多少种控制。<br>所以，控制总线的宽度决定了CPU对外部器件的控制能力。</p><h3 id="2、CPU对存储器的读写"><a href="#2、CPU对存储器的读写" class="headerlink" title="2、CPU对存储器的读写"></a>2、CPU对存储器的读写</h3><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDg4LnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>1、 CPU通过地址线将地址信息3发出。<br>2、 CPU通过控制线发出内存读命令，选中存储器芯片，并通知它，将要从中读取数据。<br>3、 存储器将3号单元中的数据8通过数据线送入CPU。写操作与读操作的步骤相似。<br>联想：在组成原理中用微操作表示：(PC) → MAR; 1 → R; M(MAR) → MDR; …</p><h3 id="3、CPU对外设的控制"><a href="#3、CPU对外设的控制" class="headerlink" title="3、CPU对外设的控制"></a>3、CPU对外设的控制</h3><p><strong>CPU对外设都不能直接控制，如显示器、音箱、打印机等。</strong></p><p><strong>直接控制这些设备进行工作的是插在扩展插槽上的接口卡。</strong></p><p>扩展插槽通过总线和CPU相连，所以接口卡也通过总线同CPU相连。CPU可以直接控制这些接口卡，从而实现CPU对外设的间接控制。</p><p>如：<strong>CPU无法直接控制显示器，但CPU可以直接控制显卡，从而实现对显示器的间接控制</strong></p><h3 id="4、内存地址空间"><a href="#4、内存地址空间" class="headerlink" title="4、内存地址空间"></a>4、内存地址空间</h3><p>CPU将系统中各类存储器看作一个逻辑存储器，这个逻辑存储器就是我们所说的内存地址空间。<br>对于CPU，所有存储器中的存储单元都处于一个统一的逻辑存储器中，它的容量受CPU寻址能力限制。(或许就是计组中学的统一编址吧)<br><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDg5LnBuZw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>每个物理存储器在这个逻辑存储器中占有一个地址段，即一段地址空间。CPU在这段地址空间中读写数据，实际上就是在相对应的物理存储器中读写数据（对ROM写无效）。<br><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDgxMC5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><h2 id="二、寄存器"><a href="#二、寄存器" class="headerlink" title="二、寄存器"></a>二、寄存器</h2><h3 id="1、寄存器"><a href="#1、寄存器" class="headerlink" title="1、寄存器"></a>1、寄存器</h3><p><strong>CPU由运算器、控制器、寄存器等器件构成，这些器件靠片内总线相连。</strong></p><p><strong>运算器进行信息处理；控制器控制各种器件进行工作；寄存器进行信息存储；</strong></p><p>8086CPU有14个寄存器：AX、BX、CX、DX、SI、DI、SP、BP、IP、CS、SS、DS、ES、PSW都是16位</p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDgxMS5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>16位结构CPU具有下面几方面的结构特性。</p><ul><li>运算器一次最多可以处理16位的数据；</li><li>寄存器的最大宽度为16位；</li><li>寄存器和运算器之间的通路为16位。</li></ul><p>8086CPU可以一次性处理以下两种尺寸的数据。</p><ul><li>字节：记为byte，一个字节由8个bit组成，可以存在8位寄存器中。</li><li>字：记为word，一个字由两个字节组成，可以存在一个16位寄存器中(16位CPU)<br><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDgxMi5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>8086采用小端模式：高地址存放高位字节，低地址存放低位字节。</li></ul><h3 id="2、通用寄存器"><a href="#2、通用寄存器" class="headerlink" title="2、通用寄存器"></a>2、通用寄存器</h3><p><strong>通用寄存器</strong>：通常用来存放<strong>一般性的数据</strong>，有AX、BX、CX、DX，它们可分为两个可独立使用的8位寄存器，</p><table><thead><tr><th align="left">16位</th><th align="left">8高位</th><th align="left">8低位</th></tr></thead><tbody><tr><td align="left">AX</td><td align="left">AH</td><td align="left">AL</td></tr><tr><td align="left">BX</td><td align="left">BH</td><td align="left">BL</td></tr><tr><td align="left">CX</td><td align="left">CH</td><td align="left">CL</td></tr><tr><td align="left">DX</td><td align="left">DH</td><td align="left">DL</td></tr></tbody></table><p>在进行数据传送或运算时，要注意指令的两个操作对象的位数应当是一致的</p><p>一个8位寄存器所能存储的数据范围是0 ~ 28-1。</p><h3 id="3、8086CPU给出物理地址的方法"><a href="#3、8086CPU给出物理地址的方法" class="headerlink" title="3、8086CPU给出物理地址的方法"></a>3、8086CPU给出物理地址的方法</h3><p>8086CPU有20位地址总线，可以传送20位地址，达到1MB寻址能力。<br>8086CPU又是16位结构，在内部一次性处理、传输、暂时存储的地址为16位。<br>从8086CPU的内部结构来看，如果将地址从内部简单地发出，那么它只能送出16位的地址，表现出的寻址能力只有64KB。<br>8086CPU采用一种在内部用两个16位地址合成的方法来形成一个20位的物理地址。<br><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDgxMy5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>当8086CPU要读写内存时：</p><ol><li>CPU中的相关部件提供两个16位的地址，一个称为段地址，另一个称为偏移地址；</li><li>地址加法器将两个16位地址合成为一个20位的物理地址；</li></ol><p>地址加法器采用物理地址 = 段地址×16 + 偏移地址的方法用段地址和偏移地址合成物理地址。</p><p>例如，8086CPU要访问地址为<code>123C8H</code>的内存单元，<code>1230H</code>左移一位(空出4位)加上<code>00C8H</code>合成<code>123C8H</code></p><h3 id="4、段寄存器"><a href="#4、段寄存器" class="headerlink" title="4、段寄存器"></a>4、段寄存器</h3><p>我们可以将一段内存定义为一个段，用一个段地址指示段，用偏移地址访问段内的单元，可以用分段的方式来管理内存。</p><p><u>用一个段<strong>存放数据</strong>，将它定义为“<strong>数据段</strong>”；</u></p><p><u>用一个段<strong>存放代码</strong>，将它定义为“<strong>代码段</strong>”；</u></p><p><u>用一个段<strong>当作栈</strong>，将它定义为“<strong>栈段</strong>”。</u></p><p>注意：</p><ul><li>一个段的起始地址一定是16的倍数；</li><li>偏移地址为16位，变化范围为0-FFFFH，所以一个段的长度最大为64KB。</li><li><u>CPU可以用不同的段地址和偏移地址形成同一个物理地址。</u></li></ul><p>段寄存器：<strong>8086CPU有4个段寄存器：<code>CS、DS、SS、ES</code>，提供内存单元的段地址。</strong></p><h3 id="1、CS和IP"><a href="#1、CS和IP" class="headerlink" title="1、CS和IP"></a>1、CS和IP</h3><p><strong>CS</strong>为<strong>代码段寄存器</strong>，IP为<strong>指令指针寄存器</strong>，</p><p>CPU将CS、IP中的内容当作指令的段地址和偏移地址,用它们合成指令的物理地址,</p><p>CPU将CS:IP指向的内容当作指令执行。(即PC)<br><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDkxNC5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>8086CPU的工作过程简要描述</p><ol><li>从CS:IP指向的内存单元读取指令，读取的指令进入指令缓冲器；</li><li>IP=IP+所读取指令的长度，从而指向下一条指令；</li><li>执行指令。转到步骤1，重复这个过程。</li></ol><p>在8086CPU加电启动或复位后（即CPU刚开始工作时）CS和IP被设置为CS=FFFFH，IP=0000H，即在8086PC机刚启动时，FFFF0H单元中的指令是8086PC机开机后执行的第一条指令。</p><p>8086CPU提供转移指令修改CS、IP的内容。</p><ul><li>jmp 段地址:偏移地址：用指令中给出的段地址修改CS，偏移地址修改IP。如：<code>jmp 2AE3:3</code></li><li>jmp 某一合法寄存器：仅修改IP的内容。如：<code>jmp ax</code>。在含义上好似：<code>mov IP，ax</code></li></ul><p>8086CPU不支持将数据直接送入段寄存器的操作，这属于8086CPU硬件设计</p><h3 id="2、DS-和-address"><a href="#2、DS-和-address" class="headerlink" title="2、DS 和 [address]"></a>2、DS 和 [address]</h3><p>DS寄存器：通常用来存放要访问数据的段地址</p><p><strong>[address]表示一个偏移地址为address的内存单元，段地址默认放在ds中</strong></p><p>通过数据段段地址和偏移地址即可定位内存单元。</p><blockquote><p>mov bx, 1000H ;<strong>8086CPU不支持将数据直接送入段寄存器的操作</strong></p><p>mov ds, bx ;ds存放数据段地址</p><p>mov [0], al ;将al数据（1字节）存到1000H段的0偏移地址处，即10000H</p><p>mov ax, [2] ;将数据段偏移地址2处的一个字（8086为2字节）存放到ax寄存器</p><p>add cx, [4] ;将偏移地址4处的一个字数据加上cx寄存器数据放到cx寄存器</p><p>sub dx, [6] ;dx寄存器数据减去数据段偏移地址6处的字数据存到dx</p></blockquote><h3 id="3、SS-和-SP"><a href="#3、SS-和-SP" class="headerlink" title="3、SS 和 SP"></a>3、SS 和 SP</h3><p>在基于8086CPU编程的时候，可以将一段内存当作栈来使用。</p><p>栈段寄存器SS，存放段地址，SP寄存器存放偏移地址，任意时刻，SS:SP指向栈顶元素</p><p>8086CPU中，入栈时，栈顶从高地址向低地址方向增长。</p><p>push ax表示将寄存器ax中的数据送入栈中，由两步完成。</p><p>1、SP=SP-2，SS:SP指向当前栈顶前面的单元，以当前栈顶前面的单元为新的栈顶；<br>2、将ax中的内容送入SS:SP指向的内存单元处，SS:SP此时指向新栈顶。</p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDkxNS5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"> </p><p><code>pop ax</code>表示从栈顶取出数据送入ax，由以下两步完成。</p><blockquote><ol><li>将SS:SP指向的内存单元处的数据送入ax中；</li><li>SP=SP+2，SS:SP指向当前栈顶下面的单元，以当前栈顶下面的单元为新的栈顶。</li></ol></blockquote><p>实验</p><ol><li>将10000H~1000FH这段空间当作栈，初始状态栈是空的；</li><li>设置AX=001AH，BX=001BH；</li><li>将AX、BX中的数据入栈；</li><li>然后将AX、BX清零；</li><li>从栈中恢复AX、BX原来的内容。</li></ol><pre><code>mov ax, 1000H mov ss, ax mov sp, 0010H ;初始化栈顶mov ax, 001AHmov bx, 001BH push ax push bx ;ax、bx入栈sub ax, ax ;将ax清零，也可以用mov ax，0；sub ax，ax的机器码为2个字节;mov ax，0的机器码为3个字节。` sub bx, bx ;pop bx ;从栈中恢复ax、bx原来的数据pop ax ;</code></pre><h2 id="三、第一个程序"><a href="#三、第一个程序" class="headerlink" title="三、第一个程序"></a>三、第一个程序</h2><h3 id="1、汇编程序从写出到执行的过程"><a href="#1、汇编程序从写出到执行的过程" class="headerlink" title="1、汇编程序从写出到执行的过程"></a>1、汇编程序从写出到执行的过程</h3><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDkxNi5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>加载后，CPU的CS:IP指向程序的第一条指令（即程序的入口）</p><pre><code>;1.asmassume cs:codesg ;将用作代码段的段codesg和段寄存器cs联系起来。codesg segment ;定义一个段，段的名称为“codesg”，这个段从此开始            ;codesg是一个标号，作为一个段的名称，最终被编译连接成一个段的段地址    mov ax, 0123H    mov bx, 0456H     add ax, bx    add ax, ax     mov ax, 4c00H     int  21H ;这两条指令实现程序的返回codesg ends ;名称为“codesg”的段到此结束end ;编译器在编译汇编程序的过程中，碰到了伪指令end，结束对源程序的编译</code></pre><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDkxNy5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"><br><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDkxOC5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><h3 id="2、程序执行过程跟踪"><a href="#2、程序执行过程跟踪" class="headerlink" title="2、程序执行过程跟踪"></a>2、程序执行过程跟踪</h3><p>DOS系统中.EXE文件中的程序的加载过程</p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDkxOS5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDkyMC5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><h2 id="四、-bx-和-loop指令"><a href="#四、-bx-和-loop指令" class="headerlink" title="四、[bx] 和 loop指令"></a>四、[bx] 和 loop指令</h2><h3 id="1、-bx-和-loop指令"><a href="#1、-bx-和-loop指令" class="headerlink" title="1、[bx] 和 loop指令"></a>1、[bx] 和 loop指令</h3><p>[bx] 的含义：[bx]同样表示一个内存单元，它的偏移地址在bx中，段地址默认在ds中</p><p>loop指令的格式是：loop 标号，CPU执行loop指令的时候，要进行两步操作，</p><blockquote><ol><li>(cx) = (cx) - 1；</li><li>判断 cx 中的值，不为零则转至标号处执行程序，如果为零则向下执行。</li></ol></blockquote><p>例如：计算212</p><pre><code>assume cs:codecode segment    mov ax, 2    mov cx, 11 ;循环次数s: add ax, ax     loop s ;在汇编语言中，标号代表一个地址，标号s实际上标识了一个地址，    ;这个地址处有一条指令：add ax，ax。    ;执行loop s时，首先要将（cx）减1，然后若（cx）不为0，则向前    ;转至s处执行add ax，ax。所以，可以利用cx来控制add ax，ax的执行次数。    mov ax,4c00h     int 21h code ends end</code></pre><h3 id="loop-和-bx-的联合应用"><a href="#loop-和-bx-的联合应用" class="headerlink" title="loop 和 [bx] 的联合应用"></a>loop 和 [bx] 的联合应用</h3><p>计算ffff:0 ~ ffff:b单元中的数据的和，结果存储在dx中</p><p>问题分析：</p><p>这些内存单元都是字节型数据范围0 ~ 255 ，12个字节数据和不会超过65535，dx可以存下<br>对于8位数据不能直接加到 dx</p><p><strong>解决方案：</strong></p><p>用一个16位寄存器来做中介。将内存单元中的8位数据赋值到一个16位寄存器a中，再将ax中的数据加到dx</p><pre><code>assume cs:code code segment     mov ax, 0ffffh ;在汇编源程序中，数据不能以字母开头，所以要在前面加0。    mov ds, ax     mov bx, 0 ;初始化ds:bx指向ffff:0    mov dx, 0 ;初始化累加寄存器dx，（dx）= 0    mov cx, 12 ;初始化循环计数寄存器cx，（cx）= 12s: mov al, [bx]    mov ah, 0    add dx, ax ;间接向dx中加上（（ds）* 16 +（bx））单元的数值`    inc bx ;ds:bx指向下一个单元    loop s     mov ax, 4c00h    int  21h code ends end</code></pre><h3 id="2、段前缀"><a href="#2、段前缀" class="headerlink" title="2、段前缀"></a>2、段前缀</h3><blockquote><p>mov ax, ds:[bx]<br>mov ax, cs:[bx]<br>mov ax, ss:[bx]<br>mov ax, es:[bx]<br>mov ax, ss:[0]<br>mov ax, cs:[0]</p></blockquote><p>这些出现在访问内存单元的指令中，用于显式地指明内存单元的段地址<br>的“ds:”，“cs:”，“ss:”，“es:”，在汇编语言中称为段前缀。</p><p>段前缀的使用</p><p>将内存<code>ffff:0 ~ ffff:b</code>单元中的数据复制到<code>0:200 ~ 0:20b</code>单元中。</p><pre><code>assume cs:code code segment     mov ax, 0ffffh     mov ds, ax ;（ds）= 0ffffh     mov ax, 0020h mov es, ax ;（es）= 0020h 0:200 等效于 0020:0 mov bx, 0 ;（bx）= 0，此时ds:bx指向ffff:0，es:bx指向0020:0    mov cx，12 ;（cx）=12，循环12次s: mov dl，[bx] ;（d1）=（（ds）* 16+（bx）），将ffff:bx中的字节数据送入dl     mov es:[bx]，dl ;（（es）*16+（bx））=（d1），将dl中的数据送入0020:bx     inc bx ;（bx）=（bx）+1    loop s     mov ax，4c00h     int 21h code ends end</code></pre><h2 id="五、包含多个段的程序"><a href="#五、包含多个段的程序" class="headerlink" title="五、包含多个段的程序"></a>五、包含多个段的程序</h2><p>程序中对段名的引用，将被编译器处理为一个表示段地址的数值。</p><blockquote><p>mov ax, data</p><p>mov ds, ax</p><p>mov bx, ds:[6]</p></blockquote><p>在代码段中使用数据</p><pre><code>;计算 8 个数据的和存到 ax 寄存器assume cs:code code segment     dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h ;define word 定义8个字形数据    start:    mov bx, 0 ;标号start            mov ax, 0             mov cx, 8    s:        add ax, cs:[bx]            add bx, 2            loop s             mov ax, 4c00h             int 21h code endsend start ;end除了通知编译器程序结束外，还可以通知编译器程序的入口在什么地方          ;用end指令指明了程序的入口在标号start处，也就是说，“mov bx，0”是程序的第一条指令。</code></pre><p>在代码段中使用栈</p><pre><code>;利用栈，将程序中定义的数据逆序存放。assume cs:codesg codesg segment     dw 0123h，0456h，0789h，0abch，0defh，0fedh，0cbah，0987h ; 0-15单元    dw 0，0，0，0，0，0，0，0，0，0，0，0，0，0，0，0 ; 16-47单元作为栈使用    start:    mov ax, cs             mov ss, ax             mov sp, 30h ;将设置栈顶ss:sp指向栈底cs:30。 30h = 48d            mov bx, 0            mov cx, 8    s:        push cs:[bx]            add bx, 2            loop s ;以上将代码段0~15单元中的8个字型数据依次入栈            mov bx, 0            mov cx, 8    s0:        pop cs:[bx]                    add bx，2            loop s0 ;以上依次出栈8个字型数据到代码段0~15单元中            mov ax，4c00h             int 21h codesg ends end start    ;指明程序的入口在start处</code></pre><p>将数据、代码、栈放入不同的段</p><pre><code>assume cs:code,ds:data,ss:stack data segment     dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h ;0-15单元data ends stack segment     dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;0-31单元stack ends code segment     start:    mov ax, stack;将名称为“stack”的段的段地址送入ax            mov ss, ax            mov sp, 20h ;设置栈顶ss:sp指向stack:20。 20h = 32d            mov ax, data ;将名称为“data”的段的段地址送入ax            mov ds, ax ;ds指向data段            mov bx, 0 ;ds:bx指向data段中的第一个单元            mov cx, 8    s:     push [bx]            add bx, 2            loop s ;以上将data段中的0~15单元中的8个字型数据依次入栈            mov bx, 0            mov cx, 8    s0:        pop [bx]            add bx, 2            loop s0 ;以上依次出栈8个字型数据到data段的0~15单元中            mov ax, 4c00h             int 21h code endsend start;“end start”说明了程序的入口，这个入口将被写入可执行文件的描述信息，;可执行文件中的程序被加载入内存后，CPU的CS:IP被设置指向这个入口，从而开始执行程序中的第一条指令</code></pre><p>关于可执行文件结构与程序入口的详细描述参考：<a href="https://www.jb51.net/article/178797.htm" target="_blank" rel="noopener">PE文件结构</a></p><h2 id="六、更灵活的定位内存地址的方法"><a href="#六、更灵活的定位内存地址的方法" class="headerlink" title="六、更灵活的定位内存地址的方法"></a>六、更灵活的定位内存地址的方法</h2><h3 id="1、and-和-or"><a href="#1、and-和-or" class="headerlink" title="1、and 和 or"></a>1、and 和 or</h3><p>and指令：逻辑与指令，按位进行与运算。</p><blockquote><p>mov al, 01100011B<br>and al, 00111011B</p></blockquote><p>执行后：al=00100011B即都为1才为1</p><p>or指令：逻辑或指令，按位进行或运算。</p><blockquote><p>mov al, 01100011B<br>or al, 00111011B</p></blockquote><p>执行后：al=01111011B 即只要有一个为1就为1</p><p><strong>关于ASCII码</strong></p><p>世界上有很多编码方案，有一种方案叫做ASCII编码，是在计算机系统中通常被采用的。简单地说，所谓编码方案，就是一套规则，它约定了用什么样的信息来表示现实对象。比如说，在ASCII编码方案中，用61H表示“a”，62H表示“b”。一种规则需要人们遵守才有意义。</p><p>在文本编辑过程中，我们按一下键盘的a键，就会在屏幕上看到“a”。我们按下键盘的a键，这个按键的信息被送入计算机，计算机用ASCII码的规则对其进行编码，将其转化为61H存储在内存的指定空间中；文本编辑软件从内存中取出61H，将其送到显卡上的显存中；工作在文本模式下的显卡，用ASCII码的规则解释显存中的内容，<br>61H被当作字符“a”，显卡驱动显示器，将字符“a”的图像画在屏幕上。我们可以看到，显卡在处理文本信息的时候，是按照ASCII码的规则进行的。这也就是说，如果我们要想在显示器上看到“a”，就要给显卡提供“a”的ASCIⅡ码，61H。如何提供？当然是写入显存中。</p><p>以字符形式给出的数据</p><pre><code>assume cs:code,ds:data data segment     db &#39;unIx&#39; ;相当于“db 75H，6EH，49H，58H”    db &#39;foRK&#39;data ends code segmentstart:    mov al, &#39;a&#39; ;相当于“mov al, 61H”，“a”的ASCI码为61H；        mov b1, &#39;b&#39;        mov ax, 4c00h         int 21h code endsend start</code></pre><p>大小写转换的问题</p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDkyMS5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>小写字母的ASCII码值比大写字母的ASCII码值大20H</p><p>大写字母ASCII码的第5位为0，小写字母的第5位为1(其他一致)</p><pre><code>assume cs:codesg,ds:datasg datasg segment     db &#39;BaSiC&#39;    db &#39;iNfOrMaTion&#39;datasg endcodesg segment     start:    mov ax, datasg             mov ds, ax    ;设置ds 指向 datasg段            mov bx, 0    ;设置（bx）=0，ds:bx指向&#39;BaSic&#39;的第一个字母            mov cx, 5      ;设置循环次数5，因为&#39;Basic&#39;有5个字母    s:        mov al, [bx] ;将ASCII码从ds:bx所指向的单元中取出            and al, 11011111B;将al中的ASCII码的第5位置为0，变为大写字母            mov [bx], al     ;将转变后的ASCII码写回原单元            inc bx         ;（bx）加1，ds:bx指向下一个字母            loop s             mov bx, 5    ;设置（bx）=5，ds:bx指向，iNfOrMaTion&#39;的第一个字母            mov cx, 11    ;设置循环次数11，因为‘iNfOrMaTion&#39;有11个字母    s0:        mov al, [bx]            or al, 00100000B;将a1中的ASCII码的第5位置为1，变为小写字母            mov [bx], al             inc bx            loop s0            mov ax, 4c00h             int 21h codesg ends</code></pre><h3 id="2、-bx-idata"><a href="#2、-bx-idata" class="headerlink" title="2、[bx+idata]"></a>2、[bx+idata]</h3><p>[bx+idata]表示一个内存单元, 例如：mov ax, [bx+200]<br>该指令也可以写成如下格式：</p><blockquote><p>mov ax, [200+bx]</p><p>mov ax, 200[bx]</p><p>mov ax, [bx].200</p></blockquote><p>用[bx+idata]的方式进行数组的处理</p><pre><code>assume cs:codesg,ds:datasg datasg segment     db &#39;BaSiC&#39;;转为大写    db &#39;MinIx&#39;;转为小写datasg endscodesg segment    start:        mov ax, datasg         mov ds, ax         mov bx, 0 ;初始ds:bx        mov cx, 5    s:    mov al, 0[bx]         and al, 11011111b ;转为大写字母        mov 0[bx], al ;写回        mov al, 5[bx] ;[5 + bx]        or al, 00100000b ;转为小写字母        mov 5[bx], al         inc bx        loop s        mov ax, 4c00h         int 21hcodesg endsend start</code></pre><p>C语言描述</p><pre><code>int main(){    char a[] = &quot;BaSic&quot;;    char b[] = &quot;MinIX&quot;;    int i = 0;    do    {        a[i] = a[i] &amp; 0xDF;        b[i] = b[i] | 0x20;        i++;    } while(i &lt; 5);    return 0; }</code></pre><h3 id="3、SI-、DI-与-寻址方式的灵活应用"><a href="#3、SI-、DI-与-寻址方式的灵活应用" class="headerlink" title="3、SI 、DI 与 寻址方式的灵活应用"></a>3、SI 、DI 与 寻址方式的灵活应用</h3><p><strong>1、si 、di</strong></p><p>si和di是8086CPU中和bx功能相近的寄存器，si和di不能够分成两个8位寄存器来使用。</p><pre><code>assume cs: codesg, ds: datasg datasg segment     db &#39;welcome to masm!&#39;;用si和di实现将字符串‘welcome to masm！&quot;复制到它后面的数据区中。    db &#39;................&#39;datasg endscodesg segment     start:    mov ax, datasg             mov ds, ax             mov si, 0            mov cx, 8    s:        mov ax, 0[si] ;[0 + si]            mov 16[si], ax ;[16 + si] 使用[bx +idata]方式代替di，使程序更简洁            add si, 2             loop s             mov ax, 4c00h             int 21h codesg ends end start</code></pre><p><strong>2、[bx + si] 和 [bx + di]</strong></p><p>[bx+si]和[bx+di]的含义相似</p><p>[bx+si]表示一个内存单元，它的偏移地址为（bx）+（si）</p><p>指令mov ax, [bx + si]的含义：将一个内存单元字数据的内容送入ax，段地址在ds中</p><p>该指令也可以写成如下格式：mov ax, [bx][si]</p><p><strong>3、[bx+si+idata]和[bx+di+idata]</strong><br>[bx+si+idata]表示一个内存单元，它的偏移地址为（bx）+（si）+idata</p><p>指令mov ax，[bx+si+idata]的含义：将一个内存单元字数据的内容送入ax，段地址在ds中</p><p><strong>4、不同的寻址方式的灵活应用</strong><br>[idata]用一个常量来表示地址，可用于直接定位一个内存单元；<br>[bx]用一个变量来表示内存地址，可用于间接定位一个内存单元；<br>[bx+idata]用一个变量和常量表示地址，可在一个起始地址的基础上用变量间接定位一个内存单元；<br>[bx+si]用两个变量表示地址；<br>[bx+si+idata]用两个变量和一个常量表示地址。</p><pre><code>;将datasg段中每个单词改为大写字母assume cs:codesg,ds:datasg,ss:stacksg datasg segment    db &#39;ibm  &#39; ;16    db &#39;dec  &#39;     db &#39;dos  &#39;    db &#39;vax  &#39; ;看成二维数组datasg ends stacksg segment ;定义一个段，用来做栈段，容量为16个字节    dw 0, 0, 0, 0, 0, 0, 0, 0stacksg ends codesg segment     start:    mov ax, stacksg             mov ss, ax            mov sp, 16             mov ax, datasg             mov ds, ax             mov bx, 0 ;初始ds:bx            ;cx为默认循环计数器，二重循环只有一个计数器，所以外层循环先保存cx值，再恢复，我们采用栈保存            mov cx, 4    s0:        push cx    ;将外层循环的cx值入栈            mov si, 0            mov cx, 3    ;cx设置为内层循环的次数    s:        mov al, [bx+si]            and al, 11011111b ;每个字符转为大写字母            mov [bx+si], al             inc si            loop s             add bx, 16 ;下一行            pop cx    ;恢复cx值            loop s0 ;外层循环的loop指令将cx中的计数值减1            mov ax，4c00H             int 21H codesg endsend start</code></pre><h2 id="七、数据处理的两个基本问题"><a href="#七、数据处理的两个基本问题" class="headerlink" title="七、数据处理的两个基本问题"></a>七、数据处理的两个基本问题</h2><p><strong>1、 bx、si、di和bp</strong></p><p>在8086CPU中，只有这4个寄存器可以用在“[…]”中来进行内存单元的寻址。</p><p>在[ ]中，这4个寄存器可以单个出现，或只能以4种组合出现：bx和si、bx和di、bp和si、bp和di。</p><p>只要在[……]中使用寄存器bp，而指令中没有显性地给出段地址, 段地址就默认在ss中</p><p><strong>2、机器指令处理的数据在什么地方</strong><br>数据处理大致可分为3类：读取、写入、运算。</p><p>在机器指令这一层来讲，并不关心数据的值是多少，而关心指令执行前一刻，它将要处理的数据所在的位置。指令在执行前，所要处理的数据可以在3个地方：CPU内部、内存、端口</p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NDkyMi5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p><strong>3、汇编语言中数据位置的表达</strong></p><p>汇编语言中用3个概念来表达数据的位置</p><p>立即数（idata）</p><blockquote><p>mov ax, 1 ;对于直接包含在机器指令中的数据（执行前在CPU的指令缓冲器中）<br>add bx, 2000h ;在汇编语言中称为：立即数（idata）<br>or bx, 00010000b<br>mov al, ‘a’</p></blockquote><p>寄存器</p><blockquote><p>mov ax, bx ;指令要处理的数据在寄存器中，在汇编指令中给出相应的寄存器名。<br>mov ds, ax<br>push bx<br>mov ds:[0], bx<br>push ds<br>mov ss, ax<br>mov sp, ax</p></blockquote><p>段地址（SA）和偏移地址（EA）</p><blockquote><p>;指令要处理的数据在内存中，在汇编指令中可用[X]的格式给出EA，SA在某个段寄存器中。<br>mov ax, [0]<br>mov ax, [di]<br>mov ax, [bx+8]<br>mov ax, [bx+si]<br>mov ax, [bx+si+8] ;以上段地址默认在ds中</p><p>mov ax, [bp]<br>mov ax, [bp+8]<br>mov ax, [bp+si]<br>mov ax, [bp+si+8] ;以上段地址默认在ss中</p><p>mov ax, ds:[bp]<br>mov ax, es:[bx]<br>mov ax, ss:[bx+si]<br>mov ax, cs:[bx+si+8] ;显式给出存放段地址的寄存器</p></blockquote><p>寻址方式</p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NTAyMy5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p><strong>4、指令要处理的数据有多长</strong><br>8086CPU的指令，可以处理两种尺寸的数据，byte和word</p><p>通过寄存器名指明要处理的数据的尺寸。<br>例如： mov al, ds:[0] 寄存器al指明了数据为1字节</p><p>在没有寄存器名存在的情况下，用操作符X ptr指明内存单元的长度，X在汇编指令中可以为word或byte。<br>例如：mov byte ptr ds:[0], 1 byte ptr 指明了指令访问的内存单元是一个字节单元</p><p>有些指令默认了访问的是字单元还是字节单元<br>例如，push [1000H]，push 指令只进行字操作。</p><p><strong>5、寻址方式的综合应用</strong></p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NTAyNC5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><blockquote><p>mov ax, seg<br>mov ds, ax<br>mov bx, 60h ;确定记录地址，ds:bx</p><p>mov word ptr [bx+0ch], 38 ;排名字段改为38 [bx].0ch<br>add word ptr [bx+0eh], 70 ;收入字段增加70 [bx].0eh<br>mov si, 0 ;用si来定位产品字符串中的字符<br>mov byte ptr [bx+10h+si], ‘V’ ;[bx].10h[si]<br>inc si<br>mov byte ptr [bx+10h+si], ‘A’<br>inc si<br>mov byte ptr [bx+10h+si], ‘X’</p></blockquote><p>C语言描述</p><pre><code>/*定义一个公司记录的结构体*/struct company{ char cn[3];/*公司名称*/ char hn[9];/*总裁姓名*/ int pm;/*排名*/ int sr;/*收入*/ char cp[3];/*著名产品*/};//sizeof (struct company) == 24int main(){ /*定义一个公司记录的变量，内存中将存有一条公司的记录*/ struct company dec = {&quot;DEC&quot;, &quot;Ken Olsen&quot;, 137, 40, &quot;PDP&quot;}; int i; dec.pm = 38; dec.sr = dec.sr + 70; i = 0; dec.cp[i] = &#39;V&#39;; //mov byte ptr [bx].10h[si], &#39;V&#39; i++; dec.cp[i] = &#39;A&#39;; i++; dec.cp[i] = &#39;X&#39;; return 0;}</code></pre><p><strong>6、div指令、dd、dup、mul指令</strong></p><p>div是除法指令</p><p>除数：有8位和16位两种，在一个寄存器或内存单元中。</p><p>被除数：默认放在AX或DX和AX中，<br>如果除数为8位，被除数则为16位，默认在AX中存放；<br>如果除数为16位，被除数则为32位，在DX和AX中存放，DX存放高16位，AX存放低16位。</p><p>结果：<br>如果除数为8位，则AL存储除法操作的商，AH存储除法操作的余数；<br>如果除数为16位，则AX存储除法操作的商，DX存储除法操作的余数。</p><blockquote><p>;利用除法指令计算100001/100。<br>;100001D = 186A1H<br>mov dx, 1<br>mov ax, 86A1H ;(dx)*10000H+(ax)=100001<br>mov bx, 100<br>div bx</p><p>;利用除法指令计算1001/100<br>mov ax, 1001<br>mov bl, 100<br>div b1</p></blockquote><p><strong>伪指令dd</strong></p><p>db和dw定义字节型数据和字型数据。</p><p>dd是用来定义dword（double word，双字）型数据的伪指令</p><p><strong>操作符dup</strong></p><p>dup在汇编语言中同db、dw、dd等一样，也是由编译器识别处理的符号。<br>它和db、dw、dd等数据定义伪指令配合使用，用来进行数据的重复</p><blockquote><p>db 3 dup (0) ;定义了3个字节，它们的值都是0，相当于db 0，0，0。<br>db 3 dup (0, 1, 2) ;定义了9个字节，它们是0、1、2、0、1、2、0、1、2，相当于db 0，1，2，0，1，2，0，1，2。<br>db 3 dup (‘abc’, ‘ABC’) ;定义了18个字节，它们是abcABCabcABCabcABCC，相当于db ‘abc’, ‘ABC’ ,’abc’ , ‘ABC, ‘abc’, ‘ABC’。</p></blockquote><p><strong>mul 指令</strong></p><p>mul是乘法指令，使用 mul 做乘法的时候：相乘的两个数：要么都是8位，要么都是16位。</p><ul><li>8 位： AL中和 8位寄存器或内存字节单元中；</li><li>16 位： AX中和 16 位寄存器或内存字单元中。</li></ul><p>结果</p><ul><li>8位：AX中；</li><li>16位：DX（高位）和 AX（低位）中。</li></ul><p>格式：mul 寄存器 或 mul 内存单元</p><blockquote><p>;计算100*10<br>;100和10小于255，可以做8位乘法<br>mov al,100<br>mov bl,10<br>mul bl</p><p>;结果： (ax)=1000（03E8H）</p></blockquote><blockquote><p>;计算100*10000<br>;100小于255，可10000大于255，所以必须做16位乘法，程序如下：<br>mov ax,100<br>mov bx,10000<br>mul bx</p><p>;结果： (ax)=4240H，(dx)=000FH （F4240H=1000000）</p></blockquote><h2 id="八、转移指令的原理"><a href="#八、转移指令的原理" class="headerlink" title="八、转移指令的原理"></a>八、转移指令的原理</h2><p>可以修改IP，或同时修改CS和IP的指令统称为转移指令。概括地讲，转移指令就是可以控制CPU执行内存中某处代码的指令。</p><p>8086CPU的转移行为有以下几类。</p><ul><li>只修改IP时，称为段内转移，比如：jmp ax。</li><li>同时修改CS和IP时，称为段间转移，比如：jmp 1000:0。</li></ul><p>由于转移指令对IP的修改范围不同，段内转移又分为：短转移和近转移。</p><ul><li>短转移IP的修改范围为-128 ~ 127。</li><li>近转移IP的修改范围为-32768 ~ 32767。</li></ul><p>8086CPU的转移指令分为以下几类。</p><ul><li>无条件转移指令（如：jmp）</li><li>条件转移指令</li><li>循环指令（如：loop）</li><li>过程</li><li>中断</li></ul><h3 id="1、操作符offset"><a href="#1、操作符offset" class="headerlink" title="1、操作符offset"></a><strong>1、操作符offset</strong></h3><p>操作符offset在汇编语言中是由编译器处理的符号，它的功能是取得标号的偏移地址。</p><pre><code>;将s处的一条指令复制到s0处assume cs:codesgcodesg segment s: mov ax, bx  ;（mov ax,bx 的机器码占两个字节） mov si, offset s ;获得标号s的偏移地址 mov di, offset s0 ;获得标号s0的偏移地址 mov ax, cs:[si] mov cs:[di], ax s0: nop   ;（nop的机器码占一个字节） nop codesg ends ends</code></pre><h3 id="2、jmp指令"><a href="#2、jmp指令" class="headerlink" title="2、jmp指令"></a>2、jmp指令</h3><p>jmp为无条件转移，转到标号处执行指令可以只修改IP，也可以同时修改CS和IP；</p><p>jmp指令要给出两种信息：</p><ul><li><p>转移的目的地址</p></li><li><p>转移的距离（段间转移、段内短转移，段内近转移）</p><p>jmp short 标号 jmp near ptr 标号 jcxz 标号 loop 标号 等几种汇编指令，它们对 IP的修改</p></li></ul><p>是根据转移目的地址和转移起始地址之间的位移来进行的。在它们对应的机器码中不包含转移的目的地址，而包含的是到目的地址的位移距离。</p><p><strong>1、依据位移进行转移的jmp指令</strong></p><p>jmp short 标号（段内短转移）</p><p>指令“jmp short 标号”的功能为(IP)=(IP)+8位位移，转到标号处执行指令</p><p>（1）8位位移 = “标号”处的地址 - jmp指令后的第一个字节的地址；</p><p>（2）short指明此处的位移为8位位移；</p><p>（3）8位位移的范围为-128~127，用补码表示</p><p>（4）8位位移由编译程序在编译时算出。</p><pre><code>assume cs:codesgcodesg segment start:mov ax,0 jmp short s ;s不是被翻译成目的地址 add ax, 1 s:inc ax ;程序执行后， ax中的值为 1 codesg endsend start</code></pre><p>CPU不需要这个目的地址就可以实现对IP的修改。这里是依据位移进行转移</p><p>jmp short s指令的读取和执行过程：</p><ol><li>(CS)=0BBDH，(IP)=0006，上一条指令执行结束后CS:IP指向EB 03（jmp short s的机器码）；</li><li>读取指令码EB 03进入指令缓冲器；</li><li>(IP) = (IP) + 所读取指令的长度 = (IP) + 2 = 0008，CS:IP指向add ax,1；</li><li>CPU指行指令缓冲器中的指令EB 03；</li><li>指令EB 03执行后，(IP)=000BH，CS:IP指向inc ax</li></ol><p>jmp near ptr 标号 （段内近转移）</p><p>指令“jmp near ptr 标号”的功能为：(IP) = (IP) + 16位位移。</p><p><strong>2、转移的目的地址在指令中的jmp指令</strong></p><p>jmp far ptr 标号（段间转移或远转移）</p><p>指令 “jmp far ptr 标号” 功能如下：</p><ul><li>(CS) = 标号所在段的段地址；</li><li>(IP) = 标号所在段中的偏移地址。</li><li>far ptr指明了指令用标号的段地址和偏移地址修改CS和IP。</li></ul><pre><code>assume cs:codesgcodesg segment start: mov ax, 0         mov bx, 0  jmp far ptr s ;s被翻译成转移的目的地址0B01 BD0B  db 256 dup (0) ;转移的段地址：0BBDH，偏移地址：010BH s: add ax,1  inc axcodesg endsend start</code></pre><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NTAyNS5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p><strong>3、转移地址在寄存器或内存中的jmp指令</strong><br>jmp 16位寄存器 功能：IP =（16位寄存器）</p><p>转移地址在内存中的jmp指令有两种格式：</p><p>jmp word ptr 内存单元地址（段内转移）</p><p>功能：从内存单元地址处开始存放着一个字，是转移的目的偏移地址。</p><blockquote><p>mov ax, 0123H<br>mov ds:[0], ax<br>jmp word ptr ds:[0]<br>;执行后，(IP)=0123H</p></blockquote><p>jmp dword ptr 内存单元地址（段间转移）<br>功能：从内存单元地址处开始存放着两个字，高地址处的字是转移的目的段地址，低地址处是转移的目的偏移地址。</p><p>1、(CS)=(内存单元地址+2)<br>2、(IP)=(内存单元地址)</p><pre><code>mov ax, 0123Hmov ds:[0], ax;偏移地址mov word ptr ds:[2], 0;段地址jmp dword ptr ds:[0];执行后，;(CS)=0;(IP)=0123H;CS:IP 指向 0000:0123。</code></pre><p><strong>4、jcxz指令和loop指令</strong></p><p><strong>jcxz指令</strong></p><p>jcxz指令为有条件转移指令，所有的有条件转移指令都是短转移，</p><p>在对应的机器码中包含转移的位移，而不是目的地址。对IP的修改范围都为-128~127。</p><p>指令格式：jcxz 标号（如果(cx)=0，则转移到标号处执行。）</p><p>当(cx) = 0时，(IP) = (IP) + 8位位移</p><ul><li>8位位移 = “标号”处的地址 - jcxz指令后的第一个字节的地址；</li><li>8位位移的范围为-128~127，用补码表示；</li><li>8位位移由编译程序在编译时算出。</li></ul><p>当(cx)!=0时，什么也不做（程序向下执行）</p><p><strong>loop指令</strong></p><p>loop指令为循环指令，所有的循环指令都是短转移，在对应的机器码中包含转移的位移，而不是目的地址。</p><p>对IP的修改范围都为-128~127。</p><p>指令格式：loop 标号 ((cx) = (cx) - 1，如果(cx) ≠ 0，转移到标号处执行)。</p><p>(cx) = (cx) - 1；如果 (cx) != 0，(IP) = (IP) + 8位位移。</p><ul><li>8位位移 = 标号处的地址 - loop指令后的第一个字节的地址；</li><li>8位位移的范围为-128~127，用补码表示；</li><li>8位位移由编译程序在编译时算出。</li></ul><p>如果（cx）= 0，什么也不做（程序向下执行）。</p><h2 id="九、call和ret指令"><a href="#九、call和ret指令" class="headerlink" title="九、call和ret指令"></a>九、call和ret指令</h2><p>call和ret指令都是转移指令，它们都修改IP，或同时修改CS和IP。</p><h3 id="1、ret-和-retf"><a href="#1、ret-和-retf" class="headerlink" title="1、ret 和 retf"></a>1、ret 和 retf</h3><p>ret指令用栈中的数据，修改IP的内容，从而实现近转移；</p><p>retf指令用栈中的数据，修改CS和IP的内容，从而实现远转移。</p><p>CPU执行ret指令时，相当于进行： pop IP：</p><p>（1）(IP) = ( (ss) * 16 + (sp) )</p><p>（2）(sp) = (sp) + 2</p><p>CPU执行retf指令时，相当于进行：pop IP, pop CS：</p><p>（1）(IP) = ( (ss) * 16 + (sp) )</p><p>（2）(sp) = (sp) + 2</p><p>（3）(CS) = ( (ss) * 16 + (sp) )</p><p>（4）(sp) = (sp) + 2</p><pre><code>assume cs:code stack seqment    db 16 dup (0)stack ends code segment        mov ax, 4c00h        int 21h  start:    mov ax, stack          mov ss, ax         mov sp, 16        mov ax, 0        push ax ;ax入栈        mov bx, 0        ret ;ret指令执行后，(IP)=0，CS:IP指向代码段的第一条指令。可以push cs push ax retfcode endsend start</code></pre><h3 id="2、call-指令"><a href="#2、call-指令" class="headerlink" title="2、call 指令"></a><strong>2、call 指令</strong></h3><p>call指令经常跟ret指令配合使用，因此CPU执行call指令，进行两步操作：</p><p>（1）将当前的 IP 或 CS和IP 压入栈中；</p><p>（2）转移（jmp）。</p><p>call指令不能实现短转移，除此之外，call指令实现转移的方法和 jmp 指令的原理相同。</p><p><strong>call 标号（近转移）</strong></p><p>CPU执行此种格式的call指令时，相当于进行 push IP jmp near ptr 标号</p><p>call far ptr 标号（段间转移）</p><p>CPU执行此种格式的call指令时，相当于进行：push CS，push IP jmp far ptr 标号</p><p><strong>call 16位寄存器</strong></p><p>CPU执行此种格式的call指令时，相当于进行： push IP jmp 16位寄存器</p><p>call word ptr 内存单元地址</p><p>CPU执行此种格式的call指令时，相当于进行：push IP jmp word ptr 内存单元地址</p><blockquote><p>mov sp, 10h<br>mov ax, 0123h<br>mov ds:[0], ax<br>call word ptr ds:[0]<br>;执行后，(IP)=0123H，(sp)=0EH</p></blockquote><p>call dword ptr 内存单元地址</p><p>CPU执行此种格式的call指令时，相当于进行：push CS push IP jmp dword ptr 内存单元地址</p><pre><code>mov sp, 10hmov ax, 0123hmov ds:[0], axmov word ptr ds:[2], 0call dword ptr ds:[0];执行后，(CS)=0，(IP)=0123H，(sp)=0CH</code></pre><h3 id="3、call-和-ret-的配合使用"><a href="#3、call-和-ret-的配合使用" class="headerlink" title="3、call 和 ret 的配合使用"></a>3、call 和 ret 的配合使用</h3><p>分析下面程序</p><pre><code>assume cs:codecode segmentstart:    mov ax,1     mov cx,3     call s ;（1）CPU指令缓冲器存放call指令，IP指向下一条指令（mov bx, ax），执行call指令，IP入栈，jmp     mov bx,ax    ;（4）IP重新指向这里 bx = 8     mov ax,4c00h     int 21h s: add ax,ax     loop s;（2）循环3次ax = 8     ret;（3）return : pop IPcode endsend start</code></pre><p>call 与 ret 指令共同支持了汇编语言编程中的模块化设计</p><p>编写子程序</p><h2 id="十、标志寄存器"><a href="#十、标志寄存器" class="headerlink" title="十、标志寄存器"></a>十、标志寄存器</h2><p>1、标志寄存器<br>CPU内部的寄存器中，有一种特殊的寄存器（对于不同的处理机，个数和结构都可能不同）具有以下3种作用。</p><p>（1）用来存储相关指令的某些执行结果；</p><p>（2）用来为CPU执行相关指令提供行为依据；</p><p>（3）用来控制CPU的相关工作方式。</p><p>这种特殊的寄存器在8086CPU中，被称为标志寄存器（flag）。</p><p>8086CPU的标志寄存器有16位，其中存储的信息通常被称为程序状态字（PSW-Program Status Word）</p><p>flag寄存器是按位起作用的，它的每一位都有专门的含义，记录特定的信息。</p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NTAyNi5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>在8086CPU的指令集中，有的指令的执行是影响标志寄存器的，比如，add、sub、mul、div、inc、or、and等，它们大都是运算指令（进行逻辑或算术运算）；有的指令的执行对标志寄存器没有影响，比如，mov、push、pop等，它们大都是传送指令</p><p><strong>1、零标志位 (ZF)</strong></p><p>零标志位（Zero Flag）。它记录相关指令执行后，其结果是否为0。</p><p>如果结果为0，那么zf = 1(表示结果是0)；如果结果不为0，那么zf = 0。</p><pre><code>mov ax, 1sub ax, 1 ;执行后，结果为0，则zf = 1mov ax, 2sub ax, 1 ;执行后，结果不为0，则zf = 0</code></pre><p><strong>2、奇偶标志位 (PF)</strong></p><p>奇偶标志位（Parity Flag）。它记录相关指令执行后，其结果的所有bit位中1的个数是否为偶数。</p><p>如果1的个数为偶数，pf = 1，如果为奇数，那么pf = 0。</p><blockquote><p>mov al, 1<br>add al, 10 ;执行后，结果为00001011B，其中有3（奇数）个1，则pf = 0；</p><p>mov al, 1<br>or al, 2 ;执行后，结果为00000011B，其中有2（偶数）个1，则pf = 1；</p></blockquote><p><strong>3、符号标志位(SF)</strong></p><p>符号标志位(Symbol Flag)。它记录相关指令执行后，其结果是否为负。</p><p>如果结果为负，sf = 1；如果非负，sf = 0。</p><p>计算机中通常用补码来表示有符号数据。计算机中的一个数据可以看作是有符号数，也可以看成是无符号数。</p><p>00000001B，可以看作为无符号数1，或有符号数+1；<br>10000001B，可以看作为无符号数129，也可以看作有符号数-127。</p><p>对于同一个二进制数据，计算机可以将它当作无符号数据来运算，也可以当作有符号数据来运算</p><p>CPU在执行add等指令的时候，就包含了两种含义:可以将add指令进行的运算当作无符号数的运算，也可以将add指令进行的运算当作有符号数的运算</p><p>SF标志，就是CPU对有符号数运算结果的一种记录，它记录数据的正负。在我们将数据当作有符号数来运算的时候，可以通过它来得知结果的正负。如果我们将数据当作无符号数来运算，SF的值则没有意义，虽然相关的指令影响了它的值</p><blockquote><p>mov al, 10000001B<br>add al, 1 ;执行后，结果为10000010B，sf = 1，表示：如果指令进行的是有符号数运算，那么结果为负；<br>1<br>2<br>mov al, 10000001B<br>add al, 01111111B ;执行后，结果为0，sf = 0，表示：如果指令进行的是有符号数运算，那么结果为非负</p></blockquote><p><strong>3、进位标志位(CF)</strong></p><p>进位标志位(Carry Flag)。一般情况下，在进行无符号数运算的时候，它记录了运算结果的最高有效位向更高位的进位值，或从更高位的借位值</p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NTAyNy5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>97H - 98H 产生借位CF = 1 ==》 (al) = 197H - 98H = FFH</p><p><strong>4、溢出标志位(OF)</strong></p><p>溢出标志位(Overflow Flag)。一般情况下，OF记录了有符号数运算的结果是否发生了溢出。</p><p>如果发生溢出，OF = 1；如果没有，OF = 0。</p><p>CF和OF的区别：CF是对无符号数运算有意义的标志位，而OF是对有符号数运算有意义的标志位</p><p>CPU在执行add等指令的时候，就包含了两种含义：无符号数运算和有符号数运算。</p><ul><li>对于无符号数运算，CPU用CF位来记录是否产生了进位；</li><li>对于有符号数运算，CPU用OF位来记录是否产生了溢出，当然，还要用SF位来记录结果的符号。</li></ul><blockquote><p>mov al, 98<br>add al, 99 ;执行后将产生溢出。因为进行的”有符号数”运算是：（al）=（al）+ 99 = 98 + 99=197 = C5H 为-59的补码<br>;而结果197超出了机器所能表示的8位有符号数的范围：-128-127。<br>;add 指令执行后：无符号运算没有进位CF=0，有符号运算溢出OF=1<br>;当取出的数据C5H按无符号解析C5H = 197, 当按有符号解析通过SP得知数据为负,即C5H为-59补码存储，</p><p>mov al，0F0H ;F0H，为有符号数-16的补码 -Not(F0 - 1)<br>add al，088H ;88H，为有符号数-120的补码 -Not(88- 1)<br>;执行后，将产生溢出。因为add al, 088H进行的有符号数运算结果是：（al）= -136<br>;而结果-136超出了机器所能表示的8位有符号数的范围：-128-127。<br>;add 指令执行后：无符号运算有进位CF=1，有符号运算溢出OF=1</p></blockquote><p><strong>2、adc指令和sbb指令</strong></p><p>adc是带进位加法指令，它利用了CF位上记录的进位值。</p><p>指令格式：adc 操作对象1, 操作对象2</p><p>功能：操作对象1 = 操作对象1 + 操作对象2 + CF</p><blockquote><p>mov ax, 2<br>mov bx, 1<br>sub bx, ax ;无符号运算借位CF=1，有符号运算OF = 0<br>adc ax, 1 ;执行后，（ax）= 4。adc执行时，相当于计算：(ax)+1+CF = 2+1+1 = 4。</p></blockquote><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NTAyOC5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><pre><code>;计算1EF000H+201000H，结果放在ax（高16位）和bx（低16位）中。;将计算分两步进行，先将低16位相加，然后将高16位和进位值相加。mov ax, 001EH mov bx, 0F000H add bx, 1000Hadc ax, 0020H</code></pre><p><strong>sbb指令</strong></p><p>sbb是带借位减法指令，它利用了CF位上记录的借位值。</p><p>指令格式：sbb 操作对象1, 操作对象2</p><p>功能：操作对象1 = 操作对象1 - 操作对象2 - CF</p><pre><code>;计算 003E1000H - 00202000H，结果放在ax，bx中，程序如下：mov bx, 1000Hmov ax, 003EHsub bx, 2000Hsbb ax, 0020H</code></pre><p><strong>3、cmp指令</strong></p><p>cmp是比较指令，cmp的功能相当于减法指令，只是不保存结果。cmp指令执行后，将对标志寄存器产生影响。</p><p>其他相关指令通过识别这些被影响的标志寄存器位来得知比较结果。</p><p>cmp指令格式：cmp 操作对象1，操作对象2</p><p>例如：<br>指令cmp ax, ax，做（ax）-（ax）的运算，结果为0，但并不在ax中保存，仅影响flag的相关各位。<br>指令执行后：zf=1，pf=1，sf=0，cf=0，of=0。</p><p>CPU在执行cmp指令的时候，也包含两种含义：进行无符号数运算和进行有符号数运算。</p><table><thead><tr><th align="left">cmp ax, bx</th><th align="left">无符号比较时</th></tr></thead><tbody><tr><td align="left">(ax) = (bx)</td><td align="left">zf = 1</td></tr><tr><td align="left">(ax) ≠ (bx)</td><td align="left">zf = 0</td></tr><tr><td align="left">(ax) &lt; (bx)</td><td align="left">cf = 1</td></tr><tr><td align="left">(ax) ≥ (bx)</td><td align="left">cf = 0</td></tr><tr><td align="left">(ax) &gt; (bx)</td><td align="left">cf = 0 且 zf = 0</td></tr><tr><td align="left">(ax) ≤ (bx)</td><td align="left">cf = 1 且 zf = 1</td></tr></tbody></table><p>上面的表格可以正推也可以逆推</p><p>如果用cmp来进行有符号数比较时<br>SF只能记录实际结果的正负，发生溢出的时候，实际结果的正负不能说明逻辑上真正结果的正负。<br>但是逻辑上的结果的正负，才是cmp指令所求的真正结果，所以我们在考察SF的同时考察OF，就可以得知逻辑上真正结果的正负，同时就知道比较的结果。</p><pre><code>mov ah, 08AH ; -Not(8A-1) = -118 即当成有符号数时为-118mov bh, 070H ; 有符号数时最高位为0为正数， 70H = 112cmp ah, bh ;（ah）-（bh）实际得到的结果是1AH          ; 在逻辑上，运算所应该得到的结果是：（-118）- 112 = -230         ; sf记录实际结果的正负，所以sf=0</code></pre><blockquote><p>cmp ah, bh<br>（1）如果sf=1，而of=0 。 of=0说明没有溢出，逻辑上真正结果的正负=实际结果的正负； sf=1，实际结果为负，所以逻辑上真正的结果为负，所以（ah）&lt;（bh）</p><p>（2）如果sf=1，而of=1： of=1，说明有溢出，逻辑上真正结果的正负≠实际结果的正负； sf=1，实际结果为负。<br>实际结果为负，而又有溢出，这说明是由于溢出导致了实际结果为负，，如果因为溢出导致了实际结果为负，那么逻辑上真正的结果必然为正。 这样，sf=1，of=1，说明了（ah）&gt;（bh）。</p><p>（3）如果sf=0，而of=1。of=1，说明有溢出，逻辑上真正结果的正负≠实际结果的正负；sf=0，实际结果非负。而of=1说明有溢出，则结果非0，所以，实际结果为正。<br>实际结果为正，而又有溢出，这说明是由于溢出导致了实际结果非负，如果因为溢出导致了实际结果为正，那么逻辑上真正的结果必然为负。这样，sf=0，of=1，说明了（ah）&lt;（bh）。<br>（4）如果sf=0，而of=0<br>of=0，说明没有溢出，逻辑上真正结果的正负=实际结果的正负；sf=0，实际结果非负，所以逻辑上真正的结果非负，所以（ah）≥（bh）。</p></blockquote><p><strong>4、检测比较结果的条件转移指令</strong></p><p>可以根据某种条件，决定是否修改IP的指令</p><p>jcxz它可以检测cx中的数值，如果（cx）=0，就修改IP，否则什么也不做。</p><p>所有条件转移指令的转移位移都是[-128，127]。</p><p>多数条件转移指令都检测标志寄存器的相关标志位，根据检测的结果来决定是否修改IP</p><p>这些条件转移指令通常都和cmp相配合使用,它们所检测的标志位，都是cmp指令进行无符号数比较的时记录比较结果的标志位</p><p>根据无符号数的比较结果进行转移的条件转移指令（它们检测zf、cf的值）</p><table><thead><tr><th align="left">指令</th><th align="left">含义</th><th align="left">检测的相关标志位</th></tr></thead><tbody><tr><td align="left">je</td><td align="left">等于则转移</td><td align="left">zf = 1</td></tr><tr><td align="left">jne</td><td align="left">不等于则转移</td><td align="left">zf = 0</td></tr><tr><td align="left">jb</td><td align="left">低于则转移</td><td align="left">cf = 1</td></tr><tr><td align="left">jnb</td><td align="left">不低于则转移</td><td align="left">cf = 0</td></tr><tr><td align="left">ja</td><td align="left">高于则转移</td><td align="left">cf = 0 且 zf = 0</td></tr><tr><td align="left">jna</td><td align="left">不高于则转移</td><td align="left">cf = 1 且 zf = 1</td></tr></tbody></table><p>j：jump，e：equal，b：below，a：above，n：not</p><pre><code>;编程，统计data段中数值为8的字节的个数，用ax保存统计结果。mov ax, data mov ds, ax mov bx, 0 ;ds:bx指向第一个字节mov ax, 0 ;初始化累加器mov cx，8s:    cmp byte ptr[bx], 8 ;和8进行比较    jne next ;如果不相等转到next，继续循环    inc ax ;如果相等就将计数值加1next:    inc bx    loop s ;程序执行后：（ax）=3</code></pre><p><strong>5、DF标志和串传送指令</strong><br>方向标志位。在串处理指令中，控制每次操作后si、di的增减。</p><ul><li>df = 0每次操作后si、di递增；</li><li>df = 1每次操作后si、di递减。</li></ul><p>格式：movsb<br>功能：将ds:si指向的内存单元中的字节送入es:di中，然后根据标志寄存器df位的值，将si和di递增或递减</p><p>格式：movsw<br>功能：将ds:si指向的内存字单元中的字送入es:di中，然后根据标志寄存器df位的值，将si和di递增2或递减2。</p><p>格式：rep movsb<br>movsb和movsw进行的是串传送操作中的一个步骤，一般来说，movsb和movsw都和rep配合使用，<br>功能：rep的作用是根据cx的值，重复执行后面的串传送指令</p><p>8086CPU提供下面两条指令对df位进行设置。</p><ul><li>cld指令：将标志寄存器的df位置0</li><li>std指令：将标志寄存器的df位置1</li></ul><pre><code>;将data段中的第一个字符串复制到它后面的空间中。data segment     db &#39;Welcome to masm!&#39;    db 16 dup (0)data endsmov ax, data mov ds, ax mov si, 0 ;ds:si 指向data:0mov es, ax mov di, 16 ;es:di指向data:0010mov cx, 16 ;（cx）=16，rep循环16次c1d ;设置df=0，正向传送rep movsb</code></pre><p><strong>6、pushf和popf</strong><br>pushf的功能是将标志寄存器的值压栈，而popf是从栈中弹出数据，送入标志寄存器中</p><p>pushf和popf，为直接访问标志寄存器提供了一种方法。</p><h2 id="十一、内中断"><a href="#十一、内中断" class="headerlink" title="十一、内中断"></a>十一、内中断</h2><h3 id="1、内中断的产生"><a href="#1、内中断的产生" class="headerlink" title="1、内中断的产生"></a>1、内中断的产生</h3><p>任何一个通用的CPU，都具备一种能力，可以在执行完当前正在执行的指令之后，检测到从CPU外部发送过来的或内部产生的一种特殊信息，并且可以立即对所接收到的信息进行处理。这种特殊的信息，我们可以称其为：中断信息。中断的意思是指，CPU不再接着（刚执行完的指令）向下执行，而是转去处理这个特殊信息。</p><p>中断信息可以来自CPU的内部和外部（内中断，外中断）</p><p>内中断：当CPU的内部有需要处理的事情发生的时候，将产生中断信息，引发中断过程。这种中断信息来自CPU的内部</p><p>8086CPU的内中断（下面四种情况将产生中断信息）</p><ul><li>除法错误，比如，执行div指令产生的除法溢出；</li><li>单步执行；</li><li>执行into指令；</li><li>执行int指令。</li></ul><p>中断信息中包含中断类型码，中断类型码为一个字节型数据，可以表示256种中断信息的来源（中断源）</p><p>上述的4种中断源，在8086CPU中的中断类型码如下。</p><ul><li>除法错误：0</li><li>单步执行：1</li><li>执行into指令：4</li><li>执行int指令，该指令的格式为int n，指令中的n为字节型立即数，是提供给CPU的中断类型码。</li></ul><h3 id="2、中断处理程序、中断向量表、中断过程"><a href="#2、中断处理程序、中断向量表、中断过程" class="headerlink" title="2、中断处理程序、中断向量表、中断过程"></a><strong>2、中断处理程序、中断向量表、中断过程</strong></h3><p>中断处理程序</p><p>用来处理中断信息的程序被称为中断处理程序。</p><p>根据CPU的设计，中断类型码的作用就是用来定位中断处理程序。比如CPU根据中断类型码4，就可以找到4号中断的处理程序</p><p>中断向量表</p><p>中断向量，就是中断处理程序的入口地址。中断向量表，就是中断处理程序入口地址的列表</p><p>CPU用8位的中断类型码通过中断向量表找到相应的中断处理程序的入口地址</p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NTAyOS5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>中断过程</p><p>中断过程的主要任务就是用中断类型码在中断向量表中找到中断处理程序的入口地址，设置CS和IP</p><p>简要描述如下</p><ol><li>取得中断类型码N；</li><li>pushf</li><li>TF=0，IF=0 （为什么这样参考单步中断）</li><li>push CS , push IP</li><li>（IP）=（N * 4），（CS）=（N * 4 + 2）</li></ol><p>硬件在完成中断过程后，CS:IP将指向中断处理程序的入口，CPU开始执行中断处理程序。</p><p><strong>3、iret指令</strong></p><p>CPU随时都可能执行中断处理程序，中断处理程序必须一直存储在内存某段空间之中<br>而中断处理程序的入口地址，即中断向量，必须存储在对应的中断向量表表项中。</p><p>中断处理程序的常规编写步骤：</p><ol><li>保存用到的寄存器；</li><li>处理中断；</li><li>恢复用到的寄存器；</li><li>用iret指令返回。</li></ol><p>iret 指令描述为：pop IP pop CS popf</p><p>iret指令执行后，CPU回到执行中断处理程序前的执行点继续执行程序</p><p><strong>4、除法错误中断的处理</strong></p><blockquote><p>mov ax, 1000h<br>mov bh, 1<br>div bh ;除法溢出错误</p></blockquote><p>1、当CPU执行div bh时，发生了除法溢出错误，产生0号中断信息，从而引发中断过程，</p><p>2、CPU执行0号中断处理程序</p><p>3、系统中的0号中断处理程序的功能：显示提示信息“Divide overflow”后，返回到操作系统中。</p><p><strong>编程实验</strong></p><p>编程：编写0号中断处理程序do0，当发生除法溢出时，在屏幕中间显示“overflow！”，返回DOS。</p><p>1、0000:0200至0000:02FF的256个字节的空间所对应的中断向量表项都是空的，可以将中断处理程序do0传送到内存0000:0200处。</p><p>2、中断处理程序do0放到0000:0200,再将其地址登记在中断向量表对应表项</p><ul><li>0号表项的地址0:0。0:0字单元存放偏移地址，0:2字单元存放段地址</li><li>将do0的段地址0存放在0000:0002字单元中，将偏移地址200H存放在0000:0000字单元</li></ul><pre><code>assume cs:codecode segmentstart:            mov ax, cs        mov ds, ax        mov si, offset do0        ;设置ds:si指向源地址        mov ax, 0        mov es, ax        mov di, 200h            ;设置es:di指向目的地址0000:0200        mov cx, offset do0end - offset do0        ;设置cx为传输长度 编译时给出do0部分代码长度        cld                 ;设置传输方向为正        rep movsb ;将do0的代码送入0:200处        mov ax, 0  ;设置中断向量表        mov es, ax        mov word ptr es:[0*4], 200h        mov word ptr es:[0*4+2], 0     mov ax,4c00h     int 21h;do0程序的主要任务是显示字符串do0:    jmp short do0 start      db &quot;overflow!&quot;do0start:     mov ax, cs     mov ds, ax     mov si, 202h            ;设置ds:si指向字符串     mov ax, 0b800h     mov es, ax        mov di, 12*160+36*2        ;设置es:di指向显存空间的中间位置 mov cx, 9                ;设置cx为字符串长度    s:    mov al, [si]     mov es:[di], al     inc si     add di, 1        mov al, 02h  ;设置颜色        mov es:[di], al         add di, 1     loop s     mov ax, 4c00h     int 21hdo0end:    nopcode endsend start</code></pre><p><strong>5、单步中断</strong></p><p>CPU在执行完一条指令之后，如果检测到标志寄存器的TF位为1，则产生单步中断，引发中断过程。单步中断的中断类型码为1</p><p>Debug是如何利用CPU所提供的单步中断的功能进行调试？如使用t命令查看寄存器状态</p><p>Debug提供了单步中断的中断处理程序，功能为显示所有寄存器中的内容后等待输入命令</p><p>在使用t命令执行指令时，Debug将TF设置为1，在CPU执行完这条指令后就引发单步中断，执行单步中断的中断处理程序，所有寄存器中的内容被显示在屏幕上，并且等待输入命令。</p><p>在进入中断处理程序之前，设置TF=0。从而避免CPU在执行中断处理程序的时候发生单步中断</p><p><strong>6、int指令</strong></p><p>int指令的格式为：int n ，n为中断类型码，它的功能是引发中断过程。</p><p>CPU执行int n指令，相当于引发一个n号中断的中断过程</p><p>在程序中使用int指令调用任何一个中断的中断处理程序(中断例程)</p><p>编写供应用程序调用的中断例程</p><p>实验1</p><pre><code>;求2 * 3456^2assume cs:codecode segmentstart:  mov ax, 3456 ;(ax)=3456​ int 7ch ; 调用中断7ch的中断例程，计算ax中的数据的平方​ add ax, ax ​ adc dx, dx ;存放结果，将结果乘以2​ mov ax,4c00h​ int 21hcode endsend start</code></pre><pre><code>;编程：安装中断7ch的中断例程;功能：求一word型数据的平方。;参数：(ax) = 要计算的数据。;返回值：dx、ax中存放结果的高16位和低16位。assume cs:codecode segmentstart:        mov ax,cs        mov ds,ax        mov si,offset sqr                    ;设置ds:si指向源地址        mov ax,0        mov es,ax        mov di,200h                            ;设置es:di指向目的地址        mov cx,offset sqrend - offset sqr    ;设置cx为传输长度        cld                                    ;设置传输方向为正        rep movsb        mov ax,0        mov es,ax        mov word ptr es:[7ch*4],200h        mov word ptr es:[7ch*4+2],0        mov ax,4c00h        int 21h sqr:         mul ax        iret ;CPU执行int 7ch指令进入中断例程之前，标志寄存器、当前的CS和IP被压入栈         ;在执行完中断例程后，应该用iret 指令恢复int 7ch执行前的标志寄存器和CS、IP的sqrend:    nopcode endsend start</code></pre><p>实验2</p><pre><code>;功能：将一个全是字母，以0结尾的字符串，转化为大写。;参数：ds:si指向字符串的首地址。;应用举例：将data段中的字符串转化为大写。assume cs:codedata segment    db &#39;conversation&#39;,0data endscode segmentstart: mov ax, data        mov ds, ax        mov si, 0        int 7ch        mov ax,4c00h        int 21hcode endsend start</code></pre><pre><code>assume cs:codecode segmentstart:        mov ax,cs        mov ds,ax        mov si,offset capital        mov ax,0        mov es,ax        mov di,200h        mov cx,offset capitalend - offset capital        cld        rep movsb        mov ax,0        mov es,ax        mov word ptr es:[7ch*4],200h        mov word ptr es:[7ch*4+2],0        mov ax,4c00h        int 21hcapital:        push cx        push sichange:         mov cl,[si]        mov ch,0        jcxz ok        and byte ptr [si],11011111b        inc si        jmp short changeok:            pop si        pop cx        iretcapitalend:nopcode endsend start</code></pre><p><strong>7、BIOS和DOS所提供的中断例程</strong></p><p>在系统板的ROM中存放着一套程序，称为BIOS（基本输入输出系统）</p><p>BIOS中主要包含以下几部分内容</p><ul><li>硬件系统的检测和初始化程序；</li><li>外部中断和内部中断的中断例程；</li><li>用于对硬件设备进行I/O操作的中断例程；</li><li>其他和硬件系统相关的中断例程。</li></ul><p>程序员在编程的时候，可以用int 指令直接调用BIOS和DOS系统提供的中断例程，来完成某些工作。<br>和硬件设备相关的DOS中断例程中，一般都调用了BIOS的中断例程。</p><p><strong>BIOS和DOS中断例程的安装过程</strong></p><p>BIOS和DOS提供的中断例程是如何安装到内存中的呢？</p><p>1、开机后，CPU一加电，初始化（CS）= 0FFFFH，（IP）= 0，自动从FFFF:0单元开始执行程序。FFFF:0处有一条转跳指令，CPU执行该指令后，转去执行BIOS中的硬件系统检测和初始化程序。</p><p>2、初始化程序将建立BIOS所支持的中断向量，即将BIOS提供的中断例程的入口地址登记在中断向量表中。<br>注意，对于BIOS所提供的中断例程，只需将入口地址登记在中断向量表中即可，因为它们是固化到ROM中的程序，一直在内存中存在。</p><p>3、硬件系统检测和初始化完成后，调用int 19h进行操作系统的引导。从此将计算机交由操作系统控制。</p><p>4、DOS启动后，除完成其他工作外，还将它所提供的中断例程装入内存，并建立相应的中断向量。</p><p>BIOS中断例程应用</p><p>一般来说，一个供程序员调用的中断例程中往往包括多个子程序，中断例程内部用传递进来的参数来决定执行哪一个子程序。</p><p>BIOS和DOS提供的中断例程，都用ah来传递内部子程序的编号。</p><p>编程：在屏幕的5行12列显示3个红底高亮闪烁绿色的“al。</p><pre><code>assume cs:code code segment;int 10h中断例程的&quot;设置光标位置&quot;功能mov ah, 2;设置光标调用第10h号中断例程的2号子程序，功能为设置光标位置(可以提供光标所在的行号、列号和页号作为参数);设置光标到第0页，第5行，第12列mov bh, 0；第0页mov dh, 5；dh中放行号mov dl, 12；dl中放列号int 10h;int10h中断例程的&quot;在光标位置显示字符&quot;功能。mov ah，9 ;调用第10h号中断例程的9号子程序，功能为在光标位置显示字符;提供要显示的字符、颜色属性、页号、字符重复个数作为参数mov al，&#39;a&#39; ;字符mov b1，11001010b ;颜色属性mov bh，0 ;第0页mov cx，3 ;字符重复个数int 10hcode ends end</code></pre><p>bh中页号的含义：内存地址空间中，B8000H<del>BFFFFH共32kB的空间，为80*25彩色字符模式的显示缓冲区。<br>一屏的内容在显示缓冲区中共占4000个字节。显示缓冲区分为8页，每页4KB（约4000B），显示器可以显示任意一页的内容。一般情况下，显示第0页的内容。也就是说，通常情况下，B8000H</del>B8F9FH中的4000个字节的内容将出现在显示器上。</p><p><strong>DOS中断例程应用</strong></p><p>int 21h中断例程是DOS提供的中断例程，4ch号功能，即程序返回功能</p><blockquote><p>mov ah, 4ch ;调用第21h号中断例程的4ch号子程序，功能为程序返回,可以提供返回值作为参数<br>mov al, 0 ;返回值<br>int 21h</p></blockquote><p>编程：在屏幕的5行12列显示字符串“Welcome to masm！”。</p><pre><code>assume cs:code data segment     db    &#39;Welcome to masm&#39;, &#39;$&#39; ;“$”本身并不显示，只起到边界的作用data ends code segmentstart:    mov ah, 2 ;10号中断设置光标位置功能        mov bh, 0 ;第0页        mov dh, 5；dh中放行号        mov dl, 12 ;dl中放列号        int 10h         mov ax, data         mov ds, ax         mov dx, 0 ;ds:dx指向字符串的首地址data:0 （参数）        mov ah, 9 ;调用第21h号中断例程的9号子程序，功能为在光标位置显示字符串，可以提供要显示字符串的地址作为参数        int 21h         mov ax, 4c00h ;21号中断程序返回功能        int 21h code endsend start</code></pre><h2 id="十二、端口"><a href="#十二、端口" class="headerlink" title="十二、端口"></a>十二、端口</h2><p>在PC机系统中，和CPU通过总线相连的芯片除各种存储器外，还有以下3种芯片。</p><ul><li>各种接口卡（比如，网卡、显卡）上的接口芯片，它们控制接口卡进行工作；</li><li>主板上的接口芯片，CPU通过它们对部分外设进行访问；</li><li>其他芯片，用来存储相关的系统信息，或进行相关的输入输出处理。</li></ul><p>在这些芯片中，都有一组可以由CPU读写的寄存器。这些寄存器，它们在物理上可能处于不同的芯片中，<br>但是它们在以下两点上相同。</p><ul><li>都和CPU的总线相连，这种连接是通过它们所在的芯片进行的；</li><li>CPU对它们进行读或写的时候都通过控制线向它们所在的芯片发出端口读写命令。</li></ul><p>从CPU的角度，将这些寄存器都当作端口，对它们进行统一编址，从而建立了一个统一的端口地址空间。<br>每一个端口在地址空间中都有一个地址。在访问端口的时候，CPU通过端口地址来定位端口。因为端口所在的芯片和CPU通过总线相连，</p><p>CPU可以直接读写以下3个地方的数据。</p><blockquote><p>CPU内部的寄存器；<br>内存单元；<br>端口。</p></blockquote><p><strong>1、端口的读写</strong></p><p>端口地址和内存地址一样，通过地址总线来传送。在PC系统中，CPU最多可以定位64KB个不同的端口。则端口地址的范围为0-65535。</p><p>端口的读写指令只有两条：in和out，分别用于从端口读取数据和往端口写入数据。</p><p>在in和out指令中，只能使用ax或al来存放从端口中读入的数据或要发送到端口中的数据。</p><pre><code>;对0~255以内的端口进行读写时：in al, 20h ;从20h端口读入一个字节out 20h, al ;往20h端口写入一个字节;对256~65535的端口进行读写时，端口号放在dx中：mov dx, 3f8h ;将端口号3f8h送入dxin al, dx ;从3f8h端口读入一个字节out dx, al ;向3f8h端口写入一个字节</code></pre><p><strong>2、CMOS RAM芯片</strong></p><p>PC机中，有一个CMOSRAM芯片，一般简称为CMOS。此芯片的特征如下</p><p>1、包含一个实时钟和一个有128个存储单元的RAM存储器<br>2、该芯片靠电池供电。关机后内部的实时钟正常工作，RAM中的信息不丢失<br>3、128个字节的RAM中，内部实时钟占用0~0dh单元来保存时间信息，其余大部分单元用于保存系统配置信息，供系统启动时BIOS程序读取。BIOS也提供了相关的程序，使我们可以在开机的时候配置CMOSRAM中的系统信息。<br>该芯片内部有两个端口，端口地址为70h和71h。CPU通过这两个端口来读写CMOS RAM<br>4、70h为地址端口，存放要访问的CMOSRAM单元的地址；71h为数据端口，存放从选定的CMOSRAM单元中读取的数据，或要写入到其中的数据。<br>可见，CPU对CMOS RAM的读写分两步进行，比如，读CMOS RAM的2号单元：<br>①将2送入端口70h；<br>②从端口71h读出2号单元的内容。</p><p><strong>CMOSRAM中存储的时间信息</strong></p><p>在CMOS RAM中，存放着当前的时间：年、月、日、时、分、秒。长度都为1个字节，<br>存放单元为：</p><table><thead><tr><th align="left">9</th><th align="left">8</th><th align="left">7</th><th align="left">6</th><th align="left">5</th><th align="left">4</th><th align="left">3</th><th align="left">2</th><th align="left">1</th><th align="left">0</th></tr></thead><tbody><tr><td align="left">年</td><td align="left">月</td><td align="left">日</td><td align="left"></td><td align="left"></td><td align="left">时</td><td align="left"></td><td align="left">分</td><td align="left"></td><td align="left">秒</td></tr></tbody></table><p>BCD码是以4位二进制数表示十进制数码的编码方法 4 == 0100B</p><p>一个字节可表示两个BCD码。则CMOS RAM存储时间信息的单元中，存储了用两个BCD码表示的两位十进制数，高4位的BCD码表示十位，低4位的BCD码表示个位。比如，00010100b表示14。</p><pre><code>;编程，在屏幕中间显示当前的月份。assume cs:codecode segment start:    mov al，8 ;从CMOS RAM的8号单元读出当前月份的BCD码。        out 70h，al         in al, 71h ;从数据端口71h中取得指定单元中的数据：        mov ah, al ;al中为从CMOSRAM的8号单元中读出的数据        mov cl, 4        shr ah, cl ;ah中为月份的十位数码值,左移四位空出四位        and al, 00001111b ;al中为月份的个位数码值        add ah, 30h ;BCD码值+30h=十进制数对应的ASCII        add al, 30h         mov bx, 0b800h         mov es, bx         mov byte ptr es:[160*12+40*2], ah ;显示月份的十位数码        mov byte ptr es:[160*12+40*2+2], al ;接着显示月份的个位数码        mov ax，4c00h        int 21hcode endsend start</code></pre><p><strong>3、shl和shr指令</strong><br>shl和shr是逻辑移位指令</p><p>shl是逻辑左移指令，它的功能为：</p><ul><li>将一个寄存器或内存单元中的数据向左移位；</li><li>将最后移出的一位写入CF中；</li><li>最低位用0补充。</li></ul><p>shr是逻辑右移指令，同理</p><pre><code>mov al, 01001000b shl al, 1 ;将a1中的数据左移一位执行后（al）=10010000b，CF=0。mov al, 01010001b mov cl, 3 ;如果移动位数大于1时，必须将移动位数放在cl中shl al, c1mov al, 10000001b shr al, 1 ;将al中的数据右移一位执行后（al）=01000000b，CF=1。</code></pre><p>将X逻辑左移一位，相当于执行X=X*2。<br>将X逻辑右移一位，相当于执行X=X/2</p><h2 id="十三、外中断"><a href="#十三、外中断" class="headerlink" title="十三、外中断"></a>十三、外中断</h2><h3 id="1、外中断"><a href="#1、外中断" class="headerlink" title="1、外中断"></a>1、外中断</h3><p>PU在计算机系统中，除了能够执行指令，进行运算以外，还应该能够对外部设备进行控制，接收它们的输入，向它们进行输出（I/O能力）</p><p>PC系统的接口卡和主板上，装有各种接口芯片。这些外设接口芯片的内部有若干寄存器，CPU将这些寄存器当作端口来访问</p><p>外设的输入不直接送入内存和CPU，而是送入相关的接口芯片的端口中；<br>CPU向外设的输出也不是直接送入外设，而是先送入端口中，再由相关的芯片送到外设。<br>CPU还可以向外设输出控制命令，而这些控制命令也是先送到相关芯片的端口中，然后再由相关的芯片根据命令对外设实施控制。</p><p>即：CPU通过端口和外部设备进行联系</p><p>当CPU外部有需要处理的事情发生的时候，比如说，外设的输入到达，相关芯片将向CPU发出相应的中断信息。CPU在执行完当前指令后，可以检测到发送过来的中断信息，引发中断过程，处理外设的输入。</p><p><strong>PC系统中，外中断源有两类</strong></p><p><strong>1、可屏蔽中断</strong></p><p>可屏蔽中断是CPU可以不响应的外中断。CPU是否响应可屏蔽中断，要看标志寄存器的IF位的设置。<br>当CPU检测到可屏蔽中断信息时，如果IF=1，则CPU在执行完当前指令后响应中断，引发中断过程；如果IF=0，则不响应可屏蔽中断。</p><p>可屏蔽中断信息来自于CPU外部，中断类型码是通过数据总线送入CPU的；而内中断的中断类型码是在CPU内部产生的。</p><p>中断过程中将IF置0的原因就是，在进入中断处理程序后，禁止其他的可屏蔽中断。<br>如果在中断处理程序中需要处理可屏蔽中断，可以用指令将IF置1。</p><p>8086CPU提供的设置IF的指令：sti，设置IF=1；cli，设置IF=0。</p><p><strong>2、不可屏蔽中断</strong></p><p>不可屏蔽中断是CPU必须响应的外中断。当CPU检测到不可屏蔽中断信息时，则在执行完当前指令后，立即响应，引发中断过程。</p><p>对于8086CPU，不可屏蔽中断的中断类型码固定为2，所以中断过程中，不需要取中断类型码。则不可屏蔽中断的中断过程为：①标志寄存器入栈，IF=0，TF=0；②CS、IP入栈；③（IP）=（8），（CS）=（0AH）。</p><p>几乎所有由外设引发的外中断，都是可屏蔽中断。当外设有需要处理的事件（比如说键盘输入）发生时，相关芯片向CPU发出可屏蔽中断信息。不可屏蔽中断是在系统中有必须处理的紧急情况发生时用来通知CPU的中断信息。</p><p><strong>2、PC机键盘的处理过程</strong><br>键盘中有一个芯片对键盘上的每一个键的开关状态进行扫描。按下一个键时，开关接通，该芯片就产生一个扫描码，扫描码说明了按下的键在键盘上的位置。扫描码被送入主板上的相关接口芯片的寄存器中，该寄存器的端口地址为60h。松开按下的键时，也产生一个扫描码，扫描码说明了松开的键在键盘上的位置。松开按键时产生的扫描码也被送入60h端口中。</p><p>一般将按下一个键时产生的扫描码称为通码，松开一个键产生的扫描码称为断码。</p><p>扫描码长度为一个字节，通码的第7位为0，断码的第7位为1<br>即：断码 = 通码 + 80h。比如，g键的通码为22h，断码为a2h</p><p>键盘的输入到达60h端口时，相关的芯片就会向CPU发出中断类型码为9的可屏蔽中断信息。CPU检测到该中断信息后，如果IF=1，则响应中断，引发中断过程，转去执行int 9中断例程。</p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcuamJ6ai5jb20vZmlsZV9pbWFnZXMvYXJ0aWNsZS8yMDIwMDEvMjAyMDAxMTgxMjI4NTAzMC5wbmc?x-oss-process=image/format,png" alt="在这里插入图片描述"></p><p>BIOS提供了int9中断例程，用来进行基本的键盘输入处理，主要的工作如下：</p><p>（1）读出60h端口中的扫描码；<br>（2）如果是字符键的扫描码，将该扫描码和它所对应的字符码（即ASCII码）送入内存中的BIOS键盘缓冲区； 如果是控制键（比如Ctrl）和切换键（比如CapsLock）的扫描码，则将其转变为状态字节写入内存中存储状态字节的单元；<br>（3）对键盘系统进行相关的控制，比如说，向相关芯片发出应答信息。</p><p>BIOS键盘缓冲区可以存储15个键盘输入，一个键盘输入用一个字单元存放，高位字节存放扫描码，低位字节存放字符码。</p><p>0040:17单元存储键盘状态字节，该字节记录了控制键和切换键的状态。键盘状态字节各位记录的信息如下。</p><table><thead><tr><th align="left">0</th><th align="left">右shift状态</th><th align="left">置1表示按下右shift键</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">左shift状态</td><td align="left">置1表示按下左shift键</td></tr><tr><td align="left">2</td><td align="left">Ctrl状态</td><td align="left">置1表示按下Ctrl键</td></tr><tr><td align="left">3</td><td align="left">Alt状态</td><td align="left">置1表示按下Alt键</td></tr><tr><td align="left">4</td><td align="left">ScrollLock状态</td><td align="left">置1表示Scroll指示灯亮</td></tr><tr><td align="left">5</td><td align="left">NumLock状态</td><td align="left">置1表示小键盘输入的是数字</td></tr><tr><td align="left">6</td><td align="left">CapsLock状态</td><td align="left">置1表示输入大写字母</td></tr><tr><td align="left">7</td><td align="left">Insert状态</td><td align="left">置1表示处于删除态</td></tr></tbody></table><p>编写int 9中断例程</p><pre><code>;编程：在屏幕中间依次显示“a”~“z”，并可以让人看清。在显示的过程中，按下&#39;Esc&#39;键后，改变显示的颜色。;完整功能代码：assume cs:codestack segment    db 128 dup (0)stack endsdata segment    dw 0,0data endscode segmentstart:        mov ax,stack    mov ss,ax    mov sp,128    mov ax,data    mov ds,ax    mov ax,0    mov es,ax    push es:[9*4]    pop ds:[0]    push es:[9*4+2]    pop ds:[2]        ;将原来的int 9中断例程的入口地址保存在ds:0、ds:2单元中    mov word ptr es:[9*4], offset int9    mov es:[9*4+2], cs    ;在中断向量表中设置新的int 9中断例程的入口地址;显示字符串    mov ax, 0b800h    mov es, ax    mov ah, &#39;a&#39;s:        mov es:[160*12+40*2], ah    call delay    inc ah    cmp ah, &#39;z&#39;    jna s    mov ax,0    mov es,ax    push ds:[0]    pop es:[9*4]    push ds;[2]    pop es;[9*4+2]     ;将中断向量表中int 9中断例程的入口恢复为原来的地址    mov ax,4c00h    int 21h;将循环延时的程序段写为一个子程序delay:        push ax     push dx    mov dx, 2000h ;用两个16位寄存器来存放32位的循环次数    mov ax, 0s1:         sub ax, 1    sbb dx, 0    cmp ax, 0    jne s1    cmp dx, 0    jne s1    pop dx    pop ax    ret;------以下为新的int 9中断例程--------------------int9:        push ax    push bx    push es    in al, 60h;从端口60h读出键盘的输入    pushf ;标志寄存器入栈    pushf     pop bx    and bh,11111100b    push bx    popf    ;TF=0,IF=0    call dword ptr ds:[0]     ;对int指令进行模拟，调用原来的int 9中断例程    cmp al,1    jne int9ret    mov ax,0b800h    mov es,ax    inc byte ptr es:[160*12+40*2+1] ;属性增加1，改变颜色int9ret:    pop es    pop bx    pop ax    iretcode endsend start</code></pre><p>CPU对外设输入的通常处理方法<br>（1）外设的输入送入端口；<br>（2）向CPU发出外中断（可屏蔽中断）信息；<br>（3）CPU检测到可屏蔽中断信息，如果IF=1，CPU在执行完当前指令后响应中断，执行相应的中断例程；<br>（4）可在中断例程中实现对外设输入的处理。</p><p>端口和中断机制，是CPU进行I/O的基础。</p><h2 id="十四、直接定址表"><a href="#十四、直接定址表" class="headerlink" title="十四、直接定址表"></a>十四、直接定址表</h2><pre><code>assume cs:codecode segment  a : db 1,2,3,4,5,6,7,8 ;在后面加有“：”的地址标号，只能在代码段中使用，不能在其他段中使用。  b : dw 0start :mov si,offset a  mov bx,offset b  mov cx,8 s : mov al,cs:[si]  mov ah,0  add cs:[bx],ax  inc si  loop s  mov ax,4c00h  int 21hcode endsend start</code></pre><p>程序中，code、a、b、start、s都是标号。这些标号仅仅表示了内存单元的地址</p><p>描述了单位长度的标号</p><pre><code>assume cs:codecode segment  a db 1,2,3,4,5,6,7,8 ;标号a、b后面没有&quot;:&quot;，因此它们是可以同时描述内存地址和单元长度的标号。    ;标号a，描述了地址code:0，和从这个地址开始，以后的内存单元都是字节单元  b dw 0  ;标号b描述了地址code:8，和从这个地址开始，以后的内存单元都是字单元。start : mov si,0  mov cx,8 s : mov al,a[si]  mov ah,0  add b,ax  inc si  loop s  mov ax,4c00h  int 21hcode endsend start</code></pre><p>使用数据标号来描述存储数据的单元的地址和长度。</p><pre><code>assume cs:code,ds:data ；用伪指令assume将标号所在的段和一个段寄存器联系起来(编译器需要)data segment    a db 1,2,3,4,5,6,7,8  b dw 0data endscode segmentstart: mov ax,data  mov ds,ax ;真正确定ds寄存器  mov si,0  mov cx,8s: mov al,a[si] ;编译为：mov al,[si+0] 默认所访问单元的段地址在ds  mov ah,0  add b,ax ;编译为：add [8],ax  inc si  loop s  mov ax,4c00h  int 21hcode endsend start</code></pre><pre><code>data segment    a db 1,2,3,4,5,6,7,8    b dw 0    c dw a, b ;等价于c dw offset a, offset b    ;数据标号c处存储的两个字型数据为标号a、b 的偏移地址data endsdata segment    a db 1,2,3,4,5,6,7,8    b dw 0    c dd a,b ;等价于c dw offset a, seg a, offset b, seg b    ;数据标号c处存储的两个双字型数据为标号a的偏移地址和段地址、标号b 的偏移地址和段地址data ends</code></pre><p>seg操作符，功能为取得某一标号的段地址</p><p>建立一张表，表中依次存储字符“0”~“F”，我们可以通过数值0 ~ 15直接查找到对应的字符</p><pre><code>assume cs:codecode segmentstart:         mov al,0eh call showbyte mov ax,4c00h int 21h;子程序：;用al传送要显示的数据showbyte: jmp short show table db &#39;0123456789ABCDEF&#39;    ;字符表show: push bx push es mov ah,al shr ah,1   shr ah,1 shr ah,1 shr ah,1             ;右移4位，ah中得到高4位的值 and al,00001111b        ;al中为低4位的值 mov bl,ah mov bh,0 mov ah,table[bx]        ;用高4位的值作为相对于table的偏移，取得对应的字符 mov bx,0b800h mov es,bx mov es:[160*12+40*2],ah mov bl,al mov bh,0 mov al,table[bx]        ;用低4位的值作为相对于table的偏移，取得对应的字符 mov es:[160*12+40*2+2],al pop es pop bx retcode endsend start</code></pre><h2 id="十五、-指令系统总结"><a href="#十五、-指令系统总结" class="headerlink" title="十五、 指令系统总结"></a>十五、 指令系统总结</h2><p>我们对8086CPU的指令系统进行一下总结。读者若要详细了解8086指令系统中的各个指令的用，可以查看有关的指令手册。</p><p>8086CPU提供以下几大类指令。</p><p>1、数据传送指令</p><p>mov、push、pop、pushf、popf、xchg 等都是数据传送指令，这些指令实现寄存器和内存、寄器和寄存器之间的单个数据传送。</p><p>2、算术运算指令<br>add、sub、adc、sbb、inc、dec、cmp、imul、idiv、aaa等都是算术运算指令，这些指令实现存器和内存中的数据的算数运算。它们的执行结果影响标志寄存器的sf、zf、of、cf、pf、af位。<br>3、逻辑指令<br>and、or、not、xor、test、shl、shr、sal、sar、rol、ror、rcl、rcr等都是逻辑指令。除了not指外，它们的执行结果都影响标志寄存器的相关标志位。<br>4、转移指令<br>可以修改IP，或同时修改CS和IP的指令统称为转移指令。转移指令分为以下几类。<br>（1）无条件转移指令，比如，jmp；<br>（2）条件转移指令，比如，jcxz、je、jb、ja、jnb、jna等；<br>（3）循环指令，比如，loop；<br>（4）过程，比如，call、ret、retf；<br>（5）中断，比如，int、iret。<br>5、处理机控制指令<br>对标志寄存器或其他处理机状态进行设置，cld、std、cli、sti、nop、clc、cmc、stc、hlt、wait、esc、lock等都是处理机控制指令。<br>6、串处理指令<br>对内存中的批量数据进行处理，movsb、movsw、cmps、scas、lods、stos等。若要使用这些指令方便地进行批量数据的处理，则需要和rep、repe、repne 等前缀指令配合使用。</p><p>文中大部分的图片来自王爽《<a href="https://www.jb51.net/books/518393.html" target="_blank" rel="noopener">汇编语言</a>》个别图片来自刘宏伟·计算机组成原理课件</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怀天经智老因访之</title>
      <link href="/posts/e083.html"/>
      <url>/posts/e083.html</url>
      
        <content type="html"><![CDATA[<h1 id="怀天经智老因访之"><a href="#怀天经智老因访之" class="headerlink" title="怀天经智老因访之"></a>怀天经智老因访之</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​           怀天经智老因访之</p><p>​                                                                宋·陈与义</p><p>今年二月冻初融，睡起苕溪绿向东。<br>客子光阴诗卷里，杏花消息雨声中。<br>西庵禅伯还多病，北栅儒先只固穷。<br>忽忆轻舟寻二子，纶巾鹤氅试春风。</p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><ul><li>今年二月早春时节，冰雪都开始融化了，寒冬时节沉睡了已久的苕溪，夹带着几丝绿色，潺潺涓涓，向东流去。</li><li>我寓居他乡，在吟诗作赋中淡泊度日。杏花时节，伴随着窗外稀稀落落的雨声，我时常探听远方好友的音讯。</li><li>西庵所居住的智老精于禅学，但病魔缠身；北栅所居住的天经精于儒学，又安于穷困。</li><li>我忽然想念他们，于是就荡舟寻访这二位老友。在春风的吹拂下，我头戴纶巾，身披鹤氅，是何等的风流俊逸！</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>天经：姓叶，名德。智老：即大圆洪智和尚。诗中“禅伯”指大圆洪智，“儒先”指叶天经。</li><li>苕溪：河名，源出浙江省天目山，流经余杭、杭州、湖州等地，进入太湖。</li><li>西庵：智老所居。位于湖州东南九十里的乌镇。禅伯：形容智老精于禅学。</li><li>北栅：天经所居。亦位于湖州东南九十里的乌镇。儒先：形容天经精于儒学。固穷：安于穷困。</li><li>纶巾鹤氅：是六朝以来名士喜爱的穿戴，这里比喻诗人是雅人。纶巾，用丝带做成的头巾。鹤氅，用鸟羽做成的外衣</li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><p>　　公元1136年（宋高宗绍兴六年）旧历二月，陈与义寓居苕溪畔的青镇，怀念对岸的两位朋友天经和智老，因而写下这首诗。</p><p>　　作品的开篇写时间变化，一夜之间，春水已涨，尽向东流，顿生怀友、访友之意。但笔意至此，先出一折，从自己写起。安于贫贱，甘于淡泊，在吟诗作赋的生涯中，看到杏花春雨又送来一个春天，心中充满了顺适之感。自己如此，友人也是一样。所以下面写到禅伯之多病，儒先之固穷。实则写己即写友，写友即写己，二者交相为用，互为生发，以见出心灵的相契，见出溪涨思友的心理依据。有了前面的铺垫，末二句就顺理成章地踏上了访友的路途。至于见到友人后的情形，却全都忽略了，留给读者自己去想像。但作者另有一诗题为《与智老天经夜坐》：“残年不复徙他邦，长与两禅同夜釭。坐到更深都寂寂，雪花无数落天窗。”其中对雨夜谈禅的描写，正可与此诗互相补充。</p><p>　　“客子光阴诗卷里，杏花消息雨声中”是陈与义的名句，曾经得到宋高宗的激赏。这一联写诗人观赏杏花，以诗自娱，以自然清新的笔触表现了诗人的平淡闲适之情，却并未道出诗人是喜是悲，是苦是乐，给读者留下了想象空间。就对仗来说，此联除了“里”、“中”外，其余都不算工对，但也正因为如此，反映了作者在古典诗歌的对仗艺术上所作的探索，因而曾被魏庆之的《诗人玉屑》列为“宋朝警句”。方回在《瀛奎律髓》卷二十六中对此作了分析：“以客子对杏花，以雨声对诗卷，一我一物，一景一情，变化至此。乃老杜‘即今蓬鬓改，但愧菊花开’，贾岛‘身事岂能遂，兰花又已开’，翻窠换臼，至简斋而益奇也。”对仗要求和谐工稳，是六朝以来的总体趋势；但至唐代发展到极致以后，一些有创造性的诗人如杜甫、韩愈等又致力于打破已成模式化的对仗方式，力图求新求变，突破这种工稳，以求得在不平衡中的平衡。到了宋人手里，就更是有意识地忽略字面上的工稳，而着重于两句之间的内在联系。陈与义的这一联，上句写客中吟咏送日的宁静、淡泊，下联写一个清丽的境界，从而构成一个和谐的整体。至于两句之间在字面上是否的对，倒没有特别注意。从这个角度看，这联诗也反映了宋人对唐诗的发展。</p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>​        陈与义(1090-1138)，字去非，号简斋，汉族，其先祖居京兆，自曾祖陈希亮迁居洛阳，故为宋代河南洛阳人（现在属河南）。他生于宋哲宗元祐五年(1090年)，卒于南宋宋高宗绍兴八年(1138年)。北宋末，南宋初年的杰出诗人，同时也工于填词。其词存于今者虽仅十余首，却别具风格，尤近于苏东坡，语意超绝，笔力横空，疏朗明快，自然浑成，著有《简斋集》</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行香子·过七里濑</title>
      <link href="/posts/93e.html"/>
      <url>/posts/93e.html</url>
      
        <content type="html"><![CDATA[<h1 id="行香子·过七里濑"><a href="#行香子·过七里濑" class="headerlink" title="行香子·过七里濑"></a>行香子·过七里濑</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​            行香子·过七里濑</p><p>​                                                                宋·苏轼</p><p>一叶舟轻，双桨鸿惊。水天清、影湛波平。鱼翻藻鉴，鹭点烟汀。过沙溪急，霜溪冷，月溪明。<br>重重似画，曲曲如屏。算当年、虚老严陵。君臣一梦，今古空名。但远山长，云山乱，晓山青</p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><ul><li>乘一叶小舟，荡着双桨，像惊飞的鸿雁一样，飞快地掠过水面。天空碧蓝，水色清明，山色天光，尽入江水，波平如镜。水中游鱼，清晰可数，不时跃出明镜般的水面；水边沙洲，白鹭点点，悠闲自得。白天之溪，清澈而见沙底；清晓之溪，清冷而有霜意；月下之溪，是明亮的水晶世界。</li><li>两岸连山，往纵深看则重重叠叠，如画景；从横列看则曲曲折折，如屏风。笑严光当年白白地在此终老，不曾真正领略到山水佳处。皇帝和隐士，而今也已如梦一般消失，只留下空名而已。只有远山连绵，重峦叠嶂；山间白云，缭绕变幻；晓山晨曦，青翠欲滴。</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li><p>行香子：词牌名。</p></li><li><p>七里濑：又名七里滩、七里泷，在今浙江省桐庐县城南三十里。钱塘江两岸山峦夹峙，水流湍急，连绵七里，故名七里濑。濑，沙石上流过的急水。</p></li><li><p>一叶：舟轻小如叶，故称“一叶”。</p></li><li><p>湛（zhàn）：清澈。</p></li><li><p>藻鉴：亦称藻镜，指背面刻有鱼、藻之类纹饰的铜镜，这里比喻像镜子一样平的水面。藻，生活在水中的一种</p><p>隐花植物。鉴，镜子。</p></li><li><p>鹭：一种水鸟。汀（tīng）：水中或水边的平地，小洲。</p></li><li><p>屏：屏风，室内用具，用以挡风或障蔽。</p></li><li><p>严陵：即严光，字子陵，东汉人，曾与刘秀同学，并帮助刘秀打天下。刘秀称帝后，他改名隐居。刘秀三次派人才把他召到京师。授谏议大夫，他不肯接受，归隐富春江，终日钓鱼。</p></li><li><p>君臣：君指刘秀，臣指严光。</p></li><li><p>空名：世人多认为严光钓鱼是假，“钓名”是真。这里指刘秀称帝和严光垂钓都不过是梦一般的空名而已。</p></li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><blockquote><p>​        此词在对大自然美景的赞叹中，寄寓了因缘自适、看透名利、归真返朴的人生态度，发出了人生如梦的浩叹。</p></blockquote><p>　　上阕头六句描写清澈宁静的江水之美：一叶小舟，荡着双桨，像惊飞的鸿雁一样，飞快地掠过水面。天空碧蓝，水色清明，山色天光，尽入江水，波平如镜。水中游鱼，清晰可数，不时跃出明镜般的水面；水边沙洲，白鹭点点，悠闲自得。词人用简练的笔墨，动静结合、点面兼顾地描绘出生机盎然的江面风光，体现出作者热爱自然、热爱生活的情趣。</p><p>　　接下来“过沙溪急，霜溪冷，月溪明”三句，节奏轻快。沙溪，是白天之溪，清澈而见沙底；霜溪，是清晓之溪，清冷而有霜意；月溪，乃是月下之溪，是明亮的水晶世界。词人用蒙太奇手法，剪接了三个不同时辰的舟行之景。既写出了船之行程，也创造出清寒凄美的意境，由此引出一股人生的况味，为下片抒写人生感慨作了铺垫。</p><p>　　词的下阕，作者首先由写江水之清明转写夹岸的奇山异景——“重重似画，曲曲如屏”：两岸连山，往纵深看则重重叠叠，如画景；从横列看则曲曲折折，如屏风。词写水则特详，写山则至简，章法变化，体现了在江上舟中观察景物近则精细远则粗略的特点。</p><p>　　“算当年，虚老严陵。”东汉初年的严子陵，辅佐刘秀打天下以后，隐居不仕，垂钓富春江上。昔人多说严光垂钓实是“钓名”，东坡在此，也笑严光当年白白在此终老，不曾真正领略到山水佳处。“君臣一梦，今古空名”，表达出浮生若梦的感慨：皇帝和隐士，而今也已如梦一般消失，只留下空名而已。那么真正能永恒留传的实体是什么呢？“但远山长，云山乱，晓山青。”只有远山连绵，重峦叠嶂；山间白云，缭绕变形；晓山晨曦，青翠欲滴。意思是说，只有大自然才是永恒的，只有大自然之美才是永恒的。这是苏轼的一贯思想，正如他在《前赤壁赋》中所感叹的：“惟江上之清风，与山间之明月，耳得之而为声，目遇之而成色，取之无禁，用之无竭……”</p><p>　　下半阕以山起，以山结，中间插入议论感慨，而以“虚老”粘上文，“但”字转下意，衔接自然。结尾用一“但”字领“远山长，云山乱，晓山青”三个跳跃的短句，又与上半阕“沙溪急，霜溪冷，月溪明”遥相呼应。前面写水，后面写山，异曲同工，以景结情。人生的感慨，历史的沉思，都融化在一片流动闪烁、如诗如画的水光山色之中，隽永含蓄，韵味无穷。</p><p>　　从这首词可以看出，苏轼因与朝廷掌权者意见不合，而贬谪杭州任通判期间，尽管仕途不顺，却仍然生活得轻松闲适。他好佛老而不溺于佛老，看透生活而不厌倦生活，善于将沉重的荣辱得失化为过眼云烟，在大自然的美景中找回内心的宁静与安慰。词中那生意盎然、活泼清灵的景色中，融注着词人深沉的人生感慨和哲理思考。</p><p>　　苏东坡经常发出“人生如梦”的感慨，有的评论家便批评苏东坡消极、悲观，但人们仍然爱苏词。人们从苏词中得到的，不是灰色的颓唐，而是绿色的欢欣，是诗情画意的美感享受。</p><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>这首词作于公元1073年（宋神宗熙宁六年）春二月。苏轼时任杭州通判，巡查富阳，由新城至桐庐，乘舟富春江，经过七里濑时作此词。</p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>​      苏轼（1037年1月8日-1101年8月24日）字子瞻、和仲，号铁冠道人、东坡居士，世称苏东坡、苏仙，汉族，眉州眉山（四川省眉山市）人，祖籍河北栾城，北宋著名文学家、书法家、画家，历史治水名人。苏轼是北宋中期文坛领袖，在诗、词、散文、书、画等方面取得很高成就。文纵横恣肆；诗题材广阔，清新豪健，善用夸张比喻，独具风格，与黄庭坚并称“苏黄”；词开豪放一派，与辛弃疾同是豪放派代表，并称“苏辛”；散文著述宏富，豪放自如，与欧阳修并称“欧苏”，为“唐宋八大家”之一。苏轼善书，“宋四家”之一；擅长文人画，尤擅墨竹、怪石、枯木等。作品有《东坡七集》《东坡易传》《东坡乐府》《潇湘竹石图卷》《古木怪石图卷》等。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python内置函数详解</title>
      <link href="/posts/1e2c.html"/>
      <url>/posts/1e2c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python-内置函数详解"><a href="#Python-内置函数详解" class="headerlink" title="Python 内置函数详解"></a>Python 内置函数详解</h1><h2 id="01、abs"><a href="#01、abs" class="headerlink" title="01、abs()"></a>01、abs()</h2><blockquote><p><strong>描述：</strong>返回数字绝对值或复数的模</p><p><strong>语法：</strong>abs( x )</p><p><strong>参数：</strong>x 数值表达式。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token number">6</span>abs<span class="token punctuation">(</span><span class="token number">5j</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token number">6.4031242374328485</span></code></pre><h2 id="02、all"><a href="#02、all" class="headerlink" title="02、all()"></a><strong>02、all()</strong></h2><blockquote><p><strong>描述：</strong>接受一个迭代器，如果迭代器(元组或列表)的所有元素都为真，那么返回True，否则返回False，元素除了是 0、空、None、False 外都算 True。</p><p><strong>注意：</strong>空元组、空列表返回值为True，这里要特别注意。</p><p><strong>语法：</strong>all(iterable)</p><p><strong>参数：</strong>iterable – 元组或列表</p></blockquote><pre class=" language-python"><code class="language-python">all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">False</span>all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">True</span>all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">False</span>all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#空列表为真</span><span class="token boolean">True</span> all<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#空元组为真</span><span class="token boolean">True</span></code></pre><h2 id="03、any"><a href="#03、any" class="headerlink" title="03、any()"></a><strong>03、any()</strong></h2><blockquote><p><strong>描述：</strong>接受一个迭代器，如果迭代器里有一个元素为真，那么返回True，否则返回False，元素除了是 0、空、None、False 外都算 True。</p><p><strong>语法：any</strong>(iterable)</p><p><strong>参数：</strong>iterable – 元组或列表</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">any<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">False</span>any<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">True</span>any<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token boolean">False</span>any<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 空列表</span><span class="token boolean">False</span>any<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 空元组</span><span class="token boolean">False</span></code></pre><h2 id="04、ascii"><a href="#04、ascii" class="headerlink" title="04、ascii()"></a><strong>04、ascii()</strong></h2><blockquote><p><strong>描述：</strong>ascii() 函数返回任何对象（字符串，元组，列表等）的可读版本。</p><p>ascii() 函数会将所有非 ascii 字符替换为转义字符：</p><p>å 将替换为 \xe5。</p><p><strong>语法：</strong>ascii(<em>object</em>)</p><p><strong>参数：*</strong>object–*对象，可以是元组、列表、字典、字符串、set()创建的集合。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">ascii<span class="token punctuation">(</span><span class="token string">'中国'</span><span class="token punctuation">)</span><span class="token string">"'\\u4e2d\\u56fd'"</span>ascii<span class="token punctuation">(</span><span class="token string">'新冠肺炎'</span><span class="token punctuation">)</span>"'\\u65b0\\u51a0\\u80ba\\uascii<span class="token punctuation">(</span><span class="token string">"My name is Ståle"</span><span class="token punctuation">)</span><span class="token string">"'My name is St\\xe5le'"</span><span class="token keyword">print</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#元组</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#列表</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token string">'？'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#字符串，非 ASCII字符，转义</span><span class="token string">'\uff1f'</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token string">"？"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#字典</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span></code></pre><p><strong>ASCII码表具体如下所示</strong></p><table><thead><tr><th><strong>Bin</strong>(二进制)</th><th><strong>Oct</strong>(八进制)</th><th><strong>Dec</strong>(十进制)</th><th><strong>Hex</strong>(十六进制)</th><th><strong>缩写/字符</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>0000 0000</td><td>00</td><td>0</td><td>0x00</td><td>NUL(null)</td><td>空字符</td></tr><tr><td>0000 0001</td><td>01</td><td>1</td><td>0x01</td><td>SOH(start of headline)</td><td>标题开始</td></tr><tr><td>0000 1010</td><td>012</td><td>10</td><td>0x0A</td><td>LF (NL line feed, new line)</td><td>换行键</td></tr><tr><td>0010 0100</td><td>044</td><td>36</td><td>0x24</td><td>$</td><td>美元符</td></tr><tr><td>0010 0101</td><td>045</td><td>37</td><td>0x25</td><td>%</td><td>百分号</td></tr><tr><td>0010 1010</td><td>052</td><td>42</td><td>0x2A</td><td>*</td><td>星号</td></tr><tr><td>0011 0010</td><td>062</td><td>50</td><td>0x32</td><td>2</td><td>字符2</td></tr><tr><td>0011 0111</td><td>067</td><td>55</td><td>0x37</td><td>7</td><td>字符7</td></tr><tr><td>0011 1000</td><td>070</td><td>56</td><td>0x38</td><td>8</td><td>字符8</td></tr><tr><td>0011 1001</td><td>071</td><td>57</td><td>0x39</td><td>9</td><td>字符9</td></tr><tr><td>0100 0000</td><td>0100</td><td>64</td><td>0x40</td><td>@</td><td>电子邮件符号</td></tr><tr><td>0100 0001</td><td>0101</td><td>65</td><td>0x41</td><td>A</td><td>大写字母A</td></tr><tr><td>0110 0101</td><td>0145</td><td>101</td><td>0x65</td><td>e</td><td>小写字母e</td></tr><tr><td>0110 1100</td><td>0154</td><td>108</td><td>0x6C</td><td>l</td><td>小写字母l</td></tr><tr><td>0110 1101</td><td>0155</td><td>109</td><td>0x6D</td><td>m</td><td>小写字母m</td></tr><tr><td>0110 1110</td><td>0156</td><td>110</td><td>0x6E</td><td>n</td><td>小写字母n</td></tr><tr><td>0110 1111</td><td>0157</td><td>111</td><td>0x6F</td><td>o</td><td>小写字母o</td></tr><tr><td>0111 0000</td><td>0160</td><td>112</td><td>0x70</td><td>p</td><td>小写字母p</td></tr><tr><td>0111 1110</td><td>0176</td><td>126</td><td>0x7E</td><td>~</td><td>波浪号</td></tr><tr><td>0111 1111</td><td>0177</td><td>127</td><td>0x7F</td><td>DEL (delete)</td><td>删除</td></tr></tbody></table><h2 id="05、bin"><a href="#05、bin" class="headerlink" title="05、bin()"></a><strong>05、bin()</strong></h2><blockquote><p><strong>描述</strong>：bin() 返回一个整数 int 或者长整数 long int 的二进制表示。将十进制转换为二进制</p><p><strong>语法：</strong>bin(x)</p><p><strong>参数：</strong>x – int 或者 long int 数字</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">bin<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token string">'0b10'</span>bin<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>'<span class="token number">0b10100</span>'</code></pre><h2 id="06、oct"><a href="#06、oct" class="headerlink" title="06、oct()"></a><strong>06、oct()</strong></h2><blockquote><p><strong>描述：</strong>将十进制转换为八进制</p><p><strong>语法：</strong>oct(x)</p><p><strong>参数：</strong>x – 整数。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">oct<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token string">'0o10'</span>oct<span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token string">'0o53'</span></code></pre><h2 id="07、hex"><a href="#07、hex" class="headerlink" title="07、hex()"></a><strong>07、hex()</strong></h2><blockquote><p><strong>描述：**</strong>hex()** 函数用于将10进制整数转换成16进制，以字符串形式表示。</p><p><strong>语法：</strong>hex(x)</p><p><strong>参数：</strong>x – 10进制整数。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">将十进制转换为十六进制hex<span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token string">'0x2b'</span><span class="token comment" spellcheck="true">#43等于2B</span>hex<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token string">'0xf'</span></code></pre><h2 id="08、bool"><a href="#08、bool" class="headerlink" title="08、bool()"></a><strong>08、bool()</strong></h2><blockquote><p><strong>描述：</strong>测试一个对象是True, 还是False.bool 是 int 的子类。</p><p><strong>语法：</strong>class bool([x])</p><p><strong>参数：</strong>x – 要进行转换的参数。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">bool<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">True</span>bool<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">False</span>issubclass<span class="token punctuation">(</span>bool<span class="token punctuation">,</span> int<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># bool 是 int 子类</span><span class="token boolean">True</span></code></pre><h2 id="09、bytes"><a href="#09、bytes" class="headerlink" title="09、bytes()"></a><strong>09、bytes()</strong></h2><blockquote><p><strong>描述：</strong>将一个字符串转换成字节类型</p><p><strong>语法：</strong>class bytes([source[, encoding[, errors]]])</p><p><strong>参数：</strong></p><ul><li><p>如果 source 为整数，则返回一个长度为 source 的初始化数组；</p></li><li><p>如果 source 为字符串，则按照指定的 encoding 将字符串转换为字节序列；</p></li><li><p>如果 source 为可迭代类型，则元素必须为[0 ,255] 中的整数；</p></li><li><p>如果 source 为与 buffer 接口一致的对象，则此对象也可以被用于初始化 bytearray。</p></li><li><p>如果没有输入任何参数，默认就是初始化数组为0个元素。</p><p><strong>案例：</strong></p></li></ul></blockquote><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"apple"</span>bytes<span class="token punctuation">(</span>s<span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>b<span class="token string">'apple'</span>bytes<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b<span class="token string">'\x01\x02\x03\x04'</span></code></pre><h2 id="10、str"><a href="#10、str" class="headerlink" title="10、str()"></a><strong>10、str()</strong></h2><blockquote><p><strong>描述：</strong>str() 函数将对象转化为适于人阅读的形式。将字符类型、数值类型等转换为字符串类型</p><p><strong>语法：</strong>class str(object=’’)</p><p><strong>参数：</strong>object – 对象。</p><p><strong>案例：</strong></p></blockquote><p>integ = 100</p><pre class=" language-python"><code class="language-python">str<span class="token punctuation">(</span>integ<span class="token punctuation">)</span><span class="token string">'100'</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'baidu'</span><span class="token punctuation">:</span> <span class="token string">'baidu.com'</span><span class="token punctuation">,</span> <span class="token string">'google'</span><span class="token punctuation">:</span> <span class="token string">'google.com'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>str<span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token string">"{'baidu': 'baidu.com', 'google': 'google.com'}"</span></code></pre><p> <strong>11、callable()</strong></p><blockquote><p><strong>描述：</strong>判断对象是否可以被调用，能被调用的对象就是一个callable 对象，对于函数、方法、lambda 函式、 类以及实现了 <strong><strong>call</strong></strong> 方法的类实例, 它都返回 True。</p><p><strong>语法：</strong>callable(object)</p><p><strong>参数：</strong>object – 对象</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">callable<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> ycallable<span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token boolean">True</span></code></pre><h2 id="12、chr"><a href="#12、chr" class="headerlink" title="12、chr()"></a><strong>12、chr()</strong></h2><blockquote><p><strong>描述：</strong>chr() 用一个范围在 range（256）内的（就是0～255）整数作参数，返回一个对应的字符。</p><p><strong>语法：</strong>chr(i)</p><p><strong>参数：</strong>i – 可以是10进制也可以是16进制的形式的数字。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">查看十进制整数对应的ASCII字符chr<span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token string">'A'</span>可以参考<span class="token number">4</span>案例中的表</code></pre><h2 id="13、ord"><a href="#13、ord" class="headerlink" title="13、ord()"></a><strong>13、ord()</strong></h2><blockquote><p><strong>描述：</strong>查看某个ascii对应的十进制数</p><p><strong>语法：</strong>ord(c)</p><p><strong>参数：</strong>c – 字符。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">ord<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token number">65</span>ord<span class="token punctuation">(</span><span class="token string">'~'</span><span class="token punctuation">)</span><span class="token number">126</span></code></pre><h2 id="14、classmethod"><a href="#14、classmethod" class="headerlink" title="14、classmethod()"></a><strong>14、classmethod()</strong></h2><blockquote><p><strong>描述：**</strong>classmethod** 修饰符对应的函数不需要实例化，不需要 self 参数，但第一个参数需要是表示自身类的 cls 参数，可以来调用类的属性，类的方法，实例化对象等。</p><p><strong>语法：</strong>classmethod</p><p><strong>参数：无</strong></p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Sample</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    bar <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>     @classmethod    <span class="token keyword">def</span> <span class="token function">fun2</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'fun2'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span>cls<span class="token punctuation">.</span>bar<span class="token punctuation">)</span>        cls<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fun1<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 调用 foo 方法</span>Sample<span class="token punctuation">.</span>fun2<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 不需要实例化</span>fun2<span class="token number">1</span>foo</code></pre><h2 id="15、compile"><a href="#15、compile" class="headerlink" title="15、compile()"></a><strong>15、compile()</strong></h2><blockquote><p><strong>描述：</strong>compile() 函数将一个字符串编译为字节代码。</p><p><strong>语法：</strong>compile(source, filename, mode[, flags[, dont_inherit]])</p><p><strong>参数：</strong></p><ul><li>source – 字符串或者AST（Abstract Syntax Trees）对象。。</li><li>filename – 代码文件名称，如果不是从文件读取代码则传递一些可辨认的值。</li><li>mode – 指定编译代码的种类。可以指定为 exec, eval, single。</li><li>flags – 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。。</li><li>flags和dont_inherit是用来控制编译源码时的标志</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">将字符串编译成python能识别或可以执行的代码，也可以将文字读成字符串再编译。s <span class="token operator">=</span> <span class="token string">"print('helloworld')"</span>r <span class="token operator">=</span> compile<span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"&lt;string>"</span><span class="token punctuation">,</span> <span class="token string">"exec"</span><span class="token punctuation">)</span>r<span class="token operator">&lt;</span>code object <span class="token operator">&lt;</span>module<span class="token operator">></span> at <span class="token number">0x000000000F819420</span><span class="token punctuation">,</span> file <span class="token string">"&lt;string>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token operator">></span><span class="token keyword">exec</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>helloworldstr <span class="token operator">=</span> <span class="token string">"for i in range(0,5): print(i)"</span> c <span class="token operator">=</span> compile<span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'exec'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 编译为字节代码对象 </span>c<span class="token operator">&lt;</span>code object <span class="token operator">&lt;</span>module<span class="token operator">></span> at <span class="token number">0x000001EB82C91ED0</span><span class="token punctuation">,</span> file <span class="token string">""</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token operator">></span><span class="token keyword">exec</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span></code></pre><h2 id="16、complex"><a href="#16、complex" class="headerlink" title="16、complex()"></a><strong>16、complex()</strong></h2><blockquote><p><strong>描述：</strong>创建一个复数</p><p><strong>语法：</strong>class complex([real[, imag]])</p><p><strong>参数：</strong></p><ul><li>real – int, long, float或字符串；</li><li>imag – int, long, float；</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">complex<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2j</span><span class="token punctuation">)</span> complex<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">0j</span><span class="token punctuation">)</span>complex<span class="token punctuation">(</span><span class="token string">"1+2j"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2j</span><span class="token punctuation">)</span></code></pre><h2 id="17、delattr"><a href="#17、delattr" class="headerlink" title="17、delattr()"></a><strong>17、delattr()</strong></h2><blockquote><p><strong>描述：</strong>删除对象的属性</p><p><strong>语法：</strong>delattr(object, name)</p><p><strong>参数：</strong></p><ul><li>object – 对象。</li><li>name – 必须是对象的属性。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Coordinate</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token number">10</span>    y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span>    z <span class="token operator">=</span> <span class="token number">0</span>point1 <span class="token operator">=</span> Coordinate<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x = '</span><span class="token punctuation">,</span>point1<span class="token punctuation">.</span>x<span class="token punctuation">)</span>x <span class="token operator">=</span>  <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'y = '</span><span class="token punctuation">,</span>point1<span class="token punctuation">.</span>y<span class="token punctuation">)</span>y <span class="token operator">=</span>  <span class="token operator">-</span><span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'z = '</span><span class="token punctuation">,</span>point1<span class="token punctuation">.</span>z<span class="token punctuation">)</span>z <span class="token operator">=</span>  <span class="token number">0</span>delattr<span class="token punctuation">(</span>Coordinate<span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--删除 z 属性后--'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'z = '</span><span class="token punctuation">,</span>point1<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 触发错误</span>AttributeError<span class="token punctuation">:</span> <span class="token string">'Coordinate'</span> object has no attribute <span class="token string">'z'</span>dir<span class="token punctuation">(</span>Coordinate<span class="token punctuation">)</span><span class="token punctuation">[</span>'__class__省略部分 <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span></code></pre><h2 id="18、dict"><a href="#18、dict" class="headerlink" title="18、dict()"></a><strong>18、dict()</strong></h2><blockquote><p><strong>描述：</strong>创建数据字典</p><p><strong>语法：</strong></p><p>class dict(**kwarg)</p><p>class dict(mapping, **kwarg)</p><p>class dict(iterable, **kwarg)</p><p><strong>参数：</strong></p><ul><li>**kwargs – 关键字</li><li>mapping – 元素的容器。</li><li>iterable – 可迭代对象。</li></ul><p><strong>案例：</strong></p></blockquote><p>#创建空字典</p><pre class=" language-python"><code class="language-python">dict<span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#传入关键字</span>dict<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> t<span class="token operator">=</span><span class="token string">'t'</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">:</span> <span class="token string">'t'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 映射函数方式来构造字典</span>dict<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token string">'three'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#可迭代对象方式来构造字典</span>dict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token string">'three'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">:</span></code></pre><h2 id="19、dir"><a href="#19、dir" class="headerlink" title="19、dir()"></a><strong>19、dir()</strong></h2><blockquote><p><strong>描述：**</strong>dir()** 函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。如果参数包含方法<strong>dir</strong>()，该方法将被调用。如果参数不包含<strong>dir</strong>()，该方法将最大限度地收集参数信息。</p><p><strong>语法：</strong>dir([object])</p><p><strong>参数：</strong>object – 对象、变量、类型。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">dir<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#  获得当前模块的属性列表</span><span class="token punctuation">[</span><span class="token string">'In'</span><span class="token punctuation">,</span> <span class="token string">'Out'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token string">'__'</span><span class="token punctuation">,</span> <span class="token string">'___'</span><span class="token punctuation">,</span> <span class="token string">'__builtin__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span> <span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'_dh'</span><span class="token punctuation">,</span> <span class="token string">'_i'</span><span class="token punctuation">,</span> <span class="token string">'_i1'</span><span class="token punctuation">,</span> <span class="token string">'_ih'</span><span class="token punctuation">,</span> <span class="token string">'_ii'</span><span class="token punctuation">,</span> <span class="token string">'_iii'</span><span class="token punctuation">,</span> <span class="token string">'_oh'</span><span class="token punctuation">,</span> <span class="token string">'exit'</span><span class="token punctuation">,</span> <span class="token string">'get_ipython'</span><span class="token punctuation">,</span> <span class="token string">'quit'</span><span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python">dir<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看列表的方法</span>dir<span class="token punctuation">(</span>list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看列表的方法</span><span class="token punctuation">[</span><span class="token string">'__add__'</span><span class="token punctuation">,</span> <span class="token string">'__class__'</span><span class="token punctuation">,</span> <span class="token string">'__contains__'</span><span class="token punctuation">,</span> <span class="token string">'__delattr__'</span><span class="token punctuation">,</span> <span class="token string">'__delitem__'</span><span class="token punctuation">,</span> <span class="token string">'__dir__'</span><span class="token punctuation">,</span> <span class="token string">'__str__'</span><span class="token punctuation">,</span> <span class="token string">'__subclasshook__'</span><span class="token punctuation">,</span> <span class="token string">'append'</span><span class="token punctuation">,</span> <span class="token string">'clear'</span><span class="token punctuation">,</span> <span class="token string">'copy'</span><span class="token punctuation">,</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token string">'extend'</span><span class="token punctuation">,</span> <span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token string">'insert'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span> <span class="token string">'remove'</span><span class="token punctuation">,</span> <span class="token string">'reverse'</span><span class="token punctuation">,</span> <span class="token string">'sort'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>dir<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取所有的方法</span><span class="token keyword">print</span><span class="token punctuation">(</span>dir<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取所有的方法</span><span class="token keyword">print</span><span class="token punctuation">(</span>dir<span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取所有的</span>不带参数时返回当前范围内的变量，方法和定义的类型列表；带参数时返回参数的属性，方法列表。</code></pre><h2 id="20、divmod"><a href="#20、divmod" class="headerlink" title="20、divmod()"></a><strong>20、divmod()</strong></h2><blockquote><p><strong>描述：</strong>divmod() 函数把除数和余数运算结果结合起来，返回一个包含商和余数的元组(a // b, a % b)。</p><p><strong>语法：</strong>divmod(a, b)</p><p><strong>参数：</strong>a: 数字–被除数</p><p>​     b: 数字–除数</p><p><strong>案例：</strong></p><pre class=" language-python"><code class="language-python">divmod<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>divmod<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre></blockquote><h2 id="21、enumerate"><a href="#21、enumerate" class="headerlink" title="21、enumerate()"></a><strong>21、enumerate()</strong></h2><blockquote><p><strong>描述：</strong>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。返回一个可以枚举的对象，该对象的next()方法将返回一个元组。</p><p><strong>语法：</strong>enumerate(sequence, [start=0])</p><p><strong>参数：</strong>sequence – 一个序列、迭代器或其他支持迭代对象。</p><p>​     start – 下标起始位置。</p><p><strong>案例：</strong></p></blockquote><p>L = [‘Spring’, ‘Summer’, ‘Fall’, ‘Winter’]</p><pre class=" language-python"><code class="language-python">enumerate<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token operator">&lt;</span>enumerate at <span class="token number">0x226e1ee1138</span><span class="token operator">></span><span class="token comment" spellcheck="true">#生成的额迭代器，无法直接查看</span>list<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#列表形式，可以看到内部结构，默认下标从0开始</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Spring'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Summer'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Fall'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Winter'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>L<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#下标从 1 开始</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Spring'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Summer'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Fall'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Winter'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token number">0</span> Spring<span class="token number">1</span> Summer<span class="token number">2</span> Fall<span class="token number">3</span> Winter<span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token number">1</span> Spring<span class="token number">2</span> Summer<span class="token number">3</span> Fall<span class="token number">4</span> Winters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token punctuation">,</span>v <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token number">2</span> a<span class="token number">3</span> b<span class="token number">4</span> c普通的 <span class="token keyword">for</span> 循环i <span class="token operator">=</span> <span class="token number">0</span>seq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token keyword">for</span> element <span class="token keyword">in</span> seq<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> seq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    i<span class="token operator">+=</span> <span class="token number">1</span><span class="token number">0</span> one<span class="token number">1</span> two<span class="token number">2</span> three在看一个普通循环的对比案例    <span class="token keyword">for</span> 循环使用 enumerateseq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> element <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token number">0</span> one<span class="token number">1</span> two<span class="token number">2</span> threeseq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> element <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>seq<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token number">2</span> one<span class="token number">3</span> two</code></pre><h2 id="22、eval"><a href="#22、eval" class="headerlink" title="22、eval()"></a><strong>22、eval()</strong></h2><blockquote><p><strong>描述：</strong>将字符串str 当成有效的表达式来求值并返回计算结果取出字符串中内容</p><p><strong>语法：</strong>eval(expression[, globals[, locals]])</p><p><strong>参数：</strong></p><ul><li>expression – 表达式。</li><li>globals – 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</li><li>locals – 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"1 + 3 +5"</span>eval<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token number">9</span><span class="token comment" spellcheck="true">#要统计图片的数量</span>str1 <span class="token operator">=</span> <span class="token string">"['https://ww1.sin5n.jpg', 'https://ww1.siqk4he.jpg']"</span>len<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">2</span>len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token number">5</span></code></pre><blockquote><p><strong>23、exec()</strong></p><p><strong>描述：</strong>执行储存在字符串或文件中的Python语句，相比于 eval，exec可以执行更复杂的 Python 代码。</p><p><strong>语法：</strong>exec(<em>obj**ect</em>, <em>globals</em>, <em>locals</em>)</p><p> <strong>参数：</strong></p><ul><li><em>obj<strong>e</strong>ct</em>– 要执行的表达式。</li><li>globals – 可选。包含全局参数的字典。</li><li>locals – 可选。包含局部参数的字典。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">执行字符串或compile方法编译过的字符串，没有返回值s <span class="token operator">=</span> <span class="token string">"print('helloworld')"</span>r <span class="token operator">=</span> compile<span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"&lt;string>"</span><span class="token punctuation">,</span> <span class="token string">"exec"</span><span class="token punctuation">)</span><span class="token keyword">exec</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>helloworldx <span class="token operator">=</span> <span class="token number">10</span>expr <span class="token operator">=</span> <span class="token triple-quoted-string string">"""z = 30sum = x + y + zprint(sum)"""</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">20</span>    <span class="token keyword">exec</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span>    <span class="token keyword">exec</span><span class="token punctuation">(</span>expr<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">exec</span><span class="token punctuation">(</span>expr<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">60</span><span class="token number">33</span><span class="token number">34</span></code></pre><h2 id="24、filter"><a href="#24、filter" class="headerlink" title="24、filter()"></a><strong>24、filter()</strong></h2><blockquote><p><strong>描述：**</strong>filter()** 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。</p><p>该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判断，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。</p><p> 过滤器，构造一个序列，等价于：[ item for item in iterables if function(item)]</p><p>在函数中设定过滤条件，逐一循环迭代器中的元素，将返回值为True时的元素留下，形成一个filter类型数据。</p><p> <strong>语法：</strong>filter(function, iterable)</p><p><strong>参数：</strong></p><ul><li>function – 判断函数。</li><li>iterable – 可迭代对象。</li></ul><p><strong>案例：</strong></p></blockquote><p>fil = filter(lambda x: x&gt;10,[1,11,2,45,7,6,13])</p><pre class=" language-python"><code class="language-python">fil <span class="token operator">&lt;</span>filter at <span class="token number">0x28b693b28c8</span><span class="token operator">></span>list<span class="token punctuation">(</span>fil<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">is_odd</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span>newlist <span class="token operator">=</span> filter<span class="token punctuation">(</span>is_odd<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>newlist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span></code></pre><h2 id="25、float"><a href="#25、float" class="headerlink" title="25、float()"></a><strong>25、float()</strong></h2><blockquote><p><strong>描述：</strong>将一个字符串或整数转换为浮点数</p><p><strong>语法：</strong>class float([x])</p><p><strong>参数：</strong>x – 整数或字符串</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">float<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token number">3.0</span>float<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 字符串</span> <span class="token number">123.0</span></code></pre><h2 id="26、format"><a href="#26、format" class="headerlink" title="26、format()"></a><strong>26、format()</strong></h2><blockquote><p><strong>描述：</strong>Python2.6 开始，新增了一种格式化字符串的函数 <strong>str.format()</strong>，它增强了字符串格式化的功能。基本语法是通过 <strong>{}</strong> 和 <strong>:</strong> 来代替以前的 <strong>%</strong> 。使用format()来格式化字符串时，使用在字符串中使用{}作为占位符，占位符的内容将引用format()中的参数进行替换。可以是位置参数、命名参数或者兼而有之。</p><p>format 函数可以接受不限个参数，位置可以不按顺序。</p><p><strong>语法：</strong>format(value, format_spec)</p><p><strong>参数：</strong></p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 位置参数</span><span class="token string">'{}:您{}购买的{}到了！请下楼取快递。'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'快递小哥'</span><span class="token punctuation">,</span><span class="token string">'淘宝'</span><span class="token punctuation">,</span><span class="token string">'快递'</span><span class="token punctuation">)</span><span class="token string">'快递小哥:您淘宝购买的快递到了！请下楼取快递。'</span><span class="token comment" spellcheck="true">#给批量客户发短息</span>n_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'马云'</span><span class="token punctuation">,</span><span class="token string">'马化腾'</span><span class="token punctuation">,</span><span class="token string">'麻子'</span><span class="token punctuation">,</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token string">'李彦宏'</span><span class="token punctuation">,</span><span class="token string">'二狗子'</span><span class="token punctuation">]</span><span class="token keyword">for</span> name <span class="token keyword">in</span> n_list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0}：您淘宝购买的快递到了！请下楼取快递！'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>马云：您淘宝购买的快递到了！请下楼取快递！马化腾：您淘宝购买的快递到了！请下楼取快递！麻子：您淘宝购买的快递到了！请下楼取快递！小红：您淘宝购买的快递到了！请下楼取快递！李彦宏：您淘宝购买的快递到了！请下楼取快递！二狗子：您淘宝购买的快递到了！请下楼取快递！<span class="token comment" spellcheck="true">#名字进行填充    </span><span class="token keyword">for</span> n <span class="token keyword">in</span> n_list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0}：您淘宝购买的快递到了！请下楼取快递！'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>马云：您淘宝购买的快递到了！请下楼取快递！马化腾：您淘宝购买的快递到了！请下楼取快递！<span class="token operator">*</span>麻子：您淘宝购买的快递到了！请下楼取快递！<span class="token operator">*</span>小红：您淘宝购买的快递到了！请下楼取快递！李彦宏：您淘宝购买的快递到了！请下楼取快递！二狗子：您淘宝购买的快递到了！请下楼取快递！<span class="token string">'{0}, {1} and {2}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'gao'</span><span class="token punctuation">,</span><span class="token string">'fu'</span><span class="token punctuation">,</span><span class="token string">'shuai'</span><span class="token punctuation">)</span><span class="token string">'gao, fu and shuai'</span>x<span class="token operator">=</span><span class="token number">3</span>y<span class="token operator">=</span><span class="token number">5</span><span class="token string">'{0}+{1}={2}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 命名参数</span><span class="token string">'{name1}, {name2} and {name3}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name1<span class="token operator">=</span><span class="token string">'gao'</span><span class="token punctuation">,</span> name2<span class="token operator">=</span><span class="token string">'fu'</span><span class="token punctuation">,</span> name3<span class="token operator">=</span><span class="token string">'shuai'</span><span class="token punctuation">)</span><span class="token string">'gao, fu and shuai'</span><span class="token comment" spellcheck="true"># 混合位置参数、命名参数</span><span class="token string">'{name1}, {0} and {name3}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"shuai"</span><span class="token punctuation">,</span> name1<span class="token operator">=</span><span class="token string">'fu'</span><span class="token punctuation">,</span> name3<span class="token operator">=</span><span class="token string">'gao'</span><span class="token punctuation">)</span><span class="token string">'fu, shuai and gao'</span><span class="token comment" spellcheck="true">#for循环进行批量处理</span><span class="token punctuation">[</span><span class="token string">"vec_{0}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'vec_0'</span><span class="token punctuation">,</span> <span class="token string">'vec_1'</span><span class="token punctuation">,</span> <span class="token string">'vec_2'</span><span class="token punctuation">,</span> <span class="token string">'vec_3'</span><span class="token punctuation">,</span> <span class="token string">'vec_4'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'f_{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> list<span class="token punctuation">(</span><span class="token string">'abcde'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'f_a'</span><span class="token punctuation">,</span> <span class="token string">'f_b'</span><span class="token punctuation">,</span> <span class="token string">'f_c'</span><span class="token punctuation">,</span> <span class="token string">'f_d'</span><span class="token punctuation">,</span></code></pre><h2 id="27、frozenset"><a href="#27、frozenset" class="headerlink" title="27、frozenset()"></a><strong>27、frozenset()</strong></h2><blockquote><p><strong>描述：**</strong>frozenset()** 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。</p><p><strong>语法：</strong>class frozenset([iterable])</p><p><strong>参数：</strong>iterable – 可迭代的对象，比如列表、字典、元组等等。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">创建一个不可修改的集合。frozenset<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>frozenset<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="28、getattr"><a href="#28、getattr" class="headerlink" title="28、getattr()"></a><strong>28、getattr()</strong></h2><blockquote><p><strong>描述：</strong>获取对象的属性</p><p><strong>语法：</strong>getattr(object, name[, default])</p><p><strong>参数：</strong></p><ul><li>object – 对象。</li><li>name – 字符串，对象属性。</li><li>default – 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Age</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>      age <span class="token operator">=</span> <span class="token number">1</span>my_a <span class="token operator">=</span> Age<span class="token punctuation">(</span><span class="token punctuation">)</span>getattr<span class="token punctuation">(</span>my_a<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取属性 bar 值</span> <span class="token number">1</span>getattr<span class="token punctuation">(</span>my_a<span class="token punctuation">,</span> <span class="token string">'age1'</span><span class="token punctuation">)</span><span class="token string">'Age'</span> object has no attribute <span class="token string">'age1'</span></code></pre><h2 id="29、gobals"><a href="#29、gobals" class="headerlink" title="29、gobals()"></a><strong>29、gobals()</strong></h2><blockquote><p><strong>描述：</strong> 函数会以字典类型返回当前位置的全部全局变量。</p><p><strong>语法：</strong>globals()</p><p><strong>参数：无</strong></p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token string">'runoob'</span><span class="token keyword">print</span><span class="token punctuation">(</span>globals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># globals 函数返回一个全局变量的字典，包括所有导入的变量</span></code></pre><h2 id="30、hasattr"><a href="#30、hasattr" class="headerlink" title="30、hasattr()"></a><strong>30、hasattr()</strong></h2><blockquote><p><strong>描述：</strong>函数用于判断对象是否包含对应的属性。</p><p><strong>语法：</strong>hasattr(object, name)</p><p><strong>参数：</strong></p><ul><li>object – 对象。</li><li>name – 字符串，属性名。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Coordinate</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token number">10</span>    y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span>    z <span class="token operator">=</span> <span class="token number">0</span>point1 <span class="token operator">=</span> Coordinate<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>hasattr<span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span>hasattr<span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span>hasattr<span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span>hasattr<span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">'no'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 没有该属性</span>Falseclass Coordinate<span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token number">10</span>    y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span>    z <span class="token operator">=</span> <span class="token number">0</span> point1 <span class="token operator">=</span> Coordinate<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>hasattr<span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Trueprint<span class="token punctuation">(</span>hasattr<span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Trueprint<span class="token punctuation">(</span>hasattr<span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Trueprint<span class="token punctuation">(</span>hasattr<span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">'no'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 没有该属性False</span></code></pre><h2 id="31、hash"><a href="#31、hash" class="headerlink" title="31、hash()"></a><strong>31、hash()</strong></h2><blockquote><p><strong>描述：</strong>返回对象的哈希值</p><p><strong>语法：</strong>hash(object)</p><p><strong>参数：</strong>object – 对象；</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">hash<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数可以应用于数字、字符串和对象，不能直接应用于 list、set、dictionary。在 hash<span class="token punctuation">(</span><span class="token punctuation">)</span> 对对象使用时，所得的结果不仅和对象的内容有关，还和对象的 id<span class="token punctuation">(</span><span class="token punctuation">)</span>，也就是内存地址有关。<span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>i <span class="token operator">=</span> i<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> Test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>hash<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>hash<span class="token punctuation">(</span>point1<span class="token punctuation">)</span><span class="token number">16294976</span>hash<span class="token punctuation">(</span><span class="token string">'返回对象的哈希值'</span><span class="token punctuation">)</span><span class="token number">4919828709165481160</span>hash<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数的用途hash<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数的对象字符不管有多长，返回的 hash 值都是固定长度的，也用于校验程序在传输过程中是否被第三方（木马）修改，如果程序（字符）在传输过程中被修改hash值即发生变化，如果没有被修改，则 hash 值和原始的 hash 值吻合，只要验证 hash 值是否匹配即可验证程序是否带木马（病毒）。name1<span class="token operator">=</span><span class="token string">'正常程序代码'</span>name2<span class="token operator">=</span><span class="token string">'正常程序代码带病毒'</span><span class="token keyword">print</span><span class="token punctuation">(</span>hash<span class="token punctuation">(</span>name1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># -3048480827538126659</span><span class="token keyword">print</span><span class="token punctuation">(</span>hash<span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># -9065726187242961328</span></code></pre><h2 id="32、help"><a href="#32、help" class="headerlink" title="32、help()"></a><strong>32、help()</strong></h2><blockquote><p><strong>描述：</strong>返回对象的帮助文档</p><p><strong>语法：</strong>help([object])</p><p><strong>参数：</strong>object – 对象</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">help<span class="token punctuation">(</span><span class="token string">'sys'</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 查看 sys 模块的帮助</span>help<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 查看 str 数据类型的帮助</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>help<span class="token punctuation">(</span>a<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 查看列表 list 帮助信息</span>help<span class="token punctuation">(</span>a<span class="token punctuation">.</span>append<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 显示list的append方法的帮助</span></code></pre><h2 id="33-、id"><a href="#33-、id" class="headerlink" title="33 、id()"></a><strong>33 、id()</strong></h2><blockquote><p><strong>描述：**</strong>id()** 函数返回对象的唯一标识符，标识符是一个整数。CPython 中 <strong>id()</strong> 函数用于获取对象的内存地址。</p><p><strong>语法：</strong>id([object])</p><p><strong>参数：</strong>object – 对象。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">返回对象的内存地址a <span class="token operator">=</span> <span class="token string">'runoob'</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">260316720</span></code></pre><h2 id="34、input"><a href="#34、input" class="headerlink" title="34、input()"></a><strong>34、input()</strong></h2><blockquote><p><strong>描述：</strong>Python3.x 中 input() 函数接受一个标准输入数据，返回为 string 类型。获取用户输入内容</p><p><strong>语法：</strong>input([prompt])</p><p><strong>参数：</strong>prompt: 提示信息</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"input:"</span><span class="token punctuation">)</span>input<span class="token punctuation">:</span><span class="token number">1234</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">123</span></code></pre><h2 id="35、int"><a href="#35、int" class="headerlink" title="35、int()"></a><strong>35、int()</strong></h2><blockquote><p><strong>描述：</strong>int() 函数用于将一个字符串或数字转换为整型。 x可能为字符串或数值，将x 转换为一个普通整数。如果参数是字符串，那么它可能包含符号和小数点。如果超出了普通整数的表示范围，一个长整数被返回。</p><p><strong>语法：</strong>int(x, base =10)</p><p><strong>参数：</strong></p><ul><li>x – 字符串或数字。</li><li>base – 进制数，默认十进制。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">int<span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token number">18</span>int<span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">12</span></code></pre><h2 id="36、isinstance"><a href="#36、isinstance" class="headerlink" title="36、isinstance()"></a><strong>36、isinstance()</strong></h2><blockquote><p><strong>描述：</strong>isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()。</p><p>isinstance() 与 type() 区别：</p><p>type() 不会认为子类是一种父类类型，不考虑继承关系。</p><p>isinstance() 会认为子类是一种父类类型，考虑继承关系。</p><p>如果要判断两个类型是否相同推荐使用 isinstance()。</p><p> <strong>语法：</strong>isinstance(object, classinfo)</p><p><strong>参数：</strong></p><ul><li>object – 实例对象。</li><li>classinfo – 可以是直接或间接类名、基本类型或者由它们组成的元组。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">2</span>isinstance <span class="token punctuation">(</span>a<span class="token punctuation">,</span>int<span class="token punctuation">)</span><span class="token boolean">True</span>isinstance <span class="token punctuation">(</span>a<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token boolean">False</span>isinstance <span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>int<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#是元组中的一个返回 True</span><span class="token boolean">True</span></code></pre><h2 id="37、issubclass"><a href="#37、issubclass" class="headerlink" title="37、issubclass()"></a><strong>37、issubclass()</strong></h2><blockquote><p><strong>描述：**</strong>issubclass()** 方法用于判断参数 class 是否是类型参数 classinfo 的子类。如果class是classinfo类的子类，返回True：</p><p><strong>语法：</strong>issubclass(class, classinfo)</p><p><strong>参数：</strong></p><ul><li>class – 类。</li><li>classinfo – 类。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span>issubclass<span class="token punctuation">(</span>B<span class="token punctuation">,</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回 True</span></code></pre><h2 id="38、iter"><a href="#38、iter" class="headerlink" title="38、iter()"></a><strong>38、iter()</strong></h2><blockquote><p><strong>描述：**</strong>iter()** 函数用来生成迭代器。</p><p><strong>语法：</strong>iter(object[, sentinel])</p><p><strong>参数：</strong></p><ul><li>object – 支持迭代的集合对象。</li><li>sentinel – 如果传递了第二个参数，则参数 object 必须是一个可调用的对象（如，函数），此时，iter 创建了一个迭代器对象，每次调用这个迭代器对象的<strong>next</strong>()方法时，都会调用 object。返回一个可迭代对象, sentinel可省略，sentinel 理解为迭代对象的哨兵，一旦迭代到此元素，立即终止：</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>iter<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token operator">&lt;</span>list_iterator at <span class="token number">0xf8359e8</span><span class="token operator">></span><span class="token keyword">for</span> i <span class="token keyword">in</span> iter<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">3</span><span class="token number">5</span></code></pre><h2 id="39、len"><a href="#39、len" class="headerlink" title="39、len()"></a><strong>39、len()</strong></h2><blockquote><p><strong>描述：</strong>len() 函数返回对象（字符、列表、元组等）长度或项目个数。</p><p><strong>语法：</strong>len(s)</p><p><strong>参数：</strong>s – 对象。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#字典的长度</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span>len<span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token number">2</span><span class="token comment" spellcheck="true">#字符串长度</span>s<span class="token operator">=</span><span class="token string">'aasdf'</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token number">5</span><span class="token comment" spellcheck="true">#列表元素个数</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>len<span class="token punctuation">(</span>l<span class="token punctuation">)</span></code></pre><h2 id="40、list"><a href="#40、list" class="headerlink" title="40、list()"></a><strong>40、list()</strong></h2><blockquote><p><strong>描述：</strong>list() 函数创建列表或者用于将元组转换为列表。</p><p><strong>语法：</strong>list( tup )</p><p><strong>参数：</strong>tup – 要转换为列表的元组。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">atuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'xyz'</span><span class="token punctuation">,</span> <span class="token string">'zara'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">)</span>aList <span class="token operator">=</span> list<span class="token punctuation">(</span>atuple<span class="token punctuation">)</span>aList<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'xyz'</span><span class="token punctuation">,</span> <span class="token string">'zara'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">]</span></code></pre><h2 id="41、map"><a href="#41、map" class="headerlink" title="41、map()"></a><strong>41、map()</strong></h2><blockquote><p><strong>描述：</strong>map() 会根据提供的函数对指定序列做映射。返回一个将 function 应用于 iterable 中每一项并输出其结果的迭代器</p><p><strong>语法：</strong>map(function, iterable, …)</p><p><strong>参数：</strong></p><ul><li>function – 函数</li><li>iterable – 一个或多个序列</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 计算平方数</span>    <span class="token keyword">return</span> x <span class="token operator">**</span> <span class="token number">2</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>square<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 计算列表各个元素的平方</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用 lambda 匿名函数</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 提供了两个列表，对相同位置的列表数据进行相加</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span></code></pre><h2 id="42、max"><a href="#42、max" class="headerlink" title="42、max()"></a><strong>42、max()</strong></h2><blockquote><p><strong>描述：</strong>max() 方法返回给定参数的最大值，参数可以为序列。</p><p><strong>语法：</strong>max( x, y, z, …. )</p><p><strong>参数：</strong></p><ul><li>x – 数值表达式。</li><li>y – 数值表达式。</li><li>z – 数值表达式。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">最大值：max<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">4</span>di  <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'b1'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span>max<span class="token punctuation">(</span>di<span class="token punctuation">)</span><span class="token string">'c'</span></code></pre><h2 id="43、min"><a href="#43、min" class="headerlink" title="43、min()"></a><strong>43、min()</strong></h2><blockquote><p><strong>描述：</strong>min() 方法返回给定参数的最小值，参数可以为序列。</p><p><strong>语法：</strong>min( x, y, z, …. )</p><p><strong>参数：</strong></p><ul><li>x – 数值表达式。</li><li>y – 数值表达式。</li><li>z – 数值表达式。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">min<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token number">80</span>min<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">80</span></code></pre><h2 id="44、memoryview"><a href="#44、memoryview" class="headerlink" title="44、memoryview()"></a><strong>44、memoryview()</strong></h2><blockquote><p><strong>描述：**</strong>memoryview()** 函数返回给定参数的内存查看对象(Momory view)。返回由给定实参创建的“内存视图”对象， Python 代码访问一个对象的内部数据，只要该对象支持缓冲区协议 而无需进行拷贝</p><p><strong>语法：</strong>memoryview(obj)</p><p><strong>参数：</strong>obj – 对象</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">v <span class="token operator">=</span> memoryview<span class="token punctuation">(</span>bytearray<span class="token punctuation">(</span><span class="token string">"abcefg"</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token number">98</span>v<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token number">98</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>memory at <span class="token number">0x0000028B68E26AC8</span><span class="token operator">></span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token string">'bce'</span></code></pre><h2 id="45、next"><a href="#45、next" class="headerlink" title="45、next()"></a><strong>45、next()</strong></h2><blockquote><p><strong>描述：**</strong>next()** 返回迭代器的下一个项目。next() 函数要和生成迭代器的iter() 函数一起使用。</p><p><strong>语法：</strong>next(iterator[, default])</p><p><strong>参数：</strong></p><ul><li>iterator – 可迭代对象</li><li>default – 可选，用于设置在没有下一个元素时返回该默认值，如果不设置，又没有下一个元素则会触发 StopIteration 异常。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">it <span class="token operator">=</span> iter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>next<span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token number">5</span>next<span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token number">3</span>next<span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token number">4</span></code></pre><h2 id="46、object"><a href="#46、object" class="headerlink" title="46、object()"></a><strong>46、object()</strong></h2><blockquote><p><strong>描述：</strong>Object类是Python中所有类的基类，如果定义一个类时没有指定继承哪个类，则默认继承object类。返回一个没有特征的新对象。object 是所有类的基类。</p><p><strong>语法：</strong>object()</p><p><strong>参数：无</strong></p><p><strong>案例：无</strong></p></blockquote><h2 id="47、open"><a href="#47、open" class="headerlink" title="47、open()"></a><strong>47、open()</strong></h2><blockquote><p><strong>描述：</strong>open() 函数用于打开一个文件，创建一个 <strong>file</strong> 对象，相关的方法才可以调用它进行读写。</p><p><strong>语法：</strong>open(name[, mode[, buffering]])</p><p><strong>参数：</strong></p><ul><li>name : 一个包含了你要访问的文件名称的字符串值。</li><li>mode : mode 决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</li><li>buffering : 如果 buffering 的值被设为 0，就不会有寄存。如果 buffering 的值取 1，访问文件时会寄存行。如果将 buffering 的值设为大于 1 的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。</li></ul></blockquote><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><blockquote><p><strong>file 对象方法</strong></p><p><strong>file.read([size])</strong>：size 未指定则返回整个文件，如果文件大小 &gt;2 倍内存则有问题，f.read()读到文件尾时返回””(空字串)。</p><p><strong>file.readline()</strong>：返回一行。</p><p><strong>file.readlines([size])</strong> ：返回包含size行的列表, size 未指定则返回全部行。</p><p><strong>for line in f: print（line ）</strong>：通过迭代器访问。</p><p><strong>f.write(“hello\n”)</strong>：如果要写入字符串以外的数据,先将他转换为字符串。</p><p><strong>f.tell()</strong>：返回一个整数,表示当前文件指针的位置(就是到文件头的比特数)。</p><p><strong>f.seek(偏移量,[起始位置])</strong>：用来移动文件指针。</p><ul><li>偏移量: 单位为比特，可正可负</li><li>起始位置: 0 - 文件头, 默认值; 1 - 当前位置; 2 - 文件尾</li></ul><p><strong>f.close()</strong> 关闭文件</p></blockquote><p><strong>案例：</strong></p><pre class=" language-python"><code class="language-python">f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#打开文件</span>data<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#文件操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#关闭文件</span></code></pre><h2 id="48、pow"><a href="#48、pow" class="headerlink" title="48、pow()"></a><strong>48、pow()</strong></h2><blockquote><p><strong>描述：</strong>pow()方法返回 xy（x的y次方） 的值。函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z</p><p><strong>语法：</strong>pow(x, y[, z])</p><p><strong>参数：</strong></p><ul><li>x – 数值表达式。</li><li>y – 数值表达式。</li><li>z – 数值表达式。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">pow<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">100</span>pow<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token number">4</span>等价于<span class="token number">4</span><span class="token operator">**</span><span class="token number">3</span><span class="token operator">%</span><span class="token number">5</span> </code></pre><h2 id="49、print"><a href="#49、print" class="headerlink" title="49、print()"></a><strong>49、print()</strong></h2><blockquote><p><strong>描述：</strong>打印对象，此函数不解释</p><p><strong>语法：</strong></p><p><strong>参数：</strong></p><p><strong>案例：</strong></p></blockquote><h2 id="50、property"><a href="#50、property" class="headerlink" title="50、property()"></a><strong>50、property()</strong></h2><blockquote><p><strong>描述：**</strong>property()** 函数的作用是在新式类中返回属性值。</p><p><strong>语法：</strong>class property([fget[, fset[, fdel[, doc]]]])</p><p><strong>参数：</strong></p><ul><li>fget – 获取属性值的函数</li><li>fset – 设置属性值的函数</li><li>fdel – 删除属性值函数</li><li>doc – 属性描述信息</li></ul><p><strong>案例：</strong></p></blockquote><p>暂不解释</p><h2 id="51、range"><a href="#51、range" class="headerlink" title="51、range()"></a><strong>51、range()</strong></h2><blockquote><p><strong>描述：</strong>range() 函数可创建一个整数列表，一般用在 for 循环中。</p><p><strong>语法：</strong>range(start, stop[, step])</p><p><strong>参数：</strong></p><ul><li><p>start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</p></li><li><p>stop: 计数到 stop 结束，但不包括 stop。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</p></li><li><p>step：步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</p><p><strong>案例：</strong></p></li></ul></blockquote><pre class=" language-python"><code class="language-python">list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 从 1 开始到 11</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span></code></pre><h2 id="52、reversed"><a href="#52、reversed" class="headerlink" title="52、reversed()"></a><strong>52、reversed()</strong></h2><blockquote><p><strong>描述：</strong>reversed 函数返回一个反转的迭代器。</p><p><strong>语法：</strong>reversed(seq)</p><p><strong>参数：</strong>seq – 要转换的序列，可以是 tuple, string, list 或 range。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#反转列表</span>rev <span class="token operator">=</span> reversed<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>list<span class="token punctuation">(</span>rev<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> rev<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">3</span><span class="token number">2</span><span class="token number">4</span><span class="token number">1</span> <span class="token comment" spellcheck="true">#反转字符串</span>rev <span class="token operator">=</span> reversed<span class="token punctuation">(</span><span class="token string">'我爱中国'</span><span class="token punctuation">)</span>list<span class="token punctuation">(</span>rev<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'国'</span><span class="token punctuation">,</span> <span class="token string">'中'</span><span class="token punctuation">,</span> <span class="token string">'爱'</span><span class="token punctuation">,</span> <span class="token string">'我'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> rev<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>国中爱</code></pre><h2 id="53、round"><a href="#53、round" class="headerlink" title="53、round()"></a><strong>53、round()</strong></h2><blockquote><p><strong>描述：**</strong>round()** 函数返回浮点数x的四舍五入值。</p><p><strong>语法：</strong>round( x [, n]  )</p><p><strong>参数：</strong></p><ul><li>x – 数值表达式。</li><li>n –代表小数点后保留几位</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">round<span class="token punctuation">(</span><span class="token number">10.0222222</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">10.022</span></code></pre><h2 id="54、set"><a href="#54、set" class="headerlink" title="54、set()"></a><strong>54、set()</strong></h2><blockquote><p><strong>描述：**</strong>set()** 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。</p><p><strong>语法：</strong>class set([iterable])</p><p><strong>参数：</strong>iterable – 可迭代对象对象；</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#返回一个set对象，可实现去重：</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>set<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span></code></pre><h2 id="55、slice"><a href="#55、slice" class="headerlink" title="55、slice()"></a><strong>55、slice()</strong></h2><blockquote><p><strong>描述：**</strong>slice()** 函数实现切片对象，主要用在切片操作函数里的参数传递。返回一个表示由 range(start, stop, step) 所指定索引集的 slice对象</p><p><strong>语法：</strong></p><p>class slice(stop)</p><p>class slice(start, stop[, step])</p><p><strong>参数：</strong></p><ul><li>start – 起始位置</li><li>stop – 结束位置</li><li>step – 间距</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>a<span class="token punctuation">[</span>slice<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#等价于a[0:5:2]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><h2 id="56、sorted"><a href="#56、sorted" class="headerlink" title="56、sorted()"></a><strong>56、sorted()</strong></h2><blockquote><p><strong>描述：**</strong>sorted()** 函数对所有可迭代的对象进行排序操作。</p><p>sort 与 sorted 区别：</p><p>sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作；list 的 sort 方法返回的是对已经存在的列表进行操作，无返回值，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。</p><p><strong>语法：</strong>sorted(iterable,  key=None, reverse=False)#cmp 3.x已经没有了</p><p><strong>参数：</strong></p><ul><li>iterable – 可迭代对象。</li><li>key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li>reverse – 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>b <span class="token operator">=</span> sorted<span class="token punctuation">(</span>a<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 保留原列表</span>a <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#利用key</span>L<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>sorted<span class="token punctuation">(</span>L<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#按年龄排序</span>students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'jane'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'dave'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>sorted<span class="token punctuation">(</span>students<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'dave'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'jane'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#按降序</span>sorted<span class="token punctuation">(</span>students<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'jane'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'dave'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#降序排列</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>sorted<span class="token punctuation">(</span>a<span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><h2 id="57、staticmethod"><a href="#57、staticmethod" class="headerlink" title="57、staticmethod"></a><strong>57、staticmethod</strong></h2><blockquote><p><strong>描述：</strong>staticmethod 返回函数的静态方法。该方法不强制要求传递参数，如下声明一个静态方法：</p><p><strong>语法：</strong></p><p>class C(object):</p><p>  @staticmethod</p><p>  def f(arg1, arg2, …):</p><p>​    …</p><p>以上实例声明了静态方法 <strong>f</strong>，从而可以实现实例化使用 <strong>C().f()</strong>，当然也可以不实例化调用该方法 <strong>C.f()</strong>。</p><p><strong>参数：</strong>无</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'runoob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>C<span class="token punctuation">.</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true"># 静态方法无需实例化</span>cobj <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token punctuation">)</span>cobj<span class="token punctuation">.</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 也可以实例化后调用</span></code></pre><h2 id="58-、str"><a href="#58-、str" class="headerlink" title="58 、str()"></a><strong>58 、str()</strong></h2><blockquote><p><strong>描述：</strong>返回一个 str版本的 object，str 是内置字符串 class</p><p><strong>语法：</strong>class str(object=’’)</p><p><strong>参数：</strong>object – 对象。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'runoob'</span><span class="token punctuation">:</span> <span class="token string">'runoob.com'</span><span class="token punctuation">,</span> <span class="token string">'google'</span><span class="token punctuation">:</span> <span class="token string">'google.com'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>str<span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token string">"{'google': 'google.com', 'runoob': 'runoob.com'}"</span></code></pre><h2 id="59、sum"><a href="#59、sum" class="headerlink" title="59、sum()"></a><strong>59、sum()</strong></h2><blockquote><p><strong>描述：**</strong>sum()** 方法对系列进行求和计算。</p><p><strong>语法：</strong>sum(iterable[, start])</p><p><strong>参数：</strong></p><ul><li>iterable – 可迭代对象，如：列表、元组、集合。</li><li>start – 指定相加的参数，如果没有设置这个值，默认为0。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>sum<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">11</span>sum<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#求和的初始值为10</span><span class="token number">21</span></code></pre><h2 id="60、super（）"><a href="#60、super（）" class="headerlink" title="60、super（）"></a><strong>60、super（）</strong></h2><blockquote><p><strong>描述：**</strong>super()** 函数是用于调用父类(超类)的一个方法。</p><p>super 是用来解决多重继承问题的，直接用类名调用父类方法在使用单继承的时候没问题，但是如果使用多继承，会涉及到查找顺序（MRO）、重复调用（钻石继承）等种种问题。</p><p>MRO 就是类的方法解析顺序表, 其实也就是继承父类方法时的顺序表。</p><p> <strong>语法：</strong>super(type[, object-or-type])</p><p> <strong>参数：</strong></p><ul><li><p>type – 类。</p></li><li><p>object-or-type – 类，一般是 self</p><p><strong>案例：</strong></p></li></ul></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>         y <span class="token operator">=</span> x<span class="token operator">+</span><span class="token number">1</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>x<span class="token punctuation">)</span>b <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span><span class="token number">3</span></code></pre><h2 id="61、tuple"><a href="#61、tuple" class="headerlink" title="61、tuple()"></a><strong>61、tuple()</strong></h2><blockquote><p><strong>描述：</strong> 元组 tuple() 函数将列表转换为元组。</p><p><strong>语法：</strong>tuple( iterable )</p><p><strong>参数：</strong>iterable – 要转换为元组的可迭代序列。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">tuple<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>tuple<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#针对字典 会返回字典的key组成的tuple</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span></code></pre><h2 id="62、type"><a href="#62、type" class="headerlink" title="62、type()"></a><strong>62、type()</strong></h2><blockquote><p><strong>描述：</strong>type() 函数如果你只有第一个参数则返回对象的类型，三个参数返回新的类型对象。</p><p>isinstance() 与 type() 区别：</p><ul><li>type() 不会认为子类是一种父类类型，不考虑继承关系。</li><li>isinstance() 会认为子类是一种父类类型，考虑继承关系。</li></ul><p>如果要判断两个类型是否相同推荐使用 isinstance()。</p><p> <strong>语法：</strong></p><p>type(object)</p><p>type(name, bases, dict)</p><p> <strong>参数：</strong></p><ul><li>name – 类的名称。</li><li>bases – 基类的元组。</li><li>dict – 字典，类内定义的命名空间变量。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">type<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>listtype<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token string">'zero'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>dictx <span class="token operator">=</span> <span class="token number">1</span>          type<span class="token punctuation">(</span> x <span class="token punctuation">)</span> <span class="token operator">==</span> int    <span class="token comment" spellcheck="true"># 判断类型是否相等</span><span class="token boolean">True</span><span class="token comment" spellcheck="true"># 三个参数</span><span class="token keyword">class</span> <span class="token class-name">X</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">1</span>X <span class="token operator">=</span> type<span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dict<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 产生一个新的类型 X</span>X __main_</code></pre><h2 id="63、zip"><a href="#63、zip" class="headerlink" title="63、zip()"></a><strong>63、zip()</strong></h2><blockquote><p><strong>描述：**</strong>zip()** 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。</p><p>我们可以使用 list() 转换来输出列表。</p><p>如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 ***** 号操作符，可以将元组解压为列表。</p><p><strong>语法：</strong>zip([iterable, …])</p><p><strong>参数：</strong>iterable 一个或多个迭代器</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">创建一个聚合了来自每个可迭代对象中的元素的迭代器：x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#搭配for循环，数字与字符串组合 </span>a <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>b <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token string">'abcde'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>str<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'a0'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'c2'</span><span class="token punctuation">,</span> <span class="token string">'d3'</span><span class="token punctuation">,</span> <span class="token string">'e4'</span><span class="token punctuation">]</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> zip<span class="token punctuation">(</span>list1<span class="token punctuation">,</span>list2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'--'</span><span class="token punctuation">,</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token number">2</span> <span class="token number">5</span> <span class="token operator">-</span><span class="token operator">-</span> <span class="token number">10</span><span class="token number">3</span> <span class="token number">6</span> <span class="token operator">-</span><span class="token operator">-</span> <span class="token number">18</span><span class="token number">4</span> <span class="token number">7</span> <span class="token operator">-</span><span class="token operator">-</span> <span class="token number">28</span><span class="token comment" spellcheck="true">#元素个数与最短的列表一致</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>x<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#与 zip 相反，zip(* ) 可理解为解压，返回二维矩阵式</span>a1<span class="token punctuation">,</span> a2 <span class="token operator">=</span> zip<span class="token punctuation">(</span><span class="token operator">*</span>zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>          a1<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>a2<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python知识 </tag>
            
            <tag> python函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浪淘沙·把酒祝东风</title>
      <link href="/posts/c1bc.html"/>
      <url>/posts/c1bc.html</url>
      
        <content type="html"><![CDATA[<h1 id="浪淘沙·把酒祝东风"><a href="#浪淘沙·把酒祝东风" class="headerlink" title="浪淘沙·把酒祝东风"></a>浪淘沙·把酒祝东风</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​            浪淘沙·把酒祝东风</p><p>​                                                                宋·欧阳修</p><p>把酒祝东风，且共从容。垂杨紫陌洛城东。总是当时携手处，游遍芳丛。<br>聚散苦匆匆，此恨无穷。今年花胜去年红。可惜明年花更好，知与谁同？    </p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><ul><li>端起酒杯向东风祈祷，请你再留些时日不要匆匆离去。洛阳城东郊外的小道已是柳枝满垂。大多是我们去年携手同游的地方，我们游遍了姹紫嫣红的花丛。</li><li>人生的欢聚与别离总是如此短暂，离别的怨恨久久激荡在我的心田。今年的花红胜过去年，明年的花儿肯定会更加美好，可惜不知那时将和谁一起游览？</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li><p>把酒：端着酒杯。</p></li><li><p>从容：留恋，不舍。</p></li><li><p>紫陌：紫路。洛阳曾是东周、东汉的都城，据说当时曾用紫色土</p><p>铺路，故名。此指洛阳的道路。洛城：指洛阳。</p></li><li><p>总是：大多是，都是。</p></li><li><p>匆匆：形容时间匆促。</p></li><li><p>“可惜”两句：杜甫《九日蓝田崔氏庄》诗：“明年此会知谁健，醉把茱萸仔细看。</p></li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><p>​        词作首先写道：“把酒祝东风，且共从容”。这两句源于司空图《酒泉子》中的“黄昏把酒祝东风，且从容”。然而，欧阳修在词中增加了一个“共”字，便有了新意。也就是说，“共从容”如果联系“把酒祝东风”来说，就是风与人而言的。首先，对东风（春风）来说，就是爱惜好东风，以此暗示了要留住美好的光景，以便游赏之意。其次，对人而来说，希望人们慢慢游赏，感受这难得的相聚，珍惜着美好的时光。词人接着写道：“垂杨紫陌洛城东。”“洛城东”指出了游览的地点。“紫陌”指京城郊外的道路。这里，词人描绘的景象是多么的温暖，词人走在京城郊外，暖风吹拂，翠柳飞舞，宜人的天气让人惬意。上片最后写道：“总是当时携手处，游遍芳丛。”</p><p>　　这两句中，特别要注意的是“当时”的含义。也就是说，它不仅暗示了词人对过去的回忆，也照应了下片说的“去年”，使“去年”有了落脚处。“芳丛”说明此游主要是赏花。意思是说，都是过去携手同游过的“芳丛”，今天仍要全都重游一遍。词人通过旧地重游来表现了对朋友的情感的深厚和珍惜。</p><p>　　下片是抒情。头两句就是重重的感叹。“聚散苦匆匆”，是说本来就很难聚会，而刚刚会面，又要匆匆作别，这怎么不给人带来无穷的怅恨呢！“此恨无穷”并不仅仅指作者本人而言，也就是说，在亲人朋友之间聚散匆匆这种怅恨，从古到今，以至今后，永远都没有穷尽，都给人带来莫大的痛苦。“黯然销魂者唯别而己矣！”（南朝梁江淹《别赋》）好友相逢，不能久聚，心情自然是非常难受的。这感叹就是对友人深情厚意的表现。下面三句是从眼前所见之景来抒写别情，也可以说是对上面的感叹的具体说明。</p><p>　　“今年花胜去年红”有两层意思。一是说今年的花比去年开得更加繁盛，看去更加鲜艳，当然希望同友人尽情观赏。说“花胜去年红”，足见作者去年曾同友人来观赏过此花，此与上片“当时”相呼应，这里包含着对过去的美好回忆；也说明此别已经一年，这次是久别重逢。聚会这么不容易，花又开得这么好，本来应当多多观赏，然而友人就要离去，怎能不使人痛惜？这句写的是鲜艳繁盛的景色，表现的却是感伤的心情，正是清代王夫之所说的“以乐景写哀”。</p><p>　　末两句更进一层：明年这花还将比今年开得更加繁盛，可惜的是，自己和友人分居两地，天各一方，明年此时，不知同谁再来共赏此花啊！再进一步说，明年自己也可能离开此地，更不知是谁来此赏花了。杜甫《九日蓝田崔氏庄》“明年此会知谁健，醉把茱萸仔细看”，立意与此词相近，可以合看，不过，杜诗意在伤老，此词则意在惜别。把别情熔铸于赏花中，将三年的花加以比较，层层推进，以惜花写惜别，构思新颖，富有诗意，是篇中的绝妙之笔。而别情之重，亦说明同友人的情宜之深。</p><p>　　清人冯煦谓欧阳修词“疏隽开子瞻（苏轼），深婉开少游（秦观）”（《宋六十家词选例言》）。此词笔致疏放，婉丽隽永，近人俞陛云的评价正说明它兼具这两方面的特色</p><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>此词为春日与友人在洛阳城东旧地同游有感而作。据词意，在写作此词的前一年春，友人亦曾同作者在洛城东同游。欧阳修在西京留守幕前后共三年，其间仅公元1032年（明道元年）春在洛阳，此词当即此年所作。词中同游之人或即梅尧臣。</p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>​       欧阳修（1007－1072），字永叔，号醉翁，晚号“六一居士”。汉族，吉州永丰（今江西省永丰县）人，因吉州原属庐陵郡，以“庐陵欧阳修”自居。谥号文忠，世称欧阳文忠公。北宋政治家、文学家、史学家，与韩愈、柳宗元、王安石、苏洵、苏轼、苏辙、曾巩合称“唐宋八大家”。后人又将其与韩愈、柳宗元和苏轼合称“千古文章四大家”</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPU，内核，寄存器，缓存，RAM，ROM的知识</title>
      <link href="/posts/f0d7.html"/>
      <url>/posts/f0d7.html</url>
      
        <content type="html"><![CDATA[<h1 id="CPU，内核，寄存器，缓存，RAM，ROM的知识"><a href="#CPU，内核，寄存器，缓存，RAM，ROM的知识" class="headerlink" title="CPU，内核，寄存器，缓存，RAM，ROM的知识"></a>CPU，内核，寄存器，缓存，RAM，ROM的知识</h1><h2 id="CPU："><a href="#CPU：" class="headerlink" title="CPU："></a>CPU：</h2><p>中央处理器（CPU，Central Processing Unit）是一块超大规模的集成电路，是一台计算机的运算核心（Core）和控制核心（ Control Unit）。它的功能主要是解释计算机指令以及处理计算机软件中的数据。</p><p>中央处理器主要包括运算器（算术逻辑运算单元，ALU，Arithmetic Logic Unit）和<strong>高速缓冲存储器</strong>（Cache）及实现它们之间联系的数据（Data）、控制及状态的总线（Bus）。它与<strong>内部存储器</strong>（Memory）和输入/输出（I/O）设备合称为电子计算机三大核心部件。</p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>CPU 是皇帝，那寄存器可以说是皇帝身边的小太监了，随叫随到，在所有人里面速度是最快的。</p><p>寄存器是中央处理器内的组成部份。它跟CPU有关。寄存器是有限存贮容量的高速存贮部件，它们可用来暂存指令、数据和位址。在中央处理器的控制部件中，包含的寄存器有指令寄存器(IR)和程序计数器(PC)。在中央处理器的算术及逻辑部件中，包含的寄存器有累加器(ACC)。</p><h2 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h2><p>存储器范围最大，它几乎涵盖了所有关于存储的范畴。你所说的寄存器，内存，都是存储器里面的一种。凡是有存储能力的硬件，都可以称之为存储器，这是自然，硬盘更加明显了，它归入外存储器行列，由此可见——。</p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>内存既专业名上的内存储器，它不是个什么神秘的东西，它也只是存储器中的沧海一粟，它包涵的范围也很大，一般分为<strong>只读存储器（ROM）</strong>和<strong>随机存储器（RAM）</strong>，以及最强悍的<strong>高速缓冲存储器（CACHE）</strong>，只读存储器应用广泛，它通常是一块在硬件上集成的可读芯片，作用是识别与控制硬件，它的特点是只可读取，不能写入。RAM <strong>随机存储器的特点是可读可写，断电后一切数据都消失，我们所说的内存条就是指它了。</strong></p><h2 id="缓存CACHE"><a href="#缓存CACHE" class="headerlink" title="缓存CACHE"></a>缓存CACHE</h2><p>皇帝想拿东西，如果太监没有，那从哪里拿最快？那就是丞相了，缓存还分一级缓存，二级缓存，三级缓存，你买电脑，这个参数可以用来比较一下。</p><p>缓存就是数据交换的缓冲区（称作Cache），当某一硬件要读取数据时，会首先从缓存中查找需要的数据，如果找到了则直接执行，找不到的话则从内存中找。由于缓存的运行速度比内存快得多，故缓存的作用就是帮助硬件更快地运行。</p><p>因为缓存往往使用的是RAM（断电即掉的非永久储存），所以在用完后还是会把文件送到硬盘等存储器里永久存储。电脑里最大的缓存就是内存条了，最快的是CPU上镶的 L1 和 L2 缓存，显卡的显存是给显卡运算芯片用的缓存，硬盘上也有16M或者32M的缓存。</p><p>CACHE 是在 CPU 中速度非常块，而容量却很小的一种存储器，它是计算机存储器中最强悍的存储器。由于技术限制，容量很难提升。</p><h2 id="ROM、RAM的区别："><a href="#ROM、RAM的区别：" class="headerlink" title="ROM、RAM的区别："></a>ROM、RAM的区别：</h2><p>ROM（只读存储器或者固化存储器）</p><p>RAM（随机存取存储器）</p><p>ROM和RAM指的都是半导体存储器，ROM是Read Only Memory的缩写，RAM是Random Access Memory的缩写。ROM在系统停止供电的时候仍然可以保持数据，而RAM通常都是在掉电之后就丢失数据，典型的</p><p>RAM就是计算机的内存。.</p><p>RAM有两大类，一种称为静态 RAM（Static RAM/SRAM），当数据被存入其中后不会消失。SRAM速度非常快，是目前读写最快的存储设备了。当这个SRAM 单元被赋予0 或者1 的状态之后，它会保持这个状态直到下次被赋予新的状态或者断电之后才会更改或者消失。但是存储1bit 的信息需要4-6 只晶体管。因此它也非常昂贵，所以只在要求很苛刻的地方使用，譬如CPU的一级缓冲，二级缓冲。另一种称为动态RAM（Dynamic RAM/DRAM），DRAM 必须在一定的时间内不停的刷新才能保持其中存储的数据。DRAM 只要1 只晶体管就可以实现。DRAM保留数据的时间很短，速度也比SRAM慢，不过它还是比任何的ROM都要快，但从价格上来说DRAM相比SRAM要便宜很 多，计算机内存就是DRAM的。</p><p>DRAM分为很多种，常见的主要有FPRAM/FastPage、EDORAM、SDRAM、DDR RAM、RDRAM、SGRAM以及WRAM等，这里介绍其中的一种DDR RAM。DDR RAM（Date-Rate RAM）也称作DDR SDRAM，这种改进型的RAM和SDRAM是基本一样的，不同之处在于它可以在一个时钟读写两次数据，这样就使得数据传输速度加倍了。这是目前电脑中用 得最多的内存，而且它有着成本优势，事实上击败了Intel的另外一种内存标准－Rambus DRAM。在很多高端的显卡上，也配备了高速DDR RAM来提高带宽，这可以大幅度提高3D加速卡的像素渲染能力。</p><p>ROM也有很多种，PROM是可编程的ROM，PROM和EPROM（可擦除可编程ROM）两者区别是，PROM是一次性的，也就是软件灌入后，就无法修 改了，这种是早期的产品，现在已经不可能使用了，而EPROM是通过紫外光的照射擦出原先的程序，是一种通用的存储器。另外一种EEPROM是通过电子擦出，价格很高，写入时间很长，写入很慢。</p><p>最初,把只能读的存储器叫做ROM(Read Only Memory),并且掉电后数据不会丢失。由于不能改写，因而使用起来很不方便。随着技术的进步，在ROM中使用一些新技术，就可以使它具有可以编程的功能。比较早的是熔丝型的可编程ROM，由于是通过熔断熔丝来编程的，所以这类ROM编程后，就不能再写了，是一次性的(OTP)。后来又出现了EPROM，是通过紫外线来擦除的，并且通过高压来编程，这类ROM上面一般有一个透明的石英玻璃窗，看上去挺漂亮的，它就是用来给紫外线照射的。后来又出现了EEPROM，不用紫外线照射就可以擦除，因而可以直接在电路中编程。另外还有FLASH ROM，又可分为NOR FLASH和NAND FLASH。FLASH ROM一般有一个特点，就是写数据时，可以将1改为0，而不能将0改为1，因而写数据前需要擦除，擦除时将所有数据置1。</p><p>之所以依然叫做ROM，归纳一下，大概有几个原因:</p><p>①不能像RAM那样快速的写；</p><p>②可能需要特殊的擦写电压；</p><p>③可能需要特殊的擦写时序；</p><p>④可能需要在写之前进行擦除操作；</p><p>⑤擦写次数有限,不像RAM那样可以随意写而不损坏；</p><p>⑥掉电后数据不会丢失；</p><p>⑦有些可写的存储器只能写一次(OTP)。</p><p>举个例子，手机软件一般放在EEPROM中，我们打电话，有些最后拨打的号码，暂时是存在SRAM中的，不是马上写入通过记录（通话记录保存在EEPROM中），因为当时有很重要工作（通话）要做，如果写入，漫长的等待是让用户忍无可忍的。</p><p>FLASH存储器又称闪存，它结合了ROM和RAM的长处，不仅具备电子可擦出可编程（EEPROM）的性能，还不会断电丢失数据同时可以快速读取数据 （NVRAM的优势），U盘和MP3里用的就是这种存储器。在过去的20年里，嵌入式系统一直使用ROM（EPROM）作为它们的存储设备，然而近年来 Flash全面代替了ROM（EPROM）在嵌入式系统中的地位，用作存储Bootloader以及操作系统或者程序代码或者直接当硬盘使用（U盘）。</p><p>目前 Flash 主要有两种 NOR Flash 和 NADN Flash。NOR Flash 的读取和我们常见的 SDRAM 的读取是一样，用户可以直接运行装载在NOR FLASH 里面的代码，这样可以减少 SRAM 的容量从而节约了成本。NAND Flash 没有采取内存的随机读取技术，它的读取是以一次读取一快的形式来进行的，通常是一次读取 512 个字节，采用这种技术的Flash比较廉价。用户 不能直接运行 NAND Flash 上的代码，因此好多使用NAND Flash 的开发板除了使用 NAND Flah 以外，还作上了一块小的NOR Flash 来运行启动代码。</p><p>一般小容量的用 NOR Flash，因为其读取速度快，多用来存储操作系统等重要信息，而大容量的用NAND FLASH，最常见的 NAND FLASH 应用是嵌入式系统采用的 DOC（Disk On Chip）和我们通常用的“闪盘”，可以在线擦除。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游庐山宿栖贤寺</title>
      <link href="/posts/1467.html"/>
      <url>/posts/1467.html</url>
      
        <content type="html"><![CDATA[<h1 id="游庐山宿栖贤寺"><a href="#游庐山宿栖贤寺" class="headerlink" title="游庐山宿栖贤寺"></a>游庐山宿栖贤寺</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​            游庐山宿栖贤寺</p><p>​                                                                宋·王安国</p><p>古屋萧萧卧不周，弊裘起坐兴绸缪。<br>千山月午乾坤昼，一壑泉鸣风雨秋。<br>迹入尘中惭有累，心期物外欲何求！<br>明朝松路须惆怅，忍更无诗向此留。    </p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><ul><li>山风吹入，萧萧作响，卧寝不得周严，寒气就会侵入，坐起来披着破皮袄真想修补门窗。</li><li>午夜皓月当空，皎洁的月光照得世界恍如白昼，山谷中的泉水淅沥作响，仿佛秋天的风雨声。</li><li>很惭愧自己为尘世所累，心虽超然物外，又想干什么呢？</li><li>明天走在松荫路里，我肯定会惆怅的，怎么能没有诗作为留念呢。</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>萧萧：形容风声。</li><li>弊裘：破败的毛皮衣服。</li><li>月午：此指时至午夜。</li><li>乾坤：此指世界。</li><li>壑：山涧溪泉。</li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><blockquote><p>该篇是王安国游庐山夜宿栖贤寺感怀所作。庐山佛寺颇多，有五大丛林，栖贤寺是其中之一，为南齐参军张希之首建，屡经兴废，遗址在今三峡涧玉渊潭北。当时诗人踯躅庐山，独宿佛寺，古屋萧索，四顾寥落，顿起遗世独立之想。这首诗就抒写了作者登览庐山的洒脱襟怀和情趣。</p></blockquote><p>　　首联紧扣“宿栖贤寺”，以直叙入题，由于寺殿年久失修，故山风吹入，萧萧作响，而卧寝不得周严，寒气就会侵入。“弊裘”句由上文生出。因寝卧不宁，故而“弊裘起坐”，由“古屋萧萧”，而生“绸缪牖户”之想。“绸缪牖户”出自《诗经·豳风·鸱鸮》，意思是缠绕柴木，修补门窗。这一联切题叙事，且渲染出一种夜宿深山古寺的萧索阒静气氛。</p><p>　　由于中夜不眠，得以目睹深山夜景。次联集中笔力摹写庐山之夜。层峦叠嶂中，皓月当空，皎洁的清光，把整个大千世界变成了朗朗白昼；山谷间，泉水淙淙，仿佛为寂净的人间带来了风雨交加的萧瑟秋声。一句写山中月色，主要诉诸视觉；一句写山谷泉声，主要诉诸听觉。这里静景和动景互相配合，出色地构造了一个明净、透彻、幽寂、清寒的尘外世界，为人排解尘念、唤起遐思，布设了一种适宜的氛围。方虚谷说王安国诗“佳者不可胜算，而富于风月，此诗三四壮浪而清洒”（《瀛奎律髓》卷一），正指出这两句的独特气韵。</p><p>　　沉浸于如此境界中，诗人忘却俗念，烦恼顿消，于是脱口咏出“迹入尘中惭有累，心期物外欲何求”两句。“尘中”，犹言尘世、尘网，包括世俗社会和市井闹区。踪迹进入尘世，则会有俗务牵累、世事羁绊，着一“惭”字，表示了对世俗桎梏的不甘和不满。由此生出了“期”字，只消“心期物外”，就会无求无欲，身心恬然。物外即世外，《唐书·元德秀传》记载，元德秀“陶然遗身物外”，元氏以置身物外，求得精神超拔。诗人则是虽“迹入尘中”，却能“心期物外”，而达到泊然无求的境界，显得更为通达。两句一写形迹，一写心神，结构相对，内容相反，而意义上又有递进，连贯而下，对仗中具有气韵流动之美。</p><p>　　虽然“心期物外”，却也可“迹入尘中”，离开这宁静高洁的环境，诗人还是会有感慨，因而尾联有“须惆怅”之语。庐山长松林立，到后世仍然有“松树路”之名。天明登途，穿越松柏蔽空的山路，诗人更会惆怅不已。正是由于这个缘故，此时诗人留驻片刻，他才会写诗记叙此行。这两句，“须惆怅”一转，“忍更”再转，而以题诗留念收尾，很符合登览游记诗的旨趣，十分得体。“忍更”二字强调必须有诗，表达出对庐山清境的低徊依恋，颇有余音袅袅之致</p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>​       王安国（1028年-1074年）字平甫，王安石大弟。熙宁进士。北宋临川（今江西省东乡县上池村）人。北宋著名诗人。世称王安礼、王安国、王雱为“临川三王”。王安国器识磊落，文思敏捷，曾巩谓其“于书无所不通，其明于是非得失之理为尤详，其文闳富典重，其诗博而深。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一段python程序引发的问题</title>
      <link href="/posts/f007.html"/>
      <url>/posts/f007.html</url>
      
        <content type="html"><![CDATA[<h1 id="一段python程序引发的问题"><a href="#一段python程序引发的问题" class="headerlink" title="一段python程序引发的问题"></a>一段python程序引发的问题</h1><blockquote><p>先放代码。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> randomplayer_list <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">'【狂血战士】'</span><span class="token punctuation">,</span><span class="token string">'【森林箭手】'</span><span class="token punctuation">,</span><span class="token string">'【光明骑士】'</span><span class="token punctuation">,</span><span class="token string">'【独行剑客】'</span><span class="token punctuation">,</span><span class="token string">'【格斗大师】'</span><span class="token punctuation">,</span><span class="token string">'【枪弹专家】'</span><span class="token punctuation">]</span>enemy_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'【暗黑战士】'</span><span class="token punctuation">,</span><span class="token string">'【黑暗弩手】'</span><span class="token punctuation">,</span><span class="token string">'【骷髅骑士】'</span><span class="token punctuation">,</span><span class="token string">'【嗜血刀客】'</span><span class="token punctuation">,</span><span class="token string">'【首席刺客】'</span><span class="token punctuation">,</span><span class="token string">'【陷阱之王】'</span><span class="token punctuation">]</span>players <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>player_list<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>enemies <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>enemy_list<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>player_info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>enemy_info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">born_role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        life <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">)</span>        attack <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> life<span class="token punctuation">,</span>attack <span class="token comment" spellcheck="true"># 返回一个元组</span><span class="token keyword">def</span> <span class="token function">show_role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        player_info<span class="token punctuation">[</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> born_role<span class="token punctuation">(</span><span class="token punctuation">)</span>        enemy_info<span class="token punctuation">[</span>enemies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> born_role<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----------------- 角色信息 -----------------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你的人物：'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{}  \n 血量：{}  \n 攻击：{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>player_info<span class="token punctuation">[</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>player_info<span class="token punctuation">[</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># time.sleep(2)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----------------- 角色信息 -----------------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'电脑敌方：'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} \n 血量：{}  \n 攻击：{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>enemies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>enemy_info<span class="token punctuation">[</span>enemies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemy_info<span class="token punctuation">[</span>enemies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># time.sleep(2)</span><span class="token keyword">def</span> <span class="token function">order_role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> players    order_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 新建字典，存储顺序</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        order <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'你想将 {} 放在第几个上场？(输入数字1~3)'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        order_dict<span class="token punctuation">[</span>order<span class="token punctuation">]</span> <span class="token operator">=</span> players<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        players<span class="token punctuation">.</span>append<span class="token punctuation">(</span>order_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n我方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'敌方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>enemies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    show_role<span class="token punctuation">(</span><span class="token punctuation">)</span>    order_role<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>运行结果如下：</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/BATdalao/YING-imgs/articles/ty2.png" alt="ty2"></p><blockquote><p>主要分析这段代码：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">order_role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> players    order_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 新建字典，存储顺序</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        order <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'你想将 {} 放在第几个上场？(输入数字1~3)'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        order_dict<span class="token punctuation">[</span>order<span class="token punctuation">]</span> <span class="token operator">=</span> players<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        players<span class="token punctuation">.</span>append<span class="token punctuation">(</span>order_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n我方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'敌方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>enemies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="问题一：global的位置"><a href="#问题一：global的位置" class="headerlink" title="问题一：global的位置"></a>问题一：global的位置</h2><h3 id="1-问题阐述"><a href="#1-问题阐述" class="headerlink" title="1.问题阐述"></a>1.问题阐述</h3><blockquote><p>global players放到第一个循环后为什么会报错：SyntaxError: name ‘players’ is used prior to global declaration</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">order_role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    order_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 新建字典，存储顺序</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        order <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'你想将 {} 放在第几个上场？(输入数字1~3)'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        order_dict<span class="token punctuation">[</span>order<span class="token punctuation">]</span> <span class="token operator">=</span> players<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">global</span> players  <span class="token comment" spellcheck="true">#将global players放到第一个循环后</span>    players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        players<span class="token punctuation">.</span>append<span class="token punctuation">(</span>order_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n我方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'敌方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>enemies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2-知识点复查"><a href="#2-知识点复查" class="headerlink" title="2.知识点复查"></a>2.知识点复查</h3><blockquote><ul><li><p>在Python中，当引用一个变量的时候，对这个变量的搜索是按找本地作用域(Local)、嵌套作用域(Enclosing function locals)、全局作用域(Global)、内置作用域(builtins模块)的顺序来进行的，即所谓的LEGB规则。即python引用变量的顺序： 当前作用域局部变量-&gt;外层作用域变量-&gt;当前模块中的全局变量-&gt;python内置变量。最终在全局变量中找这个变量，如果找不到则抛出  UnboundLocalError 异常。</p></li><li><p>然而当在一个函数内部为一个变量赋值时，并不是按照上面所说LEGB规则来首先找到变量，之后为该变量赋值。在Python中，在函数中为一个变量赋值时，有下面这样一条规则:“当在函数中给一个变量名赋值是(而不是在一个表达式中对其进行引用)，<strong>Python总是创建或改变本地作用域的变量名，除非它已经在那个函数中被声明为全局变量.</strong> ”</p></li><li><p>Python 是弱类型语言，弱类型语言有两个典型特征。 1.<strong>变量无须声明即可直接赋值</strong>： 对一个不存在的变量赋值就相当于定义了一个新变量。 2.变量的数据类型可以动态改变：同一个变量可以一会儿被赋值为整数值， 一会儿被赋值为 字符串。Python 使用等号（＝）作为赋值运算符，例如 a = 20 就是一条赋值语句，这条语句用于将 20 装入变量 a 中一一这个过程就被称为赋值：将 20 赋值给变量 a。</p></li><li><p>在函数体中多条可执行语句之间有严格的执行顺序，排在函数体前面的语句总是先执行，排在 函数体后面的语句总是后执行。 </p></li><li><p>global关键字用来在函数或其他局部作用域中使用全局变量。</p><ul><li><p>如果不修改全局变量,只是引用全局变量，也可以不使用global关键字。</p></li><li><p>如果在局部要对全局变量修改，需要在局部也要先声明该全局变量。</p></li></ul></li></ul></blockquote><p><strong>下面探讨global修饰符的用法：</strong></p><h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><h5 id="第一种情况："><a href="#第一种情况：" class="headerlink" title="第一种情况："></a>第一种情况：</h5><ul><li>在模块层面定义的变量（无需global修饰），如果在函数中没有再定义同名变量，可以在函数中当做全局变量使用：</li></ul><pre class=" language-python"><code class="language-python">  a<span class="token operator">=</span><span class="token number">1</span>  <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  f<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#输出1和1</span></code></pre><h5 id="第二种情况："><a href="#第二种情况：" class="headerlink" title="第二种情况："></a>第二种情况：</h5><ul><li>但如果在函数中有再赋值/定义（因为python是弱类型语言，赋值语句和其定义变量的语句一样），则会产生引用了未定义变量的错误：</li></ul><pre class=" language-python"><code class="language-python">  a<span class="token operator">=</span><span class="token number">1</span>  <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>      a<span class="token operator">=</span><span class="token number">2</span>  f<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#输出错误：UnboundLocalError: local variable 'a' referenced before assignment</span></code></pre><ul><li>抛出的错误信息为：UnboundLocalError: local variable ‘a’ referenced before assignment。如果内部函数有引用外部函数的同名变量或者全局变量,并且对这个变量有修改.那么python会认为它是一个局部变量。</li></ul><h5 id="第三种情况："><a href="#第三种情况：" class="headerlink" title="第三种情况："></a>第三种情况：</h5><ul><li>而如果在函数中的定义在引用前使用，那么会正常运行但函数中的变量和模块中定义的全局变量不为同一个</li></ul><pre class=" language-python"><code class="language-python">  a<span class="token operator">=</span><span class="token number">1</span>  <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      a<span class="token operator">=</span><span class="token number">2</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  f<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#输出2和1</span></code></pre><ul><li>上述输出是2和1，也即f函数中print使用的是局部变量a，而最后一个print语句使用的全局a。</li></ul><h5 id="第四种情况："><a href="#第四种情况：" class="headerlink" title="第四种情况："></a>第四种情况：</h5><ul><li>那么我们会有疑问，如果我可能在函数使用某一变量后又对其进行修改（也即再赋值），怎么让函数里面使用的变量是模块层定义的那个全局变量而不是函数内部的局部变量呢？这时候global修饰符就派上用场了。</li></ul><pre class=" language-python"><code class="language-python">  a<span class="token operator">=</span><span class="token number">1</span>  <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">global</span> a      <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>      a<span class="token operator">=</span><span class="token number">3</span>  f<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#输出1和3</span></code></pre><ul><li>在用global修饰符声明a是全局变量的a后（注意，global语句不允许同时进行赋值如global a=3是不允许的），输出是1和3，得到了我们想要的效果。<strong>此时使用global关键字对全局变量进行了重新赋值。</strong></li></ul><h5 id="第五种情况："><a href="#第五种情况：" class="headerlink" title="第五种情况："></a>第五种情况：</h5><pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">global</span> a    a<span class="token operator">=</span><span class="token number">3</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#输出异常 SyntaxError: name 'a' is used prior to global declaration</span></code></pre><ul><li>变量a在全局声明之前就被使用。</li></ul><h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment" spellcheck="true">#定义了一个全局变量，（可以省略global关键字）</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#不修改，只是引用全局变量，不使用global关键字</span><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a        a <span class="token operator">+=</span><span class="token number">1</span>         <span class="token comment" spellcheck="true"># a +=1 即a=a+1 属于先调用后赋值</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#修改全局变量，需要使用global关键字</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>输出为0 1</li></ul><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">0</span>   <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># global a    #如果注释掉global</span>    a <span class="token operator">+=</span><span class="token number">1</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>输出为0  UnboundLocalError: local variable ‘a’ referenced before assignment，错误代码为 a +=1</p><p>在这个例子中设置的 a=0属于全局变量,而在函数内部中没有对 a 的定义。</p><p>根据 Python 访问局部变量和全局变量的规则：当搜索一个变量的时候，Python 先从局部作用域开始搜索，如果在局部作用域没有找到那个变量，那样 Python 就会在作用域范围逐层寻找。最终在全局变量中找这个变量，如果找不到则抛出  UnboundLocalError 异常。</p><p>但是，明明已经在全局变量中找到同名变量了，怎么还是报错？</p><p><strong>因为内部函数有引用外部函数的同名变量或者全局变量，并且对这个变量有修改的时候，此时 Python 会认为它是一个局部变量，而函数中并没有 a 的定义和赋值，所以报错。</strong></p></blockquote><h4 id="知识点归纳："><a href="#知识点归纳：" class="headerlink" title="知识点归纳："></a>知识点归纳：</h4><table><thead><tr><th align="center">变量在函数中使用情况</th><th>输出结果及处理方式</th><th>对应示例</th></tr></thead><tbody><tr><td align="center">只调用不赋值</td><td>函数内外均输出全局变量</td><td>示例1第一种情况</td></tr><tr><td align="center">只赋值不调用</td><td>一般不会这样做</td><td></td></tr><tr><td align="center">先赋值后调用</td><td>函数内输出局部变量，外输出全局变量</td><td>示例1第三种情况</td></tr><tr><td align="center">先调用后赋值</td><td>调用前加global，不加报错</td><td>示例1第二、四种情况；示例2</td></tr></tbody></table><h3 id="3-问题解决"><a href="#3-问题解决" class="headerlink" title="3.问题解决"></a>3.问题解决</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">order_role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> players  <span class="token comment" spellcheck="true">#global players放在第一处</span>    order_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 新建字典，存储顺序</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        order <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'你想将 {} 放在第几个上场？(输入数字1~3)'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        order_dict<span class="token punctuation">[</span>order<span class="token punctuation">]</span> <span class="token operator">=</span> players<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#global players放在第二处    </span>    players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        players<span class="token punctuation">.</span>append<span class="token punctuation">(</span>order_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n我方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'敌方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>enemies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><p>与示例1的第四种情况类似。属于先调用后赋值，即在函数使用某一变量后又对其进行修改（也即再赋值）。第五行的players[i]调用的变量players,第七行给变量players再赋值。</p></li><li><p>global players放在第一处，正确。</p></li><li><p>global players放在第二处，这种情况下，程序会报 SyntaxError ，理由是 “name ‘players’ is used prior to global declaration”，即变量在全局声明之前就被使用。（同示例1的第五种情况）</p></li><li><p>如果一二两处均无global players。报错UnboundLocalError: local variable ‘players’ referenced before assignment。即局部变量在分配空间前被引用。（同示例1的第二种情况）这种就相当于在变量定义前就调用，当然会出错。</p><blockquote><p>综上：在函数内的变量(已在函数外有全局变量)：</p><ul><li>如果函数内没有对其进行再赋值，则采用全局变量；</li><li>如果函数内有对其进行再赋值，则采用局部变量。且再赋值一定要位于调用之前。否则会报错：UnboundLocalError: local variable ‘a’ referenced before assignment</li><li>如果函数内有全局变量的声明（global）,则在global之后、再赋值之前采用全局变量。global一定要位于调用之前，否则会报错：name ‘players’ is used prior to global declaration。</li></ul></blockquote></li></ul><h3 id="4-解决方案"><a href="#4-解决方案" class="headerlink" title="4.解决方案"></a>4.解决方案</h3><blockquote><p>这类问题基本上两个解决方案：</p><ul><li>一是添加或者改变global的位置</li><li>二是改变变量名称。使局部变量与全局变量不同。</li></ul></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">order_role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> players    order_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 新建字典，存储顺序</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        order <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'你想将 {} 放在第几个上场？(输入数字1~3)'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        order_dict<span class="token punctuation">[</span>order<span class="token punctuation">]</span> <span class="token operator">=</span> players<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    player <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#改局部变量players为player</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        player<span class="token punctuation">.</span>append<span class="token punctuation">(</span>order_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n我方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'敌方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>enemies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#可以正确运行</span></code></pre><h3 id="5-遗留问题"><a href="#5-遗留问题" class="headerlink" title="5.遗留问题"></a>5.遗留问题</h3><blockquote><p>还有没有解释的是两处：</p><ul><li><p>两种报错涉及的深层执行原理（数据结构和微机原理的层次）</p></li><li><p>下面这种改法里合并了局部变量和全局变量，列表内的元素发生了改变，却仍然可以不使用global,相当于示例1的第二种情况。这个问题还需要再从列表在内存里的存储等方面来思考下。</p></li></ul></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">order_role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#global players</span>    order_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 新建字典，存储顺序</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        order <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'你想将 {} 放在第几个上场？(输入数字1~3)'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        order_dict<span class="token punctuation">[</span>order<span class="token punctuation">]</span> <span class="token operator">=</span> players<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># global players</span>    <span class="token comment" spellcheck="true"># players = []</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># players.append(order_dict[i]) </span>        players<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> order_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n我方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'敌方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>enemies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#可以正确运行</span></code></pre><h2 id="问题二：input"><a href="#问题二：input" class="headerlink" title="问题二：input"></a>问题二：input</h2><blockquote><ul><li>在 Python3.x 中 raw_input() 和 input() 进行了整合，去除了 raw_input( )，仅保留了input( )函数，其接收任意任性输入，将所有输入默认为字符串处理，并返回字符串类型。</li></ul></blockquote><p>input()以字符串的方式获取用户输入：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">4.5</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span>a <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"input:"</span><span class="token punctuation">)</span>input<span class="token punctuation">:</span><span class="token number">123</span>                  <span class="token comment" spellcheck="true"># 输入整数</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span>              <span class="token comment" spellcheck="true"># 字符串</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>Do you love python?<span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"input:"</span><span class="token punctuation">)</span>    input<span class="token punctuation">:</span>runoob              <span class="token comment" spellcheck="true"># 正确，字符串表达式</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span>             <span class="token comment" spellcheck="true"># 字符串</span></code></pre><p>输入的字符串可以通过运算符进行连接、复制等操作：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>abc<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">*</span> <span class="token number">3</span><span class="token string">'abcabcabc'</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">123</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token string">'abc123'</span></code></pre><p>但无法直接参与算术运算，需要先转换类型。比如使用int转换。如：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">5</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">5</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> must be str<span class="token punctuation">,</span> <span class="token operator">not</span> int<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">*</span> <span class="token number">5</span><span class="token string">'55555'</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">*</span> yTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> can<span class="token string">'t multiply sequence by non-int of type '</span>str'</code></pre><h2 id="问题三：range"><a href="#问题三：range" class="headerlink" title="问题三：range"></a>问题三：range</h2><blockquote><p>概要：</p><ul><li><p>range左闭右开，range（5）等价于range（0， 5），range（0， 5）即[0, 1, 2, 3, 4]。</p></li><li><p>python的range() 函数可创建一个整数列表，一般用在 for 循环中。</p></li></ul></blockquote><h3 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h3><pre><code>range(start, stop[, step])</code></pre><p>参数说明：</p><ul><li>start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</li><li>stop: 计数到 stop 结束，但不包括 stop。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</li><li>step：步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 从 0 开始到 10</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 从 1 开始到 11</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 步长为 5</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 步长为 3</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 负数</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#以下是 range 在 for 中的使用，循环出runoob 的每个字母:</span><span class="token operator">>></span><span class="token operator">></span>x <span class="token operator">=</span> <span class="token string">'runoob'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> runoob<span class="token operator">>></span><span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法概括</title>
      <link href="/posts/2c49.html"/>
      <url>/posts/2c49.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="第一章：数据结构的"><a href="#第一章：数据结构的" class="headerlink" title="第一章：数据结构的"></a>第一章：数据结构的</h2><p>基本概念</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>在任何问题中，数据元素都不是孤立存在的，而是在它们之间存在着某种关系，这种数据元素相互之间的关系称为结构（Structure）。数据结构是相互之间存在一种或多种特定关系的数据元素的集合。数据结构包括三方面的内容：逻辑结构、存储结构和数据的运算。数据的逻辑结构和存储结构是密不可分的两个方面，一个算法的设计取决于所选定的逻辑结构，而算法的实现依赖于所采用的存储结构。<h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3></li><li>逻辑结构是指数据元素之间的逻辑关系，即从逻辑关系上描述数据。它与数据的存储无关，是独立于计算机的</li><li>数据的逻辑结构分为线性结构和非线性结构<ul><li>集合 结构中的数据元素之间除了“同属于一个集合”的关系外，别无其他关系。 类似于数学上的集合</li><li>线性结构 结构中的数据元素之间只存在一对一的关系。比如排队</li><li>树形结构 结构中的数据元素之间存在一对多的关系。比如家族族谱</li><li>图状结构或网状结构 结构中的数据元素之间存在多对多的关系。 比如地图<h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3></li></ul></li><li>存储结构是指数据结构在计算机中的表示（又称映像），也称物理结构。它包括数据元素的表示和关系的表示。数据的存储结构是逻辑结构用计算机语言的实现，它依赖于计算机语言。数据的存储结构主要有：顺序存储、链式存储、索引存储和散列存储。<ul><li>顺序存储：存储的物理位置相邻。（p.s. 物理位置即信息在计算机中的位置。）</li><li>链接存储：存储的物理位置未必相邻，通过记录相邻元素的物理位置来找到相邻元素。</li><li>索引存储：类似于目录，以后可以联系操作系统的文件系统章节来理解。</li><li>散列存储：通过关键字直接计算出元素的物理地址（以后详解）。<h3 id="算法的五个特征"><a href="#算法的五个特征" class="headerlink" title="算法的五个特征"></a>算法的五个特征</h3></li></ul></li><li>1，有穷性：有限步之后结束</li><li>2，确定性：不存在二义性，即没有歧义</li><li>3，可行性：比如受限于计算机的计算能力，有些算法虽然理论上可行，但实际上无法完成。</li><li>4，输入：能被计算机处理的各种类型数据，如数字，音频，图像等等。</li><li>5，输出：一至多个程序输出结果。<h3 id="算法的复杂度"><a href="#算法的复杂度" class="headerlink" title="算法的复杂度"></a>算法的复杂度</h3></li><li>时间复杂度：<ul><li>• 它用来衡量算法随着问题规模增大，算法执行时间增长的快慢；</li><li>• 是问题规模的函数：T(n)是时间规模函数 时间复杂度主要分析T(n)的数量级</li><li>• T(n)=O(f(n)) f(n)是算法中基本运算的频度 一般我们考虑最坏情况下的时间复杂度</li></ul></li><li>空间复杂度：<ul><li>• 它用来衡量算法随着问题规模增大，算法所需空间的快慢；</li><li>• 是问题规模的函数：S(n)=O(g(n)) ；算法所需空间的增长率和g(n)的增长率相同。<h3 id="概要-复杂度计算为重点"><a href="#概要-复杂度计算为重点" class="headerlink" title="概要: 复杂度计算为重点"></a>概要: 复杂度计算为重点</h3></li></ul></li><li>常用的时间复杂度大小关系：</li><li>复杂度如何计算<ul><li>时间复杂度计算（单个循环体）<ul><li>直接关注循环体的执行次数，设为k </li></ul></li><li>时间复杂度计算（多个循环体）<ul><li>两个运算规则：乘法规则，加法规则。<h2 id="第二章：线性表"><a href="#第二章：线性表" class="headerlink" title="第二章：线性表"></a>第二章：线性表</h2><h3 id="线性表的逻辑结构"><a href="#线性表的逻辑结构" class="headerlink" title="线性表的逻辑结构"></a>线性表的逻辑结构</h3></li></ul></li></ul></li><li>定义：线性表是具有相同数据类型的n（n≥0）个数据元素的有限序列。其中n为表长。当n=0时 线性表是一个空表</li><li>特点：线性表中第一个元素称为表头元素；最后一个元素称为表尾元素。<br>除第一个元素外，每个元素有且仅有一个直接前驱。<br>除最后一个元素外，每个元素有且仅有一个直接后继。<h3 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h3></li><li>线性表的顺序存储又称为顺序表。<br>它是用一组地址连续的存储单元（比如C语言里面的数组），依次存储线性表中的数据元素，从而使得逻<br>辑上相邻的两个元素在物理位置上也相邻。</li><li>建立顺序表的三个属性: </li></ul><p>1.存储空间的起始位置（数组名data）<br>2.顺序表最大存储容量（MaxSize）<br>3.顺序表当前的长度（length）</p><ul><li>其实数组还可以动态分配空间，存储数组的空间是在程序执行过程中通过动态存储分配语句分配</li><li>总结：<ul><li>1.顺序表最主要的特点是随机访问（C语言中基于数组），即通过首地址和元素序号可以在O(1)的时间内找到指定的元素。</li><li>2.顺序表的存储密度高，每个结点只存储数据元素。无需给表中元素花费空间建立它们之间的逻辑关系（因为物理位置相邻特性决定）</li><li>3.顺序表逻辑上相邻的元素物理上也相邻，所以插入和删除操作需要移动大量元素。<h3 id="顺序表的操作"><a href="#顺序表的操作" class="headerlink" title="顺序表的操作"></a>顺序表的操作</h3></li></ul></li><li>1.插入<ul><li>算法思路：<ul><li>1.判断i的值是否正确</li><li>2.判断表长是否超过数组长度</li><li>3.从后向前到第i个位置，分别将这些元素都向后移动一位</li><li>4.将该元素插入位置i 并修改表长</li></ul></li><li>代码</li><li>分析：<ul><li>最好情况：在表尾插入（即i=n+1），元素后移语句将不执行，时间复杂度为O(1)。</li><li>最坏情况：在表头插入（即i=1），元素后移语句将执行<br>n次，时间复杂度为O(n)。</li><li>平均情况：假设pi（pi=1/(n+1) ）是在第i个位置上插入<br>一个结点的概率，则在长度为n的线性表中插入一个结<br>点时所需移动结点的平均次数为</li></ul></li></ul></li><li>2.删除<ul><li>算法思路：<ul><li>1.判断i的值是否正确</li><li>2.取删除的元素</li><li>3.将被删元素后面的所有元素都依次向前移动一位</li><li>4.修改表长</li></ul></li><li>代码</li><li>分析<ul><li>最好情况：删除表尾元素（即i=n），无须移动元素，时间复杂度为O(1)。</li><li>最坏情况：删除表头元素（即i=1），需要移动除第一个元素外的所有元素，时间复杂度为O(n)。</li><li>平均情况：假设pi(pi=1/n)是删除第i个位置上结点的概率，则在长度为n的线性表中删除一个结点时所需移动结点的平均次数为<h3 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h3></li></ul></li></ul></li><li>线性表的链式存储是指通过一组任意的存储单元来存储线性表中的数据元素。</li><li>头结点和头指针的区别？<ul><li>不管带不带头结点，头指针始终指向链表的第一个结点，而头结点是带头结点链表中的第一个结点，结点内通常不存储信息</li></ul></li><li>为什么要设置头结点？<ul><li>1.处理操作起来方便 例如：对在第一元素结点前插入结点和删除第一结点起操作与其它结点的操作就统一了</li><li>2.无论链表是否为空，其头指针是指向头结点的非空指针，因此空表和非空表的处理也就统一了。<h3 id="单链表的操作"><a href="#单链表的操作" class="headerlink" title="单链表的操作"></a>单链表的操作</h3></li></ul></li><li>1.头插法建立单链表：<ul><li>建立新的结点分配内存空间，将新结点插入到当前链表的表头</li><li>代码</li></ul></li><li>2.尾插法建立单链表：<ul><li>建立新的结点分配内存空间，将新结点插入到当前链表的表尾</li><li>代码</li></ul></li><li>3.按序号查找结点<ul><li>在单链表中从第一个结点出发，顺指针next域逐个往下搜索，直到找到第i个结点为止,否则返回最后一个结点指针域NULL。</li><li>代码</li></ul></li><li>4.按值查找结点<ul><li>从单链表第一个结点开始，由前往后依次比较表中各结点数据域的值，若某结点数据域的值等于给定值e，则返回该结点的指针；若整个单链表中没有这样的结点，则返回NULL。</li><li>代码</li></ul></li><li>5．插入<ul><li>插入操作是将值为x的新结点插入到单链表的第i个位置上。先检查插入位置的合法性，然后找到待插入位置的前驱结点，即第i−1个结点，再在其后插入新结点。</li><li>算法思路：</li></ul></li></ul><p>1.取指向插入位置的前驱结点的指针<br>① p=GetElem(L,i-1);<br>2.令新结点<em>s的指针域指向</em>p的后继结点<br>② s-&gt;next=p-&gt;next;<br>3.令结点<em>p的指针域指向新插入的结点</em>s<br>③ p-&gt;next=s; </p><ul><li>6．删除<ul><li>删除操作是将单链表的第i个结点删除。先检查删除位置的合法性，然后查找表中第i−1个结点，即被删结点的前驱结点，再将其删除。</li><li>算法思路：</li></ul></li></ul><p>1.取指向删除位置的前驱结点的指针 p=GetElem(L,i-1);<br>2.取指向删除位置的指针 q=p-&gt;next;<br>3.p指向结点的后继指向被删除结点的后继 p-&gt;next=q-&gt;next<br>4.释放删除结点 free(q);</p><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><ul><li>定义</li><li>1.插入：(方法不唯一)<br>① s-&gt;next=p-&gt;next;<br>② p-&gt;next-&gt;prior=s;<br>③ s-&gt;prior=p;<br>④ p-&gt;next=s;</li><li>2.删除：<br>① p-&gt;next=q-&gt;next;<br>② q-&gt;next-&gt;prior=p;<br>③ free(q);</li></ul><h3 id="循环链表-amp-amp-静态链表"><a href="#循环链表-amp-amp-静态链表" class="headerlink" title="循环链表&amp;&amp;静态链表"></a>循环链表&amp;&amp;静态链表</h3><ul><li>循环单链表：循环单链表和单链表的区别在于，表中最后一个结点的指针不是NULL，而改为指向头结点，从而整个链表形成一个环</li><li>循环双链表：类比循环单链表，循环双链表链表区别于双链表就是首尾结点构成环<ul><li>当循环双链表为空表时，其头结点的prior域和next域都等于Head。</li></ul></li><li>静态链表：静态链表是用数组来描述线性表的链式存储结构。<ul><li>数组第一个元素不存储数据，它的指针域存储第一个元素所在的数组下标。链表最后一个元素的指针域值为-1。</li><li>例子<h2 id="第三章：栈和队列"><a href="#第三章：栈和队列" class="headerlink" title="第三章：栈和队列"></a>第三章：栈和队列</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3></li></ul></li><li>栈（Stack）：只允许在一端进行插入或删除操作的线性表。</li><li>栈顶（Top）：线性表允许进行插入和删除的那一端。</li><li>栈底（Bottom）：固定的，不允许进行插入和删除的另一端</li><li>特点：</li></ul><p>1.栈是受限的线性表，所以自然具有线性关<br>系。<br>2.栈中元素后进去的必然先出来，即后进先出<br>LIFO（Last In First Out）<br>    * 栈中元素后进<br>去的必然先出<br>来，即后进先<br>出LIFO（Last In<br>First Out）</p><ul><li>顺序栈<ul><li>栈是线性表的特例，那栈的顺序存储也是线性表顺序存储的简化。栈的顺序存储结构也叫作顺序栈。</li><li>顺序栈的操作<ul><li>1.判空：</li><li>2.进栈：</li><li>3.出栈：</li><li>4.读取栈顶元素：</li></ul></li></ul></li><li>共享栈<ul><li>顺序栈的存储空间大小需要事先开辟好，很多时候对每个栈各自单独开辟存储空间的利用率不如将各个栈的存储空间共享</li><li>示意图</li><li>共享栈的结构</li><li>共享栈的操作：（进栈）</li></ul></li><li>链式栈<ul><li>栈是线性表的特例，线性表的存储结构还有链式存储结构，所以也可以用链表的方式来实现栈。栈的链式存储结构也叫作链栈。</li><li>特点</li></ul></li></ul><p>1.链栈一般不存在栈满的情况。<br>2.空栈的判定条件通常定为top==NULL；<br>    * 结构<br>    * 链式栈的操作<br>        * 1.进栈<br>        * 2.出栈</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><ul><li><p>队列是只允许在一端进行插入，而在另一端进行删除的线性表</p></li><li><p>队头（Front）：允许删除的一端，又称为队首。</p></li><li><p>队尾（Rear）： 允许插入的一端。</p></li><li><p>先进入队列的元素必然先离开队列，即先进先出（First In First Out）简称FIFO</p></li><li><p>顺序队列</p><ul><li>用数组来实现队列，可以将队首放在数组下标为0的位置。</li></ul></li><li><p>循环队列</p><ul><li>把数组“掰弯”，形成一个环。Rear指针到了下标为4的位置还能继续指回到下标为0的地方。这样首尾相连的顺序存储的队列就叫循环队列</li><li>入队：rear=(rear+1)%MaxSize</li><li>出队：front=(front+1)%MaxSize</li><li>循环队列的操作<ul><li>1.入队：</li><li>2.出队：</li></ul></li><li>概要: 那如何分辨队列是空还是满呢？<ul><li>方法一：设置标志位flag，当flag=0且rear等于front时为队列空，当flag=1且rear等于front时为队列满。</li><li>方法二：我们把front=rear仅作为队空的判定条件。当队列满的时候，令数组中仍然保留一个空余单元。我们认为这种情况就是队列满了。</li></ul></li></ul></li><li><p>链式队列</p><ul><li><p>队列的链式存储结构，其实就是线性表的单链表，只不过需要加点限制，只能表尾插入元素，表头删除元素。</p></li><li><p>为了方便操作，我们分别设置队头指针和队尾指针，队头指针指向头结点，队尾指针指向尾结点。</p></li><li><p>链式队列的操作</p><ul><li><p>1.入队：我们知道队列只能从队尾插入元素，队头删除元素。于是入队就是在队尾指针进行插入结点操作。链队的插入操作和单链表的插入操作是一致的。</p></li><li><p>2.出队：出队就是头结点的后继结点出队，然后将头结点的后继改为它后面的结点。</p></li></ul></li></ul></li><li><p>双端队列</p><ul><li>双端队列是指允许两端都可以进行入队和出队操作的队列<h3 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h3></li></ul></li><li><p>1、括号匹配：假设有两种括号，一种圆的()，一种方的[]，嵌套的顺序是任意的。</p><ul><li><p>算法思想：若是左括号，入栈；若是右括号，出栈一个左括号判断是否与之匹配；检验到字符串尾，还要检查栈是否为空。只有栈空，整个字符串才是括号匹配的。</p></li><li><p>代码</p></li></ul></li><li><p>2、表达式求值：</p><ul><li></li><li>规则：从左到右扫描表达式的每个数字和符号，遇到数字就进栈，遇到符号就将处于栈顶的两个数字出栈然后跟这个符号进行运算，最后将运算结果进栈，直到最终获得结果。</li></ul></li><li><p>3、递归：</p><ul><li>要理解递归，你要先理解递归，直到你能理解递归。<br>如果在一个函数、过程或数据结构的定义中又应用了它自身，那么这个函数、过程或数据结构称为是递归定义的，简称递归。递归最重要的是递归式和递归边界。</li><li>1.阶乘<ul><li>时间复杂度：O(NlogN)</li></ul></li><li>2.斐波那契数列<ul><li>时间复杂度   O(2^n)</li></ul></li></ul></li><li><p>概要: 如何将中缀表达式转换成后缀表达式？</p><ul><li>1.按运算符优先级对所有运算符和它的运算数加括号。(原本的括号不用加)</li><li>2.把运算符移到对应的括号后。</li><li>3.去掉括号。</li><li>例子<h2 id="第四章：树"><a href="#第四章：树" class="headerlink" title="第四章：树"></a>第四章：树</h2><h3 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h3></li></ul></li><li><p>树是递归定义的结构</p></li><li><p>结点</p><ul><li>根节点：树只有一个根结点</li><li>结点的度：结点拥有的子树的数量<ul><li>度为0：叶子结点或者终端结点</li><li>度不为0：分支结点或者非终端结点<ul><li>分支结点除去根结点也称为内部结点</li></ul></li></ul></li></ul></li><li><p>树的度：树中所有结点的度数的最大值</p></li><li><p>结点关系</p><ul><li>祖先结点<ul><li>根结点到该结点的唯一路径的任意结点</li></ul></li><li>子孙结点</li><li>双亲结点<ul><li>根结点到该结点的唯一路径上最接近该结点的结点</li></ul></li><li>孩子结点</li><li>兄弟结点<ul><li>有相同双亲结点的结点</li></ul></li></ul></li><li><p>层次，高度，深度，树的高度</p><ul><li>层次：根为第一层，它的孩子为第二层，以此类推</li><li>结点的深度：根结点开始自顶向下累加</li><li>结点的高度：叶节点开始自底向上累加</li><li>树的高度（深度）：树中结点的最大层数</li></ul></li><li><p>树的性质</p><ul><li>1.树中的结点数等于所有结点的度数加1。<ul><li>证明：不难想象，除根结点以外，每个结点有且仅有一个指向它的前驱结点。也就是说每个结点和指向它的分支一一对应。<br>假设树中一共有b个分支，那么除了根结点，整个树就包含有b个结点，所以整个树的结点数就是这b个结点加上根结点，设为n，则n=b+1。而分支数b也就是所有结点的度数，证毕。</li></ul></li><li>2.度为m的树中第i层上至多有m^(i−1)个结点（i≥1）。<ul><li>证明：（数学归纳法）<br>首先考虑i=1的情况：第一层只有根结点，即一个结点，i=1带入式子满足。<br>假设第i-1层满足这个性质，第i-1层最多有m i-2个结点。<br>……… ……….<br>i-1层<br>………<br>又因为树的度为m,所以对于第i-1层的每个结点，最多<br>有m个孩子结点。所以第i层的结点数最多是i-1层的m<br>倍，所以第i层上最多有m ^(i-1)个结点。</li></ul></li><li>3.高度为h的m叉树至多有(m^h-1)/(m-1)个结点</li><li>4.具有n个结点的m叉树的最小高度为logm(n(m-1)+1) <h3 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h3></li></ul></li><li><p>顺序存储结构</p><ul><li>双亲表示法：用一组连续的存储空间存储树的结点，同时在每个结点中，用一个变量存储该结点的双亲结点在数组中的位置。</li></ul></li><li><p>链式存储结构</p><ul><li><p>孩子表示法：把每个结点的孩子结点排列起来存储成一个单链表。所以n个结点就有n个链表；<br>如果是叶子结点，那这个结点的孩子单链表就是空的；<br>然后n个单链表的的头指针又存储在一个顺序表（数组）中。</p></li><li><p>孩子兄弟表示法：顾名思义就是要存储孩子和孩子结点的兄弟，具体来说，就是设置两个指针，分别指向该结<br>点的第一个孩子结点和这个孩子结点的右兄弟结点。</p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3></li></ul></li><li><p>定义</p><ul><li>二叉树是n（n≥0）个结点的有限集合：<br>① 或者为空二叉树，即n=0。<br>② 或者由一个根结点和两个互不相交的被称为根的左子树<br>和右子树组成。左子树和右子树又分别是一棵二叉树。 <ul><li>1.每个结点最多有两棵子树。</li><li>2.左右子树有顺序</li></ul></li></ul></li><li><p>二叉树的五种基本形态：</p><ul><li>1.空树</li><li>2.只有一个根结点</li><li>3.根结点只有左子树</li><li>4.根结点只有右子树</li><li>5.根结点既有左子树又有右子树</li></ul></li><li><p>特殊二叉树</p><ul><li>1.斜树</li><li>2.满二叉树:</li><li>3.完全二叉树</li></ul></li><li><p>二叉树的性质</p><ul><li>1.非空二叉树上叶子结点数等于度为2的结点数加1</li><li>2.非空二叉树上第K层上至多有2^k−1个结点（K≥1）</li><li>3.高度为H的二叉树至多有2^H-1个结点（H≥1）</li><li>4.具有N个（N&gt;0）结点的完全二叉树的高度为 [log2(N+1)]或[log2N] +1。<h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3></li></ul></li><li><p>顺序存储</p><ul><li>二叉树的顺序存储结构就是用一组地址连续的存储单元依次自上而下、自左至右存储完全二叉树上的结点元素。</li></ul></li><li><p>链式存储</p><ul><li>二叉树每个结点最多两个孩子，所以设计二叉树的结点结构时考虑两个指针指向该结点的两个孩子。<h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3></li></ul></li><li><p>先序遍历：<br>1）访问根结点；<br>2）先序遍历左子树；<br>3）先序遍历右子树。</p><ul><li>递归</li><li>非递归</li></ul></li><li><p>中序遍历：<br>1）中序遍历左子树；<br>2）访问根结点；<br>3）中序遍历右子树。</p><ul><li>递归</li><li>非递归</li></ul></li><li><p>后序遍历：<br>1）后序遍历左子树；<br>2）后序遍历右子树；<br>3）访问根结点。</p><ul><li>递归</li><li>非递归</li></ul></li><li><p>层次遍历：<br>若树为空，则什么都不做直接返回。<br>否则从树的第一层开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序对结点逐个访问。</p></li></ul><h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><ul><li><p>N个结点的二叉链表，每个结点都有指向左右孩子的<br>结点指针，所以一共有2N个指针，而N个结点的二叉<br>树一共有N-1条分支，也就是说存在2N-(N-1)=N+1个空指针。比如左图二叉树中有6个结点，那么就有7个空<br>指针。</p></li><li><p>大量的空余指针能否利用起来？</p><ul><li>指向前驱和后继的指针称为线索，加上线索的二叉链表就称为线索链表，相应的二叉树就称为线索二叉树</li><li>对二叉树以某种次序遍历使其变为线索二叉树的过程就叫做线索化<h3 id="哈夫曼树和哈夫曼编码"><a href="#哈夫曼树和哈夫曼编码" class="headerlink" title="哈夫曼树和哈夫曼编码"></a>哈夫曼树和哈夫曼编码</h3></li></ul></li><li><p>算法的描述如下：<br>1）将这N个结点分别作为N棵仅含一个结点的二叉树，构成森林F。<br>2）构造一个新结点，并从F中选取两棵根结点权值最小的树作为新结点的左、右子树，并且将新结点的权值<br>置为左、右子树上根结点的权值之和。<br>3）从F中删除刚才选出的两棵树，同时将新得到的树加入F中。<br>4）重复步骤2）和3），直至F中只剩下一棵树为止。</p></li></ul><h2 id="第五章：图"><a href="#第五章：图" class="headerlink" title="第五章：图"></a>第五章：图</h2><h3 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h3><ul><li>定义：<br>树是N（N≥0）个结点的有限集合，N=0时，称为空树，这是一种特殊情况。在任意一棵非空树中应满足：<br>1）有且仅有一个特定的称为根的结点。<br>2）当N&gt;1时，其余结点可分为m（m&gt;0）个互不相交的有限集合T1，T2，…，Tm，其中每一个集合本身又是一棵树，并且称为根结点的子树。<ul><li>图G由顶点集V和边集E组成，记为G=(V，E)<ul><li>V(G)表示图G中顶点的有限非空集。<br>用|V|表示图G中顶点的个数，也称为图G的阶</li><li>E(G)表示图G中顶点之间的关系（边）集合。<br>用|E|表示图G中边的条数。</li></ul></li></ul></li><li>分类<ul><li>有向图<ul><li>有向边（弧）的有限集合<ul><li>弧是顶点的有序对</li><li>&lt;v,w&gt;</li><li>v是弧尾，w是弧头</li><li>v邻接到w或w邻接自v</li></ul></li></ul></li><li>无向图<ul><li>无向边的有限集合<ul><li>边是顶点的无序对</li><li>（v,w）</li><li>（v,w）=(w,v)</li><li>w，v互为邻接点</li></ul></li></ul></li></ul></li><li>简单图<ul><li>1.不存在顶点到自身的边</li><li>2.同一条边不重复出现</li></ul></li><li>多重图<ul><li>若图G中某两个结点之间的边数多于一条，又允许顶点通过通过同一个边和自己关联</li></ul></li><li>完全图<ul><li>无向完全图<ul><li>如果任意两个顶点之间都存在边</li></ul></li><li>有向完全图<ul><li>如果任意两个顶点之间都存在方向相反的两条弧</li></ul></li></ul></li><li>子图</li><li>连通图：图中任意两个顶点都是连通的</li><li>连通分量：无向图中的极大连通子图<ul><li>连通<ul><li>顶点A到顶点B有路径</li></ul></li><li>极大<ul><li>1.顶点足够多</li><li>2.极大连通子图包含这些依附这些顶点的所有边</li></ul></li><li>结论1:如果一个图有n个顶点，并且有小于n-1条边，则此图必是非连通图。</li><li>概要: 找连通分量的方法：<br>从选取一个顶点开始，以这个顶点作为一个子图，然后逐个添加与这个子图相连的顶点和边直到所有相连的顶点都加入该子图</li></ul></li><li>强连通：顶点V到顶点W和顶点W到顶点V都有路径</li><li>强连通图：图中任一对顶点都是强连通的</li><li>连通图的生成树：包含图中全部n个顶点，但是只有n-1条边的极小连通子图<ul><li>结论2:生成树去掉一条边则变成非连通图，加上一条边就会形成回路。</li></ul></li><li>度：以该顶点为一个端点的边数目<ul><li>无向图中顶点V的度是指依附于该顶点的边的条数，记为TD(v)</li><li>有向图中顶点V的度分为出度和入度<ul><li>入度（ID）是以顶点v为终点的有向边的数目</li><li>出度（OD）是以顶点V为起点的有向边的数目</li></ul></li></ul></li><li>简单路径和简单回路：顶点不重复出现的路径称为简单路径。对于回路，除了第一个和最后一个顶点其余顶点不重复出现的回路称为简单回路</li><li>权和网：图中每条边考研赋予一定意义的数值，这个数值叫做这条边的权，有权值得图称为带权图，也叫做网</li><li>路径和路径长度：顶点p到q之间的路径是指顶点序列怕保存的，p,a,b,c,d,……q。路径上边的数目就是路径长度</li><li>回路（环）：第一个和最后一个顶点相同的路径称为回路或者环</li><li>距离：从顶点u到v的最短路径长度。不存在路径则为无穷<h3 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h3></li><li>邻接矩阵（顺序存储）</li><li>邻接表（链式存储）<ul><li>十字链表（有向图）</li><li>邻接多重表（无向图）<h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3></li></ul></li><li>深度优先遍历<ul><li>深度优先搜索(DFS:Depth-First-Search):深度优先搜索类似于树的先序遍历算法<ul><li>空间复杂度：由于DFS是一个递归算法，递归是需要一个工作栈来辅助工作，最多需要图中所有顶点进栈，所以时间复杂度为O(|V|)</li><li>时间复杂度：1)邻接表：遍历过程的主要操作是对顶点遍历它的邻接点，由于通过访问边表来查找邻接点，所以时间复杂度为O(|E|),访问顶点时间为O(|V|),所以总的时间复杂度为O(|V|+|E|)<pre><code>        2)邻接矩阵：查找每个顶点的邻接点时间复杂度为O(|V|),对每个顶点都进行查找，所以总的时间复杂度为O(|V|2)</code></pre></li></ul></li></ul></li><li>广度优先遍历<ul><li>广度优先搜索(BFS:Breadth-First-Search):广度优先搜索类似于树的层序遍历算法<ul><li>空间复杂度：BFS需要借助一个队列，n个顶点均需要入队一次，所以最坏情况下n个顶点在队列，那么则需要O(|V|)的空间复杂度。    </li><li>时间复杂度：<br>1)邻接表：每个顶点入队一次，时间复杂度为O(|V|),对于每个顶点，搜索它的邻接点，就需要访问这个顶点的所有边，所以时间复杂度为O(|E|)。所以总的时间复杂度为O(|V|+|E|)<br>2)邻接矩阵：每个顶点入队一次，时间复杂度为O(|V|),对于每个顶点，搜索它的邻接点，需要遍历一遍矩阵的一行，所以时间复杂度为O(|V|),所以总的时间复杂度为O(|V|2)</li></ul></li></ul></li></ul><h3 id="图的应用"><a href="#图的应用" class="headerlink" title="图的应用"></a>图的应用</h3><ul><li>最小生成树<ul><li>普利姆（Prlm）<ul><li>①从图中找第一个起始顶点v0，作为生成树的第一个顶点，然后从这个顶点到其他顶点的所有边中选一条权值最小的边。然后把这条边的另一个顶点v和这条边加入到生成树中。</li><li>②对剩下的其他所有顶点，分别检查这些顶点与顶点v的权值是否比这些顶点在lowcost数组中对应的权值小，如果更小，则用较小的权值更新lowcost数组。</li><li>③从更新后的lowcost数组中继续挑选权值最小而且不在生成树中的边，然后加入到生成树。</li><li>④反复执行②③直到所有所有顶点都加入到生成树中。</li><li>概要:  <ul><li>双重循环，外层循环次数为n-1，内层并列的两个循环次数都是n。故普利姆算法时间复杂度为O(n2)<br>而且时间复杂度只和n有关，所以适合稠密图</li></ul></li></ul></li><li>克鲁斯卡尔（Kruskal）<ul><li>将图中边按照权值从小到大排列，然后从最小的边开始扫描，设置一个边的集合来记录，如果该边并入不构成回路的话，则将该边并入当前生成树。直到所有的边都检测完为止。</li><li>概要:  <ul><li></li><li></li><li>概要: 克鲁斯卡尔算法操作分为对边的权值排序部分和一个单重for循环，它们是并列关系，由于排序耗费时间大于单重循环，所以克鲁斯卡尔算法的主要时间耗费在排序上。排序和图中边的数量有关系，所以适合稀疏图</li></ul></li></ul></li></ul></li><li>最短路径<ul><li>迪杰斯特拉<ul><li>一个源点到其余顶点的最短路径<ul><li>该算法设置一个集合S记录已求得的最短路径的顶点，可用一个数组s[]来实现，初始化为0，当s[vi]=1时表示将顶点vi放入S中，初始时把源点v0放入S中。此外，在构造过程中还设置了两个辅助数组：<br>dist[]：记录了从源点v0到其他各顶点当前的最短路径长度，dist[i]初值为arcs[v0][i]。<br>path[]：path[i]表示从源点到顶点i之间的最短路径的前驱结点，在算法结束时，可根据其值追溯得到源点v0到顶点vi的最短路径。</li></ul></li></ul></li></ul></li></ul><p>假设从顶点0出发，也就是顶点0为源点，集合S最初只包含顶点0，邻接矩阵arcs表示带权有向图，arcs[i][j]表示有向边&lt;i，j&gt;的权值，若不存在有向边&lt;i，j&gt;，则arcs[i][j]为∞。Dijkstra算法的步骤如下：<br>1）初始化：集合S初始为{0}，dist[]的初始值dist[i]=arcs[0][i]，i=1，2，…，n-1。<br>2）找出dist[]中的最小值dist[j]，将顶点j加入集合S，即修改s[vj]=1。<br>3）修改从v0出发到集合V-S上任一顶点vk可达的最短路径长度：如果dist[j] + arcs[j][k]&lt; dist[k]，则令dist[k]=dist[j] + arcs[j][k]。另外更新path[k]=j(也就是顶点j加入集合之后如果有新的路径使得到顶点k路径变短的话就将到顶点k的路径长度修改成较短的)<br>4）重复2）～3）操作共n-1次，直到所有的顶点都包含在S中。<br>    * 弗洛伊德<br>        * 所有顶点到所有顶点的最短路径<br>            * 算法思想：<br>递推产生一个n阶方阵序列A(−1)，A(0)，…，A(k)，…，A(n−1)<br>其中A(k)[i][j]表示从顶点vi到顶点vj的路径长度，k表示绕行第k个顶点的运算步骤。初始时，对于任意两个顶点vi和vj，若它们之间存在边，则以此边上的权值作为它们之间的最短路径长度；若它们之间不存在有向边，则以∞作为它们之间的最短路径长度。以后逐步尝试在原路径中加入顶点k(k=0，1，…，n-1)作为中间顶点。如果增加中间顶点后，得到的路径比原来的路径长度减少了，则以此新路径代替原路径<br>    * 非带权图<br>        * 两点之间经过边数最少的路径<br>    * 带权图<br>        * 两点之间经过的边上权值之和最小的路径</p><ul><li><p>拓扑排序</p><ul><li><p>AOV</p><ul><li>如果我们把每个环节看成图中一个顶点，在这样一个有向图中，用顶点表示活动，用弧表示活动之间的优先关系，那么这样的有向图称为AOV网(Activity On Vertex)</li></ul></li><li><p>拓扑排序就是对一个有向图构造拓扑序列的过程，构造会有两种结果：<br>如果此图全部顶点都被输出了，说明它是不存在回路的AOV网；<br>如果没有输出全部顶点，则说明这个图存在回路，不是AOV网。</p></li><li><p>拓扑排序算法：<br>从AOV网中选择一个入度为0的顶点输出，然后删去此顶点，并删除以此顶点为弧尾的弧。重复这个步骤直到输出图中全部顶点，或者找不到入度为0的顶点为止。</p></li></ul></li><li><p>关键路径</p><ul><li>AOE(Activity On Edge):在一个表示工程的带权有向图中，用顶点表示事件，用有向边表示活动，用边上的权值表示活动的持续时间，这种有向图的边表示活动的网称为AOE网。</li></ul></li></ul><h2 id="第六章：查找"><a href="#第六章：查找" class="headerlink" title="第六章：查找"></a>第六章：查找</h2><h3 id="查找的基本概念和顺序查找"><a href="#查找的基本概念和顺序查找" class="headerlink" title="查找的基本概念和顺序查找"></a>查找的基本概念和顺序查找</h3><ul><li>查找定义：在数据集合中寻找满足某种条件的数据元素的过程称为查找</li><li>关键字：数据元素中某个可以以唯一标识该元素的数据项</li><li>平均查找长度（ASL：Average Search Length）:在查找的过程中，一次查找的长度是指需要比较的关键字次数，而平均查找长度则是所有查找过程中进行关键字的比较次数的平均值</li><li>顺序查找(线性查找)，主要用于在线性表中进行查找。从查找表的一端开始，顺序扫描查找表，依次将扫描到的关键字和待查找的值key进行比较。如果相等，则查找成功。如果扫描结束仍然没有发现相等的数据元素，则查找失败。<ul><li>1</li><li>2</li><li>3 </li><li>4</li><li>时间复杂度为O(n)<h3 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h3></li></ul></li><li>算法思路：<ul><li>首先将给定值key与表中中间位置元素的关键字比较，若相等，则查找成功，返回该元素的存储位置；若不等，则所需查找的元素只能在中间元素以外的前半部分或后半部分中。然后在缩小的范围内继续进行同样的查找，如此重复直到找到为止，或者确定表中没有所需要查找的元素，则查找不成功，返回查找失败的信息。</li></ul></li><li>折半查找分析<ul><li>折半查找判定树<ul><li>对于折半查找，查找的比较次数就是从根结点到该结点经历的结点数</li><li>时间复杂度为O(logn)</li><li>概要: 具有N个（N&gt;0）结点的完全二叉树的高度为 [log2(N+1)] 或 [log2N] +1。</li></ul></li></ul></li></ul><h3 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h3><ul><li>分块查找又称为索引顺序查找</li><li>分块查找思想：<ul><li>①确定待查找值在哪个块（折半查找）</li></ul></li></ul><p>②在确定的块中查找待查找值（顺序查找）</p><ul><li><p>分块查找分析</p><ul><li>由于分块查找实际是进行两次查找，所以整个算法的平均查找长度是两次查找的平均查找长度之和。<br>即ASL分块=ASL折半+ASL顺序<ul><li><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3></li></ul></li></ul></li><li><p>二叉排序树(Binary Search Tree 也叫二叉搜索树)或者是一棵空树，或者是具有以下性质的二叉树<br>①若左子树不空，则左子树上所有结点的值均小于它的根结点的值。<br>②若右子树不空，则右子树上所有结点的值均大于它的根结点的值。<br>③它的左右子树也是一棵二叉排序树。</p></li><li><p>算法思想</p><ul><li>由于二叉排序树的特点(左子树&lt;根结点&lt;右子树),所以每次查找一个关键字，需要先和根结点进行比较：<br>如果这个关键字小于根结点的值，则再到这个根结点的左子树进行同样的比较操作一直进行下去直到找到该关键字，表示查找成功，或者是空指针，表示查找失败。<br>如果这个关键字大于根结点的值，则再到这个根结点的右子树进行同样的比较操作一直进行下去直到找到该关键字，表示查找成功，或者是空指针，表示查找失败。<ul><li>查找关键字代码<ul><li>1 </li><li>2</li></ul></li><li>插入关键字代码<ul><li>1)空树：直接插入新结点返回成功<br>2)树不空：检查是否存在关键字重复的结点：<br>①存在：返回插入失败<br>②不存在：检查根结点的值和待插入关键字值的大小关系递归插入左右子树</li><li></li></ul></li><li>构造代码<ul><li></li></ul></li><li>删除结点<ul><li>①删除的是叶子结点<ul><li>方法：直接删去该结点即可</li></ul></li><li>②删除的是仅有左子树或者右子树的结点<ul><li>方法：“子承父业”</li></ul></li><li>③删除的是左右子树都有的结点<ul><li>仿照②类型，先将一个孩子“继承父业”，另一个孩子“归顺”于这个孩子<br>方法：找到待删除结点的直接前驱或者直接后继结点，用该结点来替换待删除结点，再删除该结点。</li></ul></li></ul></li></ul></li></ul></li><li><p>二叉排序树分析</p><ul><li>查找时间复杂度是O(n)</li></ul></li><li><p>概要: “左小右大”</p><h3 id="平衡二叉树-AVL树"><a href="#平衡二叉树-AVL树" class="headerlink" title="平衡二叉树(AVL树)"></a>平衡二叉树(AVL树)</h3></li><li><p>平衡二叉树(AVL树)是特殊的二叉排序树，特殊的地方在于左右子树的高度之差绝对值不超过1，而且左右子树又是一棵平衡二叉树。</p></li><li><p>平衡因子</p><ul><li>定义结点左子树与右子树的高度差为该结点的平衡因子，则平衡二叉树结点的平衡因子的值只可能是−1、0或1。</li></ul></li><li><p>平衡调整</p><ul><li><p>平衡二叉树的建立过程和二叉排序树的建立过程是相似的，都是从一棵空树开始陆续插入结点。不同的地方在于对于平衡二叉树的建立过程中，由于插入结点可能会破坏结点的平衡性，所以需要进行平衡调整。</p><ul><li>LL调整(左孩子的左子树上插入结点导致)<ul><li>最小不平衡子树根结点的平衡因子为2&gt;0<br>它的左孩子结点平衡因子为1&gt;0<br>两个都大于0，所以直接右旋就可以调整</li><li>概要: “正则右旋”</li></ul></li><li>RR调整(右孩子的右子树上插入结点导致)<ul><li>最小不平衡子树根结点的平衡因子为-2&lt;0<br>它的右孩子结点平衡因子为-1&lt;0<br>两个都小于0，所以直接左旋就可以调整</li><li>概要: “负则左旋”</li></ul></li><li>LR调整(左孩子的右子树上插入结点导致)</li><li>RL调整(右孩子的左子树上插入结点导致)</li><li>概要: 先局部转换为LL或RR，最后进行调整</li></ul></li></ul></li><li><p>分析</p><ul><li>含有n个结点平衡二叉树的最大深度为O(log2n)，因此，平衡二叉树的平均查找长度为O(log2n) <h3 id="B树和B-树"><a href="#B树和B-树" class="headerlink" title="B树和B+树"></a>B树和B+树</h3></li></ul></li><li><p>2-3树</p><ul><li>2-3树是一种多路查找树：2和3的意思就是2-3树包含两种结点<ul><li>1)2结点包含一个元素和两个孩子(或者没有孩子)。<br>①左子树包含的元素小于该结点的元素值，右子树包含的元素大于该结点的元素值<br>②2结点要不有两个孩子，要不就没有孩子，不允许有一个孩子</li><li>2)3结点包含一大一小两个元素和三个孩子(或者没有孩子)。(两个元素按大小顺序排列好)<br>①左子树包含的元素小于该结点较小的元素值，右子树包含的元素大于该结点较大的元素值，中间子树包含的元素介于这两个元素值之间。<br>②3结点要不有三个孩子，要不就没有孩子，不允许有一个或两个孩子</li><li>3)2-3树所有叶子结点都在同一层次</li></ul></li></ul></li><li><p>2-3-4树</p><ul><li>2-3-4树也是一种多路查找树：2和3和4的意思就是2-3-4树包含三种结点<ul><li>1)2结点包含一个元素和两个孩子(或者没有孩子)。<br>①左子树包含的元素小于该结点的元素值，右子树包含的元素大于该结点的元素值<br>②2结点要不有两个孩子，要不就没有孩子，不允许有一个孩子</li><li>2)3结点包含一大一小两个元素和三个孩子(或者没有孩子)。<br>①左子树包含的元素小于该结点较小的元素值，右子树包含的元素大于该结点较大的元素值，中间子树包含的元素介于这两个元素值之间。<br>②3结点要不有三个孩子，要不就没有孩子，不允许有一个或两个孩子</li><li>3)4结点包含小中大三个元素和四个孩子(或者没有孩子)。<br>①左子树包含的元素小于该结点最小的元素值，第二个子树包含大于最小的元素值小于中间元素值的元素，第三个子树包含大于中间元素值小于最大元素值的元素，右子树包含的元素大于该结点最大的元素值。<br>②4结点要不有四个孩子，要不就没有孩子，不允许有一个或两个或三个孩子</li><li>4)2-3-4树所有叶子结点都在同一层次</li></ul></li></ul></li><li><p>B树</p><ul><li><p>B树也是一种平衡的多路查找树，2-3树和2-3-4树都是B树的特例，我们把树中结点最大的孩子数目称为B树的阶。通常记为m。<br>一棵m阶B树或为空树，或为满足如下特性的m叉树：</p><ul><li>1）树中每个结点至多有m棵子树。（即至多含有m-1个关键字) (“两棵子树指针夹着一个关键字”)</li><li>2）若根结点不是终端结点，则至少有两棵子树。(至少一个关键字)</li><li>3）除根结点外的所有非叶结点至少有 ⌈m/2⌉棵子树。（即至少含有⌈m/2⌉-1个关键字）</li><li>4）所有非叶结点的结构如下：</li><li>5）所有的叶子结点出现在同一层次上，不带信息。(就像是折半查找判断树中查找失败的结点)</li></ul></li><li><p>1.B树的查找操作</p><ul><li>查找过程：①先让待查找关键字key和结点的中的关键字比较，如果等于其中某个关键字，则查找成功。<pre><code>    ②如果和所有关键字都不相等，则看key处在哪个范围内，然后去对应的指针所指向的子树中查找。        Eg:如果Key比第一个关键字K1还小，则去P0指针所指向的子树中查找，如果比最后一个关键字Kn还大，则去Pn指针所指向的子树中查找。</code></pre></li></ul></li><li><p>2.B树的插入操作</p><ul><li>分裂的方法：取这个关键字数组中的中间关键字(⌈n/2⌉)作为新的结点，然后其他关键字形成两个结点作为新结点的左右孩子。</li></ul></li><li><p>3.B树的删除操作</p><ul><li><p>B树中的删除操作与插入操作类似，但要稍微复杂些，要使得删除后的结点中的关键字个数≥⌈m/2⌉-1 ，因此将涉及结点的“合并”问题。由于删除的关键字位置不同，可以分为关键字在终端结点和不在终端结点上两种情况。</p><ul><li><p>1）如果删除的关键字在终端结点上（最底层非叶子结点）：<br>①结点内关键字数量大于⌈m/2⌉-1 ，这时删除这个关键字不会破坏B树的定义要求。所以直接删除。<br>②结点内关键字数量等于⌈m/2⌉-1 ，并且其左右兄弟结点中存在关键字数量大于⌈m/2⌉-1 的结点，则去兄弟阶段中借关键字。<br>③结点内关键字数量等于⌈m/2⌉-1 ，并且其左右兄弟结点中不存在关键字数量大于⌈m/2⌉-1 的结点，则需要进行结点合并。</p></li><li><p>2）如果删除的关键字不在终端结点上（最底层非叶子结点）：需要先转换成在终端结点上，再按照在终端结点     上的情况来分别考虑对应的方法。</p><ul><li>相邻关键字：对于不在终端结点上的关键字,它的相邻关键字是其左子树中值最大的关键字或者右子树中值最小的关键字。</li><li>第一种情况：存在关键字数量大于⌈m/2⌉-1 的左子树或者右子树，在对应子树上找到该关键字的相邻关键字，然后将相邻关键字替换待删除的关键字。</li><li>第二种情况：左右子树的关键字数量均等于⌈m/2⌉-1 ，则将这两个左右子树结点合并，然后删除待删除关键字。</li></ul></li></ul></li></ul></li></ul></li><li><p>B+树</p><ul><li>B+树是常用于数据库和操作系统的文件系统中的一种用于查找的数据结构</li><li>m阶的B+树与m阶的B树的主要差异在于：<br>1）在B+树中，具有n个关键字的结点只含有n棵子树，即每个关键字对应一棵子树；而在B树中，具有n个关键字的结点含有(n+1)棵子树。<br>2）在B+树中，每个结点（非根内部结点）关键字个数n的范围是 ⌈m/2⌉≤n≤m（根结点1≤n≤m），在B树中，每个结点（非根内部结点）关键字个数n的范围是⌈m/2⌉ -1≤n≤m-1（根结点：1≤n≤m-1）。<br>3）在B+树中，叶结点包含信息，所有非叶结点仅起到索引作用，非叶结点中的每个索引项只含有对应子树的最大关键字和指向该子树的指针，不含有该关键字对应记录的存储地址。<br>4）在B+树中，叶结点包含了全部关键字，即在非叶结点中出现的关键字也会出现在叶结点中；而在B树中，叶结点包含的关键字和其他结点包含的关键字是不重复的。<h3 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h3></li></ul></li><li><p>散列表：根据给定的关键字来计算出关键字在表中的地址的数据结构。也就是说，散列表建立了关键字和存储地址之间的一种直接映射关系。</p></li><li><p>散列函数：一个把查找表中的关键字映射成该关键字对应的地址的函数，记为Hash(key)=Addr。</p></li><li><p>散列函数可能会把两个或两个以上的不同关键字映射到同一地址，称这种情况为“冲突”，这些发生碰撞的不同关键字称为同义词。</p></li><li><p>构造散列函数的tips：</p><ul><li>1）散列函数的定义域必须包含全部需要存储的关键字，而值域的范围则依赖于散列表的大小或地址范围。</li><li>2）散列函数计算出来的地址应该能等概率、均匀地分布在整个地址空间，从而减少冲突的发生。</li><li>3）散列函数应尽量简单，能够在较短的时间内就计算出任一关键字对应的散列地址。</li></ul></li><li><p>1.常用Hash函数的构造方法：</p><ul><li>1.开放定址法：直接取关键字的某个线性函数值为散列地址，散列函数为H(key)=a×key+b。式中，a和b是常数。这种方法计算最简单，并且不会产生冲突</li><li>2.除留余数法：假定散列表表长为m，取一个不大于m但最接近或等于m的质数p，利用以下公式把关键字转换成散列地址。散列函数为H(key)=key % p<br>除留余数法的关键是选好p，使得每一个关键字通过该函数转换后等概率地映射到散列空间上的任一地址，从而尽可能减少冲突的可能性</li><li>3.数字分析法：设关键字是r进制数（如十进制数），而r个数码在各位上出现的频率不一定相同，可能在某些位上分布均匀些，每种数码出现的机会均等；而在某些位上分布不均匀，只有某几种数码经常出现，则应选取数码分布较为均匀的若干位作为散列地址。这种方法适合于已知的关键字集合</li><li>4.平方取中法：顾名思义，取关键字的平方值的中间几位作为散列地址。具体取多少位要看实际情况而定。这种方法得到的散列地址与关键字的每一位都有关系，使得散列地址分布比较均匀。</li><li>5.折叠法：将关键字分割成位数相同的几部分（最后一部分的位数可以短一些），然后取这几部分的叠加和作为散列地址，这种方法称为折叠法。关键字位数很多，而且关键字中每一位上数字分布大致均匀时，可以采用折叠法得到散列地址。</li></ul></li><li><p>2.常用Hash函数的冲突处理办法：</p><ul><li>1.开放定址法：将产生冲突的Hash地址作为自变量，通过某种冲突解决函数得到一个新的空闲的Hash地址。<ul><li>1）线性探测法：冲突发生时，顺序查看表中下一个单元（当探测到表尾地址m-1时，下一个探测地址是表首地址0），直到找出一个空闲单元（当表未填满时一定能找到一个空闲单元）或查遍全表。</li><li>2）平方探测法：设发生冲突的地址为d,平方探测法得到的新的地址序列为d+12，d-12，d+22，d-22……<br>平方探测法是一种较好的处理冲突的方法，可以避免出现“堆积”问题，它的缺点是不能探测到散列表上的所有单元，但至少能探测到一半单元。</li><li>3）再散列法：又称为双散列法。需要使用两个散列函数，当通过第一个散列函数H(Key)得到的地址发生冲突时，则利用第二个散列函数Hash2(Key)计算该关键字的地址增量。</li><li>4）伪随机序列法：当发生地址冲突时，地址增量为伪随机数序列，称为伪随机序列法。</li></ul></li><li>2.拉链法：对于不同的关键字可能会通过散列函数映射到同一地址，为了避免非同义词发生冲突，可以把所有的同义词存储在一个线性链表中，这个线性链表由其散列地址唯一标识。拉链法适用于经常进行插入和删除的情况。</li><li>3.散列表的查找过程：类似于构造散列表，给定一个关键字Key。<br>先根据散列函数计算出其散列地址。然后检查散列地址位置有没有关键字。<br>   1)如果没有，表明该关键字不存在，返回查找失败。<br>   2)如果有，则检查该记录是否等于关键字。<pre><code>       ①如果等于关键字，返回查找成功。       ②如果不等于，则按照给定的冲突处理办法来计算下一个散列地址，再用该地址去执行上述过程。</code></pre></li><li>4.散列表的查找性能：和装填因子有关。<ul><li></li><li>α越大，表示装填的记录越“满”，发生冲突的可能性就越大，反之发生冲突的可能性越小<h2 id="第七章：排序"><a href="#第七章：排序" class="headerlink" title="第七章：排序"></a>第七章：排序</h2><h3 id="排序的基本知识"><a href="#排序的基本知识" class="headerlink" title="排序的基本知识"></a>排序的基本知识</h3></li></ul></li></ul></li><li><p>定义：排序就是将原本无序的序列重新排列成有序的序列。</p></li><li><p>排序的稳定性</p><ul><li>如果待排序表中有两个元素Ri、Rj，其对应的关键字keyi=keyj，且在排序前Ri在Rj前面，如果使用某一排序算法排序后，Ri仍然在Rj的前面，则称这个排序算法是稳定的，否则称排序算法是不稳定的。<h3 id="插入类排序"><a href="#插入类排序" class="headerlink" title="插入类排序"></a>插入类排序</h3></li></ul></li><li><p>直接插入排序</p><ul><li>直接插入排序：首先以一个元素为有序的序列，然后将后面的元素依次插入到有序的序列中合适的位置直到所有元素都插入有序序列。</li><li>时间复杂度为O(n)</li><li>直接插入排序是稳定性是稳定的。</li></ul></li><li><p>折半插入排序</p><ul><li>折半插入排序将比较和移动这两个操作分离出来，也就是先利用折半查找找到插入的位置，然后一次性移动元素，再插入该元素。</li><li>折半插入排序的时间复杂度为O(n^2)</li><li>稳定性：和直接插入排序稳定性相同，是稳定的。</li></ul></li><li><p>希尔排序</p><ul><li>希尔排序的基本思想：希尔排序本质上还是插入排序，只不过是把待排序序列分成几个子序列，再分别对这几个子序列进行直接插入排序。<ul><li>①先以增量5来分割序列，也就是下标为0,5,10,15…的关键字分成一组，下标为1,6,11,16..分成一组,然后对这些组分别进行直接插入排序，这就完成了一轮希尔排序。</li><li>②缩小增量(d1=n/2，di+1= [di/2]，比如10个数据序列，第一次增量d1=10/2=5,第二次增量d2= [d1/2]= [5/2]=2,并且最后一个增量等于1),所以第二轮以增量为2进行类似的排序过程。</li><li>③接下来的第三轮，第四轮…都是类似的过程，直到最后一轮以增量为1。此时就是前面所说的直接插入排序。</li><li>概要:  </li></ul></li><li>时间复杂度：…  希尔排序的时间复杂度约为O(n^1.3)    在最坏情况下希尔排序的时间复杂度为O(n^2)</li><li>空间复杂度：希尔排序的空间复杂度为O(1)</li><li>稳定性：不稳定，由于不同的增量可能就会把相等的关键字划分到两个直接插入排序中进行排序， 可能就会造成相对顺序变化。<h3 id="交换类排序"><a href="#交换类排序" class="headerlink" title="交换类排序"></a>交换类排序</h3></li></ul></li><li><p>冒泡排序</p><ul><li>假设待排序表长为n，从后往前（或从前往后）两两比较相邻元素的值，若为逆序（即A[i-1]&gt;A[i]），则交换它们，直到序列比较完。我们称它为一趟冒泡，结果将最小的元素交换到待排序列的第一个位置。下一趟冒泡时，前一趟确定的最小元素不再参与比较，待排序列减少一个元素，每趟冒泡的结果把序列中的最小元素放到了序列的最终位置，……，这样最多做n-1趟冒泡就能把所有元素排好序。</li><li>空间复杂度：交换时开辟了存储空间来存储中间变量，所以空间复杂度为O(1)</li><li>时间复杂度</li><li>稳定性：当两个关键字相等，if判断条件不成立，所以不会发生数据移动。所以是稳定的。</li></ul></li><li><p>快速排序</p><ul><li>快速排序是一种基于分治法的排序方法。<br>每一趟快排选择序列中任一个元素作为枢轴(pivot)(通常选第一个元素)，将序列中比枢轴小的元素都移到枢轴前边，比枢轴大的元素都移到枢轴后边。<ul><li>1</li><li>2</li></ul></li><li>时间复杂度：<br>最好情况下时间复杂度为O(nlogn) ,待排序序列越无序，算法效率越高。<br>最坏情况下时间复杂度为O(n^2)，待排序序列越有序，算法效率越低。</li><li>空间复杂度：<br>由于快速排序是递归的，需要借助一个递归工作栈来保存每一层递归调用的必要信息，其容量应与递归调用的最大深度一致。<br>最好情况下为 ⌈log2(n+1)⌉(每次partition都很均匀)递归树的深度O(logn)<br>最坏情况下，因为要进行n-1次递归调用，所以栈的深度为O(n)；</li><li>稳定性：快速排序是不稳定的，是因为存在交换关键字。<h3 id="选择类排序"><a href="#选择类排序" class="headerlink" title="选择类排序"></a>选择类排序</h3></li></ul></li><li><p>简单选择排序</p><ul><li></li><li>空间复杂度：需要额外的存储空间仅为交换元素时借助的中间变量，所以空间复杂度是O(1)</li><li>时间复杂度：<br>关键操作在于交换元素操作，整个算法由双重循环组成，外层循环从0到n-2一共n-2+1=n-1次，<br>对于第i层外层循环，内层循环执行n-1-(i+1)+1=n-i-1次。<pre><code>            当i=0,内层循环执行n-1次，当i=n-2,内层循环执行1次，所以是一个等差数列求和,一共为(1+n-1)(n-1)/2=n(n-1)/2 ,所以时间复杂度为O(n^2)</code></pre></li><li>稳定性：不稳定   原因就在于交换部分会打破相对顺序</li></ul></li><li><p>堆排序</p><ul><li><p>什么是堆？</p><ul><li>堆是一棵完全二叉树，而且满足任何一个非叶结点的值都不大于(或不小于)其左右孩子结点的值。<ul><li>如果是每个结点的值都不小于它的左右孩子结点的值，则称为大顶堆。</li><li>如果是每个结点的值都不大于它的左右孩子结点的值，则称为小顶堆。</li></ul></li></ul></li><li><p>什么是堆排序？</p><ul><li><p>我们知道对于一个堆来说，它的根结点是整个堆中所有结点的值的最大值(大顶堆)或者最小值(小顶堆)。所以堆排序的思想就是每次将无序序列调节成一个堆，然后从堆中选择堆顶元素的值，这个值加入有序序列，无序序列减少一个，再反复调节无序序列，直到所有关键字都加入到有序序列。</p><ul><li></li><li></li></ul></li><li><p>时间复杂度：<br>堆排序的总时间可以分为①建堆部分+②n-1次向下调整堆</p><p>堆排序的时间复杂度为O(n)+O(nlog2n)=O(nlog2n)</p></li><li><p>堆排序不稳定</p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3></li></ul></li></ul></li><li><p>假定待排序表含有n个记录，则可以看成是n个有序的子表，每个子表长度为1，然后两两归并，得到 ⌈n/2⌉个长度为2或1的有序表；再两两归并，……如此重复，直到合并成一个长度为n的有序表为止，这种排序方法称为2-路归并排序。</p><ul><li></li><li></li></ul></li><li><p>例如：49 38 65 97 76 13 27</p><ul><li>①首先将整个序列的每个关键字看成一个单独的有序的子序列</li><li>②两两归并，49和38归并成{38 49} ，65和97归并成{65 97}，76和13归并成{13 76}，27没有归并对象</li><li>③两两归并，{38 49}和{65 97}归并成{38 49 65 97}，{13,76}和27归并成{13 27 76}</li><li>④两两归并，{38 49 65 97}和{13 27 76}归并成{13 27 38 49 65 76 97}</li></ul></li><li><p>时间复杂度：O(nlog2n)</p></li><li><p>空间复杂度:因为需要将这个待排序序列转存到一个数组，所以需要额外开辟大小为n的存储空间，即空间复杂度为O(n)</p></li><li><p>稳定性：稳定</p><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3></li><li><p>基数排序(也叫桶排序)是一种很特别的排序方法，它不是基于比较进行排序的，而是采用多关键字排序思想（即基于关键字各位的大小进行排序的），借助“分配”和“收集”两种操作对单逻辑关键字进行排序。基数排序又分为最高位优先（MSD）排序和最低位优先（LSD）排序。</p></li><li><p>例子：53, 3, 542, 748, 14, 214, 154, 63, 616</p><ul><li>补充位数：053, 003, 542, 748, 014, 214, 154, 063, 616</li><li>桶实际是一个队列，先进先出(从桶的上面进，下面出)</li><li>关键字数量为n,关键字的位数为d,比如748 d=3，r为关键字的基的个数，就是组成关键字的数据的种类，比如十进制数字一共有0至9一共10个数字，即r=10</li></ul></li><li><p>空间复杂度：需要开辟关键字基的个数个队列，所以空间复杂度为O(r)</p></li><li><p>时间复杂度：需要进行关键字位数d次”分配”和”收集”，一次”分配”需要将n个关键字放进各个队列中，一次”收集”需要将r个桶都收集一遍。所以一次”分配”和一次”收集”时间复杂度为O(n+r)。d次就需要O(d(n+r))的时间复杂度。</p></li><li><p>稳定性：由于是队列，先进先出的性质，所以在分配的时候是按照先后顺序分配，也就是稳定的，所以收集的时候也是保持稳定的。即基数排序是稳定的排序算法。</p><h3 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h3></li><li><p>需要将待排序的记录存储在外存上，排序时再把数据一部分一部分的调入内存进行排序。在排序过程中需要多次进行内存和外存之间的交换，对外存文件中的记录进行排序后的结果仍然被放到原有文件中。这种排序的方法就叫做外部排序。</p></li><li><p>如何得到初始的归并段</p><ul><li>置换选择排序：解决排序段放入内存的问题</li></ul></li><li><p>如何减少多个归并段的归并次数</p><ul><li>最佳归并树：最少的归并次数（I/O次数）</li></ul></li><li><p>如何每次m路归并快速得到最小的关键字</p><ul><li>败者树：减少比较次数</li></ul></li><li><p>概要: 内存容量无法容纳大量数据</p><h2 id="二叉树与树与森林"><a href="#二叉树与树与森林" class="headerlink" title="二叉树与树与森林"></a>二叉树与树与森林</h2><h3 id="树与二叉树"><a href="#树与二叉树" class="headerlink" title="树与二叉树"></a>树与二叉树</h3></li><li><p>如何将一棵树转化成二叉树？</p><ul><li>树的孩子兄弟表示法与二叉树的二叉链表表示法都是用到两个指针<ul><li>将孩子兄弟表示法理解成二叉链表</li></ul></li><li>树转换成二叉树的手动模拟方法：<ul><li>①将同一结点的各个孩子用线串连起来</li><li>②将每个结点的子树分支，从左往右，除了第一个以外全部删除</li><li>概要: 例子</li></ul></li></ul></li><li><p>如何将一棵二叉树转化成树？</p><ul><li>二叉树转换成树的手动模拟方法：<ul><li>①将二叉树从上到下分层，并调节成水平方向。<br>(分层方法：每遇到左孩子则为一层)</li><li>②找到每一层的双亲结点，方法为它的上一层相连的那个结点就是双亲结点。<br>例如bcd这一层，与它相连的上一层结点即为a,所以bcd这三个结点的双亲结点都是a.</li><li>③将每一层结点和其双亲结点相连，同时删除该双亲结点各个孩子结点之间的联系。</li><li>概要: 例子<h3 id="森林与二叉树"><a href="#森林与二叉树" class="headerlink" title="森林与二叉树"></a>森林与二叉树</h3></li></ul></li></ul></li><li><p>森林：森林是m（m≥0）棵互不相交的树的集合</p></li><li><p>如何将森林转换成二叉树？</p><ul><li>森林转换成树的手动模拟方法：<ul><li>①将森林中每棵树都转换成二叉树</li><li>②将第二棵树作为第一棵树的根结点的右子树，将第三棵树作为第二棵树的根结点的右子树..依次类推</li><li>概要: 例子</li></ul></li></ul></li><li><p>如何将二叉树转换成森林？</p><ul><li>二叉树转换成森林的手动模拟方法：<ul><li>反复断开二叉树根结点的右孩子的右子树指针，直到不存在根结点有右孩子的二叉树为止。</li><li>概要: 例子<h3 id="树与森林的遍历"><a href="#树与森林的遍历" class="headerlink" title="树与森林的遍历"></a>树与森林的遍历</h3></li></ul></li></ul></li><li><p>先序：先访问根结点，再访问根结点的每棵子树。           访问子树也是按照先序的要求</p></li><li><p>后序：先访问根结点的每棵子树，再访问根结点。           访问子树也是按照先序的要求</p></li><li><p>树的先序遍历等于它对应二叉树的先序遍历，后序遍历等于它对应的二叉树的中序遍历</p></li><li><p>概要: 例子</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西江月·阻风山峰下</title>
      <link href="/posts/9c9b.html"/>
      <url>/posts/9c9b.html</url>
      
        <content type="html"><![CDATA[<h1 id="西江月·阻风山峰下"><a href="#西江月·阻风山峰下" class="headerlink" title="西江月·阻风山峰下"></a>西江月·阻风山峰下</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​            西江月·阻风山峰下</p><p>​                                                                宋·张孝祥</p><p>满载一船秋色，平铺十里湖光。波神留我看斜阳，放起鳞鳞细浪。<br>明日风回更好，今宵露宿何妨？水晶宫里奏霓裳，准拟岳阳楼上。        </p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>​        满载着一船的秋色，行驶在广阔平展的江面上。水神有意留住我观看夕阳西下的美丽景色，吹起鳞鳞波浪，泛起波光，让我再不能行往远方。</p><p>​        如果明日风向回转，天气变好，那么今夜露宿于此又有什么关系呢？阵阵波涛声好似龙宫中奏演的《霓裳羽衣曲》，明天准能在岳阳楼上欣赏洞庭湖的美景胜状。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>山峰：指黄陵山。（黄陵山在湖南湘阴县北洞庭湖边。湘水由此入湖。相传山上有舜之二妃娥皇、女英的庙，世称黄陵庙。词题一作“黄陵庙”。词句也稍有差异）</li><li>鳞鳞：形容波纹细微如鱼鳞。</li><li>风回：指风向转为顺风。</li><li>水晶宫：古代传说水中的宫殿。</li><li>霓裳：即《霓裳羽衣曲》，唐代著名乐舞名。</li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><blockquote><p>​       《西江月·阻风山峰下》写航船遇风受阻的情景，写景、抒情，乃至对“明日”的设想，着笔轻松，无半点沮丧之处。全词语言浅易而意境幽雅，读来只觉作者张孝祥对山水无限热爱，却不见船遇逆风受阻的懊恼，这是此词的特色，作者张孝祥构思独到之处。</p></blockquote><p>　　《西江月·阻风山峰下》上片写行船遇风受阻，泊舟山下的所见与感受。</p><p>　　“满载一船秋色，平铺十里湖光。”开头两句，写风尚未起时的风光。“一船秋色”由作者的感受着笔，勾勒出时令特征，引人遐想，可以想见，此时周围的山色浓郁苍翠，万物生机勃勃，开花的花朵艳丽，结果的果实累累；“十里湖光”写出湖面宽广坦荡。这两个对偶句用“满载”和“平铺”相对，将湖光和山色一并画出，前句说美丽的秋景尽收眼底；后句说无风时湖水平稳，远远望去，就象“平铺”在那儿。水光山色，交相辉映，船上人心旷神怡，其乐无穷。此二句纯属写景，而作者张孝祥欣悦之情尽在其中，即所谓景中有情。</p><p>　　“波神”二句说，水神有意留住我观看夕阳西下的美丽景色，放起鱼鳞般的波纹。这是写的天气咋变，微风初起时的湖上景色，也是变天的前兆。有经验的船工势必要抛锚停舟，采取应急措施，因为这霞光辉映，“鳞鳞细浪”过后，将是范仲淹在《岳阳楼记》中描写的“浊浪排空”、“樯倾楫摧”的恶劣天气。这两句以幽默的手法写航船遇风受阻被迫停泊的情景，反衬出作者此时的心境十分安闲自在。用“斜阳”点明时间是傍晚，以“细浪”说明天气变化，要起风，皆是妙笔。</p><p>　　《西江月·阻风山峰下》下片写停船后作者的心里活动。“明日风回更好”，写他期待风向回转，天气变好，及时登程的心情。“今宵露宿何妨？”“何妨”，犹言“有什么关系呢”，实际上是无可奈何的话，但也表现了他在迫不得已的情况下“露宿”时的旷达胸襟。“水晶宫里奏霓裳”，“水晶宫”，俗谓“龙宫”；“霓裳”，即《霓裳羽衣曲》，一支大型歌舞曲的名字。作者听到阵阵波涛声，奇特的想象油然而生，把水声比喻作龙宫的音乐。龙宫既然奏欢庆之乐，明日准是好天气，航船正常前进，“准拟岳阳楼上”，尾句设想，明天准能在岳阳楼上欣赏洞庭湖的美景胜状。　　</p><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>　　公元1167年（在宋孝宗乾道三年）张孝祥当时正在知潭州（今湖南长沙市）。后改官离开湖南，乘舟北上，途经洞庭湖畔的黄陵山时，遇风受阻，于是写了这首词。《宋六十名家词》题作《黄陵庙》，个别语句亦稍有出入。</p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>​        张孝祥（1132年－1169年），字安国，号于湖居士，汉族，简州（今属四川）人，生于明州鄞县。宋朝词人。著有《于湖集》40卷、《于湖词》1卷。其才思敏捷，词豪放爽朗，风格与苏轼相近，孝祥“尝慕东坡，每作为诗文，必问门人曰：‘比东坡如何？’”</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hosts文件</title>
      <link href="/posts/d3bc.html"/>
      <url>/posts/d3bc.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hosts-文件"><a href="#Hosts-文件" class="headerlink" title="Hosts 文件"></a>Hosts 文件</h1><blockquote><p>​    Hosts，C:\Windows\System32\drivers\etc 路径下一个没有扩展名的文件，这个小小的 文件通常不到 1MB，原理也很简单，但应用场景却非常广泛。</p></blockquote><h2 id="1-Hosts-到底干什么"><a href="#1-Hosts-到底干什么" class="headerlink" title="1.Hosts 到底干什么"></a>1.Hosts 到底干什么</h2><p>了解 Hosts 工作原理前要先了解互联网工作原理。</p><p>当我们访问一个网站的时候，<strong>实际上访问的是这个网站所在服务器的 「IP 地址」</strong>，比如通过「220.181.38.148」也能打开百度的首页。</p><p>但是「IP 地址」是数字，不便于记忆，所以我们给不同网站的「IP 地址」取名，也就是网站的「域名」，比如<a href="https://www.baidu.com/。" target="_blank" rel="noopener">https://www.baidu.com/。</a></p><p>在 ARPANET（全球互联网的前生）发展初期是没有 DNS 的，整个网络中服务器数量都非常少，每台电脑只使用 Hosts 来解析不同服务器的「IP 地址」，后来互联网迅速壮大，单靠本地 Hosts 文件已经无法装下如此多信息，这才诞生了 DNS 。</p><p><strong>所以，Hosts 文件相当于网站的「通讯录」，它记录着不同「域名」对应的「IP 地址」。</strong></p><p>在操作系统中 Hosts 文件的优先级高于 DNS 服务器，如果 Hosts 有服务器信息，则直接调用，否则才询问 DNS 服务器。</p><p>正是利用 Hosts 的高优先级，将错误的「IP 地址」与域名绑定，就实现了屏蔽某些服务器的效果。</p><h2 id="2-Hosts-文件格式"><a href="#2-Hosts-文件格式" class="headerlink" title="2.Hosts 文件格式"></a>2.Hosts 文件格式</h2><p>Hosts 格式非常简单，左边为「服务器 IP 地址」，右边是对应域名，中间以最少一个空格隔开。</p><h2 id="3-Hosts-应用场景"><a href="#3-Hosts-应用场景" class="headerlink" title="3.Hosts 应用场景"></a>3.Hosts 应用场景</h2><p>大多数操作系统都有一个与 Hosts 类似功能的文件，工作原理也一样。</p><p>在 Windows 系统中，我们可能无法直接在「etc 文件夹」中修改保存它，可以将它复制到桌面，然后用记事本打开，修改后再复制回去。</p><p><strong>1、屏蔽广告和破解</strong></p><p>现在的网页广告大多是专门的广告投放公司在做，一部分广告屏蔽工具就是替换「无效的IP」来实现屏蔽广告的效果。</p><p>127.0.0.1 就常用来作屏蔽 IP，这是「本机回送地址」，也就是你是用的电脑。</p><p>比如我们在 Hosts 文件中加入 127.0.0.1 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 那就无法打开百度了</p><p>同样利用这个原理，一些破解软件，也通过添加错误的 Hosts 信息来屏蔽激活服务器，避免查询激活状态。</p><p><strong>2、访问 DNS 错误的网站</strong></p><p>现在我们访问网页都是通过 DNS 解析 IP 地址，如果使用本地 Hosts 则可以跳过这一步直接访问服务器 IP，可以提升网页打开速度，不过现在的 DNS 服务器响应速度都很快，大多数时候没必要这样做。</p><p>而有时候，有些网站，因为有些原因，导致 DNS 服务器无法给出正确的 IP 地址，也可以通过 Hosts 来代劳。</p><p><strong>3、建立映射关系</strong></p><p>有些公司的局域网内有自己的服务器，有些人也有自己的 NAS，每次输入 IP 访问有些麻烦，也可以再 Hosts 中将局域网中服务器 IP 与任意网址绑定，这样通过网址也能访问局域网中本没有域名的服务器。</p><p><strong>4、被滥用</strong></p><p>Hosts 简单又强大，自然就免不得被恶意使用，比如使用修改过的镜像，或者流氓PE安装系统，可能你的 Hosts 就已经被人动过手脚，他们将一些常用网站的 IP 换到自己的网站，以赚取浏览，甚至将用户导向一些还原度非常高的山寨网站上，骗取账户密码甚至财产。</p><p>不过还好只是修改 Hosts 并不会造成致命的系统安全故障，大家尽量使用微软提供的官方镜像和安装工具装系统就好了。</p><p><strong>如果你的 Hosts 已经被污染，也可以直接删除这个文件，或者到别的电脑上复制一个过来。</strong></p><p>最后需要注意，因为 Hosts 文件配置的是「静态IP」，如果服务器更新了IP地址，本地Hosts 就会失效，需要及时更新 Hosts 文件才行。</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>临江仙·夜登小阁，忆洛中旧游</title>
      <link href="/posts/2c57.html"/>
      <url>/posts/2c57.html</url>
      
        <content type="html"><![CDATA[<h1 id="临江仙·夜登小阁，忆洛中旧游"><a href="#临江仙·夜登小阁，忆洛中旧游" class="headerlink" title="临江仙·夜登小阁，忆洛中旧游"></a>临江仙·夜登小阁，忆洛中旧游</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​          临江仙·夜登小阁，忆洛中旧游</p><p>​                                                                宋·陈与义</p><p>忆昔午桥桥上饮，坐中多是豪英。长沟流月去无声。杏花疏影里，吹笛到天明。<br>二十余年如一梦，此身虽在堪惊。闲登小阁看新晴。古今多少事，渔唱起三更。        </p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>​        回忆当年在午桥畅饮，在座的都是英雄豪杰。月光映在河面，随水悄悄流逝，在杏花稀疏的花影中，吹起竹笛直到天明。</p><p>​       二十多年的经历好似一场梦，我虽身在，回首往昔却胆战心惊。闲来无事登上小阁楼观看新雨初晴的景致。古往今来多少历史事迹转瞬即逝，只有把它们编成歌的渔夫，还在那半夜三更里低声歌唱。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>临江仙：词牌名，又称《鸳鸯梦》、《雁后归》、《庭院深深》。双调，上片五句，押三平韵，三十字；下片同，共六十字。</li><li>午桥：在洛阳南面。坐中：在一起喝酒的人。</li><li>豪英：出色的人物。这两句说：想从前在午桥桥头饮宴，在一起喝酒的都是英雄好汉。</li><li>长沟流月：月光随着流水悄悄地消逝。去无声：表示月亮西沉，夜深了。</li><li>疏影：稀疏的影子。这两句说，在杏花稀疏的影子里吹起短笛，一直欢乐到天明。</li><li>二十余年：二十多年来的经历（包括北宋亡国的大变乱）。堪惊：总是心战胆跳。</li><li>新晴：新雨初晴。晴，这里指晴夜。渔唱：打鱼人编的歌儿。</li><li>三更：古代漏记时，自黄昏至拂晓分为五刻，即五更，三更正是午夜。</li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><blockquote><p>​        这首词是作者晚年追忆洛中朋友和旧游而作的。上片写对已经沦落敌国之手的家乡以及早年自在快乐生活的回顾。下片宕开笔墨回到现实，概括词人从踏上仕途所经历的颠沛流离和国破家亡的痛苦生活，结句将古今悲慨、国恨家愁，都融入“渔唱”之中，将沉挚的悲感化为旷达的襟怀。此词直抒胸臆，表情达意真切感人，通过上下两片的今昔对比，萌生对家国和人生的惊叹与感慨，韵味深远绵长。</p></blockquote><p>　　上片忆旧。</p><p>　　“忆昔午桥桥上饮，坐中多是豪英。”回想往昔在午桥桥上宴饮，在一起喝酒的人大多是英雄豪杰。用“忆”字开篇，直接了当把往事展开来。“午桥”是唐代白居易、刘禹锡、裴度吟诗唱和、举杯相欢的地方。作者青年时期，追寻遗韵，仰慕前贤，在故乡洛阳，与当时“豪英”一起，也在午桥宴饮聚会，把酒临风。</p><p>　　“长沟流月去无声，杏花疏影里，吹笛到天明。”白天和朋友们在午桥畅饮，晚上围坐在杏树底下尽情地吹着悠扬的笛子，一直玩到天明，竟然不知道碧空的月光随着流水静悄悄地消失了。桥上欢歌笑语，桥下一片宁静，以静衬动。这三句写景叙事，优美自然，它如同明净澄澈的清水一样。特别是“杏花疏影里，吹笛到天明”两句， “杏花”则点明在春天的夜晚，豪杰们抚琴弄笛，那情致高雅的笛声此起彼伏。作者以初春的树林为背景，利用明月的清辉照射在杏花枝上所撒落下来的稀疏花影，与花影下吹奏出来的悠扬笛声，组成一幅富有空间感的恬静、清婉、奇丽的画面，将作者那种充满闲情雅兴的生活情景真实地反映了出来。</p><p>　　下片感怀。</p><p>　　“二十余年如一梦，此身虽在堪惊。”作者在政和三年（1113年）做官后，曾遭谪贬；特别是靖康之变，北宋沦亡，他逃到南方，饱尝了颠沛流离、国破家亡的痛苦。残酷的现实和往昔的一切形成鲜明的对照，很自然会有一场恶梦的感触。这两句概括了这段时间里国家和个人的激剧变化的情况。这里，作者以饱蘸着久历艰难和劫后余生的血泪的笔触，写下这感慨深沉的诗句，发人深思，启人遐想。经历了国破家亡，战事连连之后，曾在一起吟诗饮酒的豪杰们如今散落各方，九死一生，身世之感和家国之痛油然而生。</p><p>　　接着写道：“闲登小阁看新晴。古今多少事，渔唱起三更。”“闲登”句是说：我闲散无聊地登上小阁，观看这雨后新晴的月色。这旬点题，写明作此词的时间、地点和心境。“新晴”与“长沟流月”照应，巧妙地将忆中之事与目前的处境联系起来，作者今昔不同的精神状况从中得以再现。“古今多少事，渔唱起三更。”把国家兴亡和人生的感慨都托之于渔唱，进一步表达作者内心寂寞悲凉的心情。古往今来的大事已经转瞬即逝了，只有把它们编成歌儿的渔夫，还在那半夜三更里低声歌唱。这是低沉的感叹，软弱的呻吟，无能为力的自我表白。这种看破世情、回避现实的消极态度，从侧面显示诗人对现实的极度不满，这是乱世怀古伤今的主题。</p><p>　　这首词通过回忆在洛阳的游乐来抒发作者对国家沦陷的悲痛和漂泊四方的寂寞。以对比的手法，明快的笔调，通过对旧游生活的回忆，抒发了北宋亡国后深沉的感慨。寥寥几笔，勾画出来的自我形象相当丰满。</p><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>　　这首词大概是在公元1135年（宋高宗绍兴五年）或六年陈与义退居青墩镇僧舍时所作，时年四十六或四十七岁。北宋灭亡，陈与义流离逃难，艰苦备尝，而南宋朝廷在播迁之后，仅能自立，他回忆二十多年的往事，百感交集，不禁感叹今昔巨变，写下了这首词。</p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>​        陈与义(1090-1138)，字去非，号简斋，汉族，其先祖居京兆，自曾祖陈希亮迁居洛阳，故为宋代河南洛阳人（现在属河南）。他生于宋哲宗元祐五年(1090年)，卒于南宋宋高宗绍兴八年(1138年)。北宋末，南宋初年的杰出诗人，同时也工于填词。其词存于今者虽仅十余首，却别具风格，尤近于苏东坡，语意超绝，笔力横空，疏朗明快，自然浑成，著有《简斋集》。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登快阁</title>
      <link href="/posts/6774.html"/>
      <url>/posts/6774.html</url>
      
        <content type="html"><![CDATA[<h1 id="登快阁"><a href="#登快阁" class="headerlink" title="登快阁"></a>登快阁</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​                        登快阁</p><p>​                                    宋·黄庭坚</p><p>痴儿了却公家事，快阁东西倚晚晴。<br>落木千山天远大，澄江一道月分明。<br>朱弦已为佳人绝，青眼聊因美酒横。<br>万里归船弄长笛，此心吾与白鸥盟。</p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>我这个呆子办完公事，登上了快阁，在这晚晴的余辉里倚栏远眺。<br>远望秋山无数，落叶飘零，天地更加辽远阔大。朗朗明月下澄江淙淙流过，月光下显得更加空明澄澈。<br>友人远离，早已没有弄弦吹箫的兴致了，只好清樽美酒，聊以解忧了。<br>我从万里之外的远地乘船归来，在船上吹起长笛；我的这颗心，将愿与白鸥结为朋友。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>快阁：在吉州泰和县(今属江西)东澄江（赣江）之上，以江山广远、景物清华著称。此诗作于元丰五年(1082)作者任泰和令时。</li><li>痴儿了却公家事：意思是说，自己并非大器，只会敷衍官事。痴儿，作者自指。了却：完成。</li><li>东西：东边和西边 。指在阁中四处周览。</li><li>倚：倚靠</li><li>落木：落叶</li><li>澄江：指赣江。澄，澄澈，清澈。</li><li>朱弦：这里指琴。佳人：美人，引申为知己、知音。</li><li>青眼：黑色的眼珠在眼眶中间,青眼看人则是表示对人的喜爱或重视、尊重，指正眼看人 。 白眼指露出眼白，表示轻蔑。 聊：姑且。</li><li>弄：演奏</li><li>与白鸥盟：这里是指无利禄之心，借指归隐。</li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><p>​        这是黄庭坚在太和知县任上登快阁时所作的抒情小诗。</p><p>　　一般说来，文章或诗歌开头往往较难，以致有的文学家常将其开头处砍去，这是因为开头处，作者还没有和作品的情境融为一体，因而容易作态。黄山谷此诗起首，用通俗口语娓娓道来，但又能构思奇妙，引人入境。诗人说，我这个呆子办完公事，登上了快阁，在这晚晴余辉里，倚栏远眺。这二句，看似通俗浅近，却包涵着极为丰富的内容：前句是用《晋书·傅咸传》所载夏侯济之语，“生子痴，了官事，官事未易了也。了事正坐痴，复为快耳！”后句用杜甫”注目寒江倚山阁“及李商隐”万古贞魂倚暮霞”之典，还多有翻新出奇之妙。“痴儿”二字翻前人之意，直认自己是“痴儿”，此为谐趣之一；“了却”二字，渲染出了诗人如释重负的欢快心情，与“快阁”之“快”暗相呼应，从而增加了一气呵成之感此为妙用二；“倚晚晴”三字，更是超脱了前人的窠臼。杜诗之“倚”，倚于山阁，乃实境平叙；李诗之“倚”，主语为“万古贞魂”，乃虚境幻生而成；黄诗之“倚”，可谓虚实相兼；诗人之“倚”，乃是实景，但却倚在无际无垠的暮色晴空。读此三家，宛如一幅艺术摄影，在晚霞的逆光里，诗人与亭阁的背影。</p><p>　　不仅如此，“倚晚晴”三字，还为下句的描写，作了铺垫渲染，使诗人顺势迸出了“落木千山天远大，澄江一道月分明“的绝唱。远望无数秋山，山上的落叶飘零了，浩渺的天空此时显得更加辽远阔大，澄净如玉的澄江在快阁亭下淙淙流过，一弯新月，映照在江水中，显得更加空明澄澈。这是诗人初登快阁亭时所览胜景的描绘，也是诗人胸襟怀抱的写照。读这样的诗句，不禁使人想起杜甫“无边落木萧萧下，不尽长江滚滚来”和谢眺“余霞散成绮，澄江净如练”的名句。但黄山谷之句，既汲取了前辈的养料加以锻炼熔造，又是新的境界再现。所以前人曾评此二句道：“其意境天开，则实能劈古今未泄之奥妙。”（张宗泰《鲁斋所学集》）</p><p>　　五、六二句，是诗人巧用典故的中句。前句用伯牙捧琴谢知音的故事。《吕氏春秋·本味篇》载：“钟子期死，伯牙破琴绝弦，终身不复鼓琴，以为世无足复为鼓琴者。”后句用阮籍青白眼事。史载阮籍善为青白眼，“见礼俗之士，以白眼对之”，见所悦之人，“乃见青眼”（《晋书·阮籍传》）。诗人这二句大意是说，因为知音不在，我弄断了琴上的朱弦，不再弹奏，于是只好清樽美酒，聊以解忧了。此处“横“字用得很生动，把诗人无可奈何、孤独无聊的形象神情托了出来。</p><p>　　结句诗人说自己希望能坐上归船，吹弄着悠扬的长笛，回到那遥远的故乡——我的这颗心呵，早已和白鸥订好盟约了。从全诗的结构看，这个结尾是相当精彩的：起首处诗人从“痴儿了却官家事”说起，透露了对官场生涯的厌倦和对登快阁亭欣赏自然景色的渴望；然后，渐入佳境，诗人陶醉在落木千山，澄江月明的美景之中，与起首处对“公家事”之“了却”形成鲜明对照；五、六句诗人作一迭宕：在良辰美景中，诗人心内的忧烦无端而来，诗人感受到自己的抱负无法实现、自己的胸怀无人理解的痛苦。那么，解脱的出路何在呢？这就很自然地引出了诗人的“归船”、“白鸥”之想。这一结尾，不但呼应了起首，顺势作结，给人以“一气盘旋而下之感”（潘伯鹰评语）。而且意味隽永，让人想象无穷。</p><p>　　全诗明白如话，因景抒情寄慨，字字紧扣，层层关联，用典贴切，无一字无来处，体现了江西诗派用字新奇、笔力雄健的特点。</p><p>　　此诗极受后人称赏。姚鼐称此诗“豪而有韵，此移太白歌行于七律内者”；方东树评析说：“起四句且叙且写，一往浩然，五、六句对意流行。收尤豪放。此所谓寓单行之气于排偶之中者。”这些评析都是十分切中肯綮的。翁方纲评黄山谷诗云：“坡公之外又出此一种绝高之风骨，绝大之境界，造化元气发泄透矣。”细吟此诗，当知无愧。</p><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>　　此诗作于公元1082年（宋神宗元丰五年），时黄庭坚在吉州泰和县（今属江西）任知县，公事之余，诗人常到“澄江之上，以江山广远，景物清华得名”（《清一统治·吉安府》）的快阁览胜，有感而发。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中几个有趣的函数</title>
      <link href="/posts/438b.html"/>
      <url>/posts/438b.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python中几个有趣的函数"><a href="#Python中几个有趣的函数" class="headerlink" title="Python中几个有趣的函数"></a><strong>Python中几个有趣的函数</strong></h1><blockquote><p>今天主要是分享5个python内置的小函数。</p></blockquote><h2 id="01-一用而过：lambda"><a href="#01-一用而过：lambda" class="headerlink" title="01 一用而过：lambda"></a>01 一用而过：lambda</h2><blockquote><p>很多语言都有匿名函数，python的匿名函数写作lambda，当需要实现一定功能而又不想“大张旗鼓”的def一个函数时，lambda就是最优的选择。</p></blockquote><p>其语法格式一般是这样的：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token comment" spellcheck="true"># &lt;function __main__.&lt;lambda>(x)></span></code></pre><p>也可以将它赋值给一个变量，由于python中一切皆对象，所以后续程序中就可以用该变量调用这个匿名函数。</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">**</span><span class="token number">2</span>f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4</span></code></pre><p>当然，这里其实没必要应用lambda来实现，因为既然要显式调用，还不如干脆直接写个明确的函数罢了。lambda函数更广泛的应用场景在于该匿名函数作为另一个函数的参数传递时，应用就比较合适了，例如，将lambda作为sort()函数的key参数，就可以实现特定功能的排序。</p><pre class=" language-python"><code class="language-python">dyct <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span>sorted<span class="token punctuation">(</span>dyct<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [('b', 1), ('a', 2), ('c', 5)]</span></code></pre><h2 id="02-智能解压：zip"><a href="#02-智能解压：zip" class="headerlink" title="02 智能解压：zip"></a>02 智能解压：zip</h2><blockquote><p>zip函数人如其名，是打包或者解包的函数，接受2个以上可迭代变量，输出对应位置组成元组后的迭代类型。例如：</p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;zip at 0x1da016d15c8></span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [('a', 4), ('b', 5), ('c', 6)]</span>tuple<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># (('a', 4), ('b', 5), ('c', 6))</span></code></pre><p>也可以接受多于2个输入可迭代变量，而且如果各迭代变量长度不一致也不会报错，只是此时返回迭代变量取决于输入总长度最短的一个。例如：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># (('a', 4, True), ('b', 5, False), ('c', 6, True))</span></code></pre><p>与zip打包相对应的用法是解包，即对一个打包形式的元素进行依次解包，并返回多个新的列表。例如：</p><pre class=" language-python"><code class="language-python">aZip <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> zip<span class="token punctuation">(</span><span class="token operator">*</span>aZip<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a:('a', 'b', 'c')</span><span class="token comment" spellcheck="true"># b:(4, 5, 6)</span><span class="token comment" spellcheck="true"># c:(True, False, True)</span></code></pre><h2 id="03-一一映射：map"><a href="#03-一一映射：map" class="headerlink" title="03 一一映射：map"></a>03 一一映射：map</h2><blockquote><p>map函数也正如其取名一样，是一个将接受的迭代变量依次经过某种映射，并输出映射后的迭代变量。例如，如果对列表中的某个变量依次完成求值，并返回一个新的列表，则可以应用map：</p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;map at 0x1da017136d8></span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['1', '2', '3', '4']</span></code></pre><p>这是map函数的一个典型用法：接受2个参数，第一个参数(上例中是str()函数）是一个要作用的函数，第二个参数是可迭代变量。</p><p>当第一个函数的参数是是一个多变量函数时，map也可以接受更多的参数。例如：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span>x<span class="token operator">**</span>y<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [1, 4, 27, 64]</span></code></pre><p>与zip函数中类似，当map里的函数参数长度不匹配时并不会报错，只是输出结果将由最短的决定：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span>x<span class="token operator">**</span>y<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [1, 4]</span></code></pre><h2 id="04-一夫当关：filter"><a href="#04-一夫当关：filter" class="headerlink" title="04 一夫当关：filter"></a>04 一夫当关：filter</h2><blockquote><p>与map函数类似，filter函数也接受一个函数及其变量作为参数，只是要求这个函数的返回结果是bool型，并用这个bool的结果决定输出的取舍问题。例如需要对一个输入列表过滤，要求保留3的倍数：</p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;filter at 0x1da0171c0f0></span>list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [0, 3, 6, 9]</span></code></pre><p>这里需注意，当filter的第一个函数返回值不是bool型时不会报错，只是它会转化为bool型判断，如果判断结果不是False（python中会判为False的变量包括0、None、[]等等），则会将其输出，否则过滤掉：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [1, 2, 4, 5, 7, 8]</span></code></pre><h2 id="05-万剑归宗：reduce"><a href="#05-万剑归宗：reduce" class="headerlink" title="05 万剑归宗：reduce"></a>05 万剑归宗：reduce</h2><blockquote><p>map和filter函数都是多入多出型，实质上是完成了特定的变换或筛选。reduce则是归约函数，将一系列输入变量经过特定的函数后转化为一个结果输出。不过可能是由于应用场景有限的原因，reduce在python3中已不再是全局调用函数，必须要从functools包中导入方可使用：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> reducea <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 10</span></code></pre><p>reduce函数还可以接受一个可选的初始值作为参数。应用reduce函数可以实现很多小trick，就看能不能想的到用的出：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> reduces <span class="token operator">=</span> <span class="token string">'abcdefg'</span>reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token operator">+</span>x<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token string">'AA'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 'gfedcbaAA'</span></code></pre><h2 id="06-最后"><a href="#06-最后" class="headerlink" title="06 最后"></a>06 最后</h2><p>当然，尽管几个函数用法不可谓不优美、功能不可谓不强大，但都不是必须的，甚至某种程度上都可以用其他形式加以替代，例如map和filter函数都可以用列表推导式来简单实现，reduce函数功能也顶多用一个for循环迭代就能解决。</p><p>但在致力于使python程序变得更加简洁优雅乃至装B耍秀的路上，这些函数也确有其用武之地，未尝不值得一试！</p>]]></content>
      
      
      <categories>
          
          <category> python知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python知识 </tag>
            
            <tag> python函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python读写数据文件</title>
      <link href="/posts/22b9.html"/>
      <url>/posts/22b9.html</url>
      
        <content type="html"><![CDATA[<p>Python处理数据文件的途径有很多种，可以操作的文件类型主要包括文本文件（csv、txt、json等）、excel文件、数据库文件、api等其他数据文件。其中，Python连接各种数据库,包括关系数据库：<strong>sqlite,mysql,mssql</strong><br>非关系数据库：<strong>MongoDB,Redis</strong>。</p><p>下面整理下python有哪些方式可以读写数据文件。</p><h2 id="1-read、readline、readlines"><a href="#1-read、readline、readlines" class="headerlink" title="1. read、readline、readlines"></a>1. read、readline、readlines</h2><ul><li>read()  ：一次性读取整个文件内容。推荐使用read(size)方法，size越大运行时间越长</li><li>readline()  ：每次读取一行内容。内存不够时使用，一般不太用</li><li>readlines()  ：一次性读取整个文件内容，并按行返回到list，方便我们遍历</li></ul><h2 id="2-内置模块csv"><a href="#2-内置模块csv" class="headerlink" title="2. 内置模块csv"></a>2. 内置模块csv</h2><p>python内置了csv模块用于读写csv文件，csv是一种逗号分隔符文件，是数据科学中最常见的数据存储格式之一。csv模块能轻松完成各种体量数据的读写操作，当然大数据量需要代码层面的优化。</p><ul><li>csv模块读取文件</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 读取csv文件</span><span class="token keyword">import</span> csv<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> myFile<span class="token punctuation">:</span>    lines<span class="token operator">=</span>csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>myFile<span class="token punctuation">)</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span></code></pre><ul><li>csv模块写入文件</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> myFile<span class="token punctuation">:</span>    myWriter<span class="token operator">=</span>csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>myFile<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># writerrow一行一行写入</span>    myWriter<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    myWriter<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># writerow多行写入</span>    myList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    myWriter<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span>myList<span class="token punctuation">)</span></code></pre><h2 id="3-numpy库"><a href="#3-numpy库" class="headerlink" title="3. numpy库"></a>3. numpy库</h2><ul><li><strong>loadtxt方法</strong></li></ul><p>loadtxt用来读取文本文件（包含txt、csv等）以及.gz 或.bz2格式压缩文件，前提是文件数据每一行必须要有数量相同的值。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># loadtxt()中的dtype参数默认设置为float</span><span class="token comment" spellcheck="true"># 这里设置为str字符串便于显示</span>np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>str<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># out：array(['1,2,3', '4,5,6', '7,8,9'], dtype='&lt;U5')</span></code></pre><ul><li><strong>load方法</strong></li></ul><p>load用来读取numpy专用的<code>.npy</code>, <code>.npz</code> 或者<code>pickled</code>持久化文件。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># 先生成npy文件</span>np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test.npy'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用load加载npy文件</span>np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'test.npy'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''out:array([[1, 2, 3],       [4, 5, 6]])'''</span></code></pre><ul><li><strong>fromfile方法</strong></li></ul><p>fromfile方法可以读取简单的文本数据或二进制数据，数据来源于tofile方法保存的二进制数据。读取数据时需要用户指定元素类型，并对数组的形状进行适当的修改。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>tofile<span class="token punctuation">(</span><span class="token string">'test.bin'</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>fromfile<span class="token punctuation">(</span><span class="token string">'test.bin'</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># out:array([0, 1, 2, 3, 4, 5, 6, 7, 8])</span></code></pre><h2 id="4-pandas库"><a href="#4-pandas库" class="headerlink" title="4. pandas库"></a>4. pandas库</h2><p>pandas是数据处理最常用的分析库之一，可以读取各种各样格式的数据文件，一般输出dataframe格式。如：txt、csv、excel、json、剪切板、数据库、html、hdf、parquet、pickled文件、sas、stata等等</p><ul><li><strong>read_csv方法</strong>read_csv方法用来读取csv格式文件，输出dataframe格式。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdpd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span></code></pre><ul><li><strong>read_excel方法</strong></li></ul><p>读取excel文件，包括xlsx、xls、xlsm格式</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdpd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'test.xlsx'</span><span class="token punctuation">)</span></code></pre><ul><li><strong>read_table方法</strong></li></ul><p>通过对sep参数（分隔符）的控制来对任何文本文件读取</p><ul><li><strong>read_json方法</strong></li></ul><p>读取json格式文件</p><pre class=" language-python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'row 1'</span><span class="token punctuation">,</span> <span class="token string">'row 2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'col 1'</span><span class="token punctuation">,</span> <span class="token string">'col 2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>j <span class="token operator">=</span> df<span class="token punctuation">.</span>to_json<span class="token punctuation">(</span>orient<span class="token operator">=</span><span class="token string">'split'</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>read_json<span class="token punctuation">(</span>j<span class="token punctuation">,</span>orient<span class="token operator">=</span><span class="token string">'split'</span><span class="token punctuation">)</span></code></pre><ul><li><strong>read_html方法</strong></li></ul><p>读取html表格</p><ul><li><strong>read_clipboard方法</strong></li></ul><p>读取剪切板内容</p><ul><li><strong>read_pickle方法</strong></li></ul><p>读取plckled持久化文件</p><ul><li><strong>read_sql方法</strong></li></ul><p>读取数据库数据，连接好数据库后，传入sql语句即可</p><ul><li><strong>read_dhf方法</strong></li></ul><p>读取hdf5文件，适合大文件读取</p><ul><li><strong>read_parquet方法</strong></li></ul><p>读取parquet文件</p><ul><li><strong>read_sas方法</strong></li></ul><p>读取sas文件</p><ul><li><strong>read_stata方法</strong></li></ul><p>读取stata文件</p><ul><li><strong>read_gbq方法</strong></li></ul><p>读取google bigquery数据</p><p>pandas学习网站：<a href="https://pandas.pydata.org/" target="_blank" rel="noopener">https://pandas.pydata.org/</a></p><h2 id="5-读写excel文件"><a href="#5-读写excel文件" class="headerlink" title="5.读写excel文件"></a>5.读写excel文件</h2><p>python用于读写excel文件的库有很多，除了前面提到的pandas，还有xlrd、xlwt、openpyxl、xlwings等等。</p><p><strong>主要模块：</strong></p><ul><li><strong>xlrd库</strong></li></ul><p>从excel中读取数据，支持xls、xlsx</p><ul><li><strong>xlwt库</strong></li></ul><p>对excel进行修改操作，不支持对xlsx格式的修改</p><ul><li><strong>xlutils库</strong></li></ul><p>在xlw和xlrd中，对一个已存在的文件进行修改</p><ul><li><strong>openpyxl</strong></li></ul><p>主要针对xlsx格式的excel进行读取和编辑</p><ul><li><strong>xlwings</strong></li></ul><p>对xlsx、xls、xlsm格式文件进行读写、格式修改等操作</p><ul><li><strong>xlsxwriter</strong></li></ul><p>用来生成excel表格，插入数据、插入图标等表格操作，不支持读取</p><ul><li><strong>Microsoft Excel API</strong></li></ul><p>需安装pywin32，直接与Excel进程通信，可以做任何在Excel里可以做的事情，但比较慢</p><h2 id="6-操作数据库"><a href="#6-操作数据库" class="headerlink" title="6. 操作数据库"></a>6. 操作数据库</h2><p>python几乎支持对所有数据库的交互，连接数据库后，可以使用sql语句进行增删改查。</p><p><strong>主要模块：</strong></p><ul><li><strong>pymysql</strong></li></ul><p>用于和mysql数据库的交互</p><ul><li><strong>sqlalchemy</strong></li></ul><p>用于和mysql数据库的交互</p><ul><li><strong>cx_Oracle</strong></li></ul><p>用于和oracle数据库的交互</p><ul><li><strong>pymssql</strong></li></ul><p>用于和sql server数据库的交互</p><ul><li><strong>pymongo</strong></li></ul><p>用于和mongodb非关系型数据库的交互</p><ul><li><strong>redis、pyredis</strong></li></ul><p>用于和redis非关系型数据库的交互</p><h3 id="python连接MySQL数据库"><a href="#python连接MySQL数据库" class="headerlink" title="python连接MySQL数据库"></a>python连接MySQL数据库</h3><blockquote><p>使用MySQLdb，不支持Python3.x<br>pymysql对Python2.x和Python3.x的支持都比较好</p></blockquote><h4 id="1、使用pymysql"><a href="#1、使用pymysql" class="headerlink" title="1、使用pymysql"></a>1、使用pymysql</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># https://github.com/PyMySQL/PyMySQL/</span><span class="token keyword">import</span> pymysql<span class="token keyword">from</span> contextlib <span class="token keyword">import</span> closing<span class="token keyword">import</span> traceback<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取一个数据库连接,with关键字 表示退出时,conn自动关闭</span>    <span class="token comment" spellcheck="true"># with 嵌套上一层的with 要使用closing()</span>    <span class="token keyword">with</span> closing<span class="token punctuation">(</span>pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>                                 charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect database successfully"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取游标,with关键字 表示退出时,cur自动关闭</span>        <span class="token keyword">with</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cur<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 删除表</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS  COMPANY"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 创建表</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                     CREATE TABLE IF NOT EXISTS COMPANY                   (ID INTEGER  PRIMARY KEY NOT NULL  auto_increment,                   NAME           TEXT    NOT NULL,                   AGE            INT     NOT NULL,                   ADDRESS        CHAR(50),                   SALARY         REAL);            """</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"create table successfully"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 添加数据</span>            <span class="token comment" spellcheck="true"># 在一个conn.execute里面里面执行多个sql语句是非法的</span>            cur<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span><span class="token string">"INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES ( %s, %s, %s, %s )"</span><span class="token punctuation">,</span>                            <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Paul'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Allen'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">15000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Teddy'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'Norway'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Mark'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Rich-Mond '</span><span class="token punctuation">,</span> <span class="token number">65000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">85000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Kim'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'South-Hall'</span><span class="token punctuation">,</span> <span class="token number">45000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'James'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'Houston'</span><span class="token punctuation">,</span> <span class="token number">10000.00</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 提交,否则重新运行程序时,表中无数据</span>            conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"insert successfully"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 查询表</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                select id,NAME,AGE,ADDRESS,SALARY FROM COMPANY             """</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token keyword">for</span> row <span class="token keyword">in</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> pymysql<span class="token punctuation">.</span>Error <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Mysql Error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2、使用MySQLdb"><a href="#2、使用MySQLdb" class="headerlink" title="2、使用MySQLdb"></a>2、使用MySQLdb</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/env python2.7</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># mysqldb 只支持python2.7</span><span class="token comment" spellcheck="true"># http://mysql-python.sourceforge.net/</span><span class="token keyword">import</span> MySQLdb<span class="token keyword">from</span> contextlib <span class="token keyword">import</span> closing<span class="token keyword">import</span> traceback<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取一个数据库连接</span>    <span class="token keyword">with</span> closing<span class="token punctuation">(</span>MySQLdb<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect database successfully"</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> closing<span class="token punctuation">(</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cur<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 删除表</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS  COMPANY"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 创建表</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                     CREATE TABLE IF NOT EXISTS COMPANY                   (ID INTEGER  PRIMARY KEY NOT NULL  auto_increment,                   NAME           TEXT    NOT NULL,                   AGE            INT     NOT NULL,                   ADDRESS        CHAR(50),                   SALARY         REAL);            """</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"create table successfully"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 添加数据</span>            <span class="token comment" spellcheck="true"># 在一个conn.execute里面里面执行多个sql语句是非法的</span>            cur<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span><span class="token string">"INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES ( %s, %s, %s, %s )"</span><span class="token punctuation">,</span>                            <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Paul'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Allen'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">15000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Teddy'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'Norway'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Mark'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Rich-Mond '</span><span class="token punctuation">,</span> <span class="token number">65000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">85000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Kim'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'South-Hall'</span><span class="token punctuation">,</span> <span class="token number">45000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'James'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'Houston'</span><span class="token punctuation">,</span> <span class="token number">10000.00</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 提交,否则重新运行程序时,表中无数据</span>            conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"insert successfully"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 查询表</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                select id,NAME,AGE,ADDRESS,SALARY FROM COMPANY             """</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token keyword">for</span> row <span class="token keyword">in</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> MySQLdb<span class="token punctuation">.</span>Error <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Mysql Error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印错误栈信息</span></code></pre><h4 id="3、使用MySQLdb库中的-mysql"><a href="#3、使用MySQLdb库中的-mysql" class="headerlink" title="3、使用MySQLdb库中的_mysql"></a>3、使用MySQLdb库中的_mysql</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/env python2.7</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># mysqldb 只支持python2.7</span><span class="token comment" spellcheck="true"># http://mysql-python.sourceforge.net/</span><span class="token keyword">import</span> MySQLdb<span class="token keyword">from</span> contextlib <span class="token keyword">import</span> closing<span class="token keyword">import</span> traceback<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取一个数据库连接</span>    <span class="token keyword">with</span> closing<span class="token punctuation">(</span>MySQLdb<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect database successfully"</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> closing<span class="token punctuation">(</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cur<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 删除表</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS  COMPANY"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 创建表</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                     CREATE TABLE IF NOT EXISTS COMPANY                   (ID INTEGER  PRIMARY KEY NOT NULL  auto_increment,                   NAME           TEXT    NOT NULL,                   AGE            INT     NOT NULL,                   ADDRESS        CHAR(50),                   SALARY         REAL);            """</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"create table successfully"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 添加数据</span>            <span class="token comment" spellcheck="true"># 在一个conn.execute里面里面执行多个sql语句是非法的</span>            cur<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span><span class="token string">"INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES ( %s, %s, %s, %s )"</span><span class="token punctuation">,</span>                            <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Paul'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Allen'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">15000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Teddy'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'Norway'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Mark'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Rich-Mond '</span><span class="token punctuation">,</span> <span class="token number">65000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">85000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Kim'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'South-Hall'</span><span class="token punctuation">,</span> <span class="token number">45000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'James'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'Houston'</span><span class="token punctuation">,</span> <span class="token number">10000.00</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 提交,否则重新运行程序时,表中无数据</span>            conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"insert successfully"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 查询表</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                select id,NAME,AGE,ADDRESS,SALARY FROM COMPANY             """</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token keyword">for</span> row <span class="token keyword">in</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> MySQLdb<span class="token punctuation">.</span>Error <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Mysql Error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印错误栈信息</span></code></pre><h3 id="python连接MongoDB数据库"><a href="#python连接MongoDB数据库" class="headerlink" title="python连接MongoDB数据库"></a>python连接MongoDB数据库</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># https://docs.mongodb.com/ecosystem/drivers/python/</span><span class="token comment" spellcheck="true"># https://pypi.python.org/pypi/pymongo/</span><span class="token keyword">import</span> pymongo<span class="token keyword">from</span> pymongo<span class="token punctuation">.</span>mongo_client <span class="token keyword">import</span> MongoClient<span class="token keyword">import</span> pymongo<span class="token punctuation">.</span>errors<span class="token keyword">import</span> traceback<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 连接到 mongodb 服务</span>    mongoClient <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">27017</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 连接到数据库</span>    mongoDatabase <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span>test    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect database successfully"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取集合</span>    mongoCollection <span class="token operator">=</span> mongoDatabase<span class="token punctuation">.</span>COMPANY    <span class="token comment" spellcheck="true"># 移除所有数据</span>    mongoCollection<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 添加数据</span>    mongoCollection<span class="token punctuation">.</span>insert_many<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Paul"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"32"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"California"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"20000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                 <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Allen"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"15000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                 <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Teddy"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"23"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Norway"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"20000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                 <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Mark"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Rich-Mond"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"65000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                 <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"David"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"27"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"85000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                 <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Kim"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"22"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"South-Hall"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"45000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                 <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"24"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Houston"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"10000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取集合中的值</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> mongoCollection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Salary'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n\n\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使id自增</span>    mongoCollection<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建计数表</span>    mongoDatabase<span class="token punctuation">.</span>counters<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token string">"people_id"</span><span class="token punctuation">,</span> <span class="token string">"sequence_value"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建存储过程</span>    mongoDatabase<span class="token punctuation">.</span>system_js<span class="token punctuation">.</span>getSequenceValue <span class="token operator">=</span> <span class="token triple-quoted-string string">'''function getSequenceValue(sequenceName){            var sequenceDocument = db.counters.findAndModify({                query: {_id: sequenceName},                update: {$inc:{sequence_value: 1}},                new:true            });            return sequenceDocument.sequence_value;        }'''</span>    mongoCollection<span class="token punctuation">.</span>insert_many<span class="token punctuation">(</span>            <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Paul"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"32"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"California"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"20000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Allen"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"15000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Teddy"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"23"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Norway"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"20000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Mark"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Rich-Mond"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"65000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"David"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"27"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"85000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Kim"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"22"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"South-Hall"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"45000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"24"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Houston"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"10000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> mongoCollection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Salary'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> pymongo<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>PyMongoError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"mongo Error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="python连接Redis数据库"><a href="#python连接Redis数据库" class="headerlink" title="python连接Redis数据库"></a>python连接Redis数据库</h3><h4 id="1、使用redis"><a href="#1、使用redis" class="headerlink" title="1、使用redis"></a>1、使用redis</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># https://pypi.python.org/pypi/redis/2.10.5</span><span class="token comment" spellcheck="true"># http://redis-py.readthedocs.io/en/latest/#</span><span class="token keyword">import</span> redisr <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>ping<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 看信息</span>info <span class="token operator">=</span> r<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># or 查看部分信息</span><span class="token comment" spellcheck="true"># info = r.info("Server")</span><span class="token comment" spellcheck="true"># 输出信息</span>items <span class="token operator">=</span> info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"item %s----%s:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除键和对应的值</span>r<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 可以一次性push一条或多条数据</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Paul"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"32"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"California"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"20000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Allen"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"15000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Teddy"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"23"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Norway"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"20000.00"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Mark"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Rich-Mond"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"65000.00"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"David"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"27"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"85000.00"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Kim"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"22"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"South-Hall"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"45000.00"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"24"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Houston"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"10000.00"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># eval用来将dict格式的字符串转换成dict</span><span class="token keyword">for</span> row <span class="token keyword">in</span> map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> eval<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>llen<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Salary'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭当前连接</span><span class="token comment" spellcheck="true"># r.shutdown() #这个是关闭redis服务端</span></code></pre><h4 id="2、使用pyredis"><a href="#2、使用pyredis" class="headerlink" title="2、使用pyredis"></a>2、使用pyredis</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># http://pyredis.readthedocs.io/en/latest/</span><span class="token keyword">import</span> pyredisr <span class="token operator">=</span> pyredis<span class="token punctuation">.</span>Client<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>ping<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 看信息</span><span class="token comment" spellcheck="true"># info = r.execute("info").decode()</span><span class="token comment" spellcheck="true"># or 查看部分信息</span>info <span class="token operator">=</span> r<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token string">"Server"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除键和对应的值</span>r<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 可以一次性push一条或多条数据</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token triple-quoted-string string">'''{"id": 1, "Name": "Paul", "Age": "32", "Address": "California", "Salary": "20000.00"}'''</span><span class="token punctuation">,</span>        <span class="token triple-quoted-string string">'''{"id": 2, "Name": "Allen", "Age": "25", "Address": "Texas", "Salary": "15000.00"}'''</span><span class="token punctuation">,</span>        <span class="token triple-quoted-string string">'''{"id": 3, "Name": "Teddy", "Age": "23", "Address": "Norway", "Salary": "20000.00"}'''</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token triple-quoted-string string">'''{"id": 4, "Name": "Mark", "Age": "25", "Address": "Rich-Mond", "Salary": "65000.00"}'''</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token triple-quoted-string string">'''{"id": 5, "Name": "David", "Age": "27", "Address": "Texas", "Salary": "85000.00"}'''</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token triple-quoted-string string">'''{"id": 6, "Name": "Kim", "Age": "22", "Address": "South-Hall", "Salary": "45000.00"}'''</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token triple-quoted-string string">'''{"id": 7, "Name": "James", "Age": "24", "Address": "Houston", "Salary": "10000.00"}'''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># eval用来将dict格式的字符串转换成dict</span><span class="token keyword">for</span> row <span class="token keyword">in</span> map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> eval<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>llen<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Salary'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭当前连接</span>r<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="python连接sqlite数据库"><a href="#python连接sqlite数据库" class="headerlink" title="python连接sqlite数据库"></a>python连接sqlite数据库</h3><p>sqlite3——内置库，用于和sqlite数据库的交互</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># http://www.runoob.com/sqlite/sqlite-python.html</span><span class="token keyword">import</span> sqlite3<span class="token keyword">import</span> traceback<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果表不存在,就创建</span>    <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'test.db'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Opened database successfully"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 删除表</span>        conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS  COMPANY"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建表</span>        sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                 CREATE TABLE IF NOT EXISTS COMPANY               (ID INTEGER  PRIMARY KEY       AUTOINCREMENT,               NAME           TEXT    NOT NULL,               AGE            INT     NOT NULL,               ADDRESS        CHAR(50),               SALARY         REAL);        """</span>        conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"create table successfully"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 添加数据</span>        conn<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span><span class="token string">"INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES (?, ?, ?, ? )"</span><span class="token punctuation">,</span>                         <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Paul'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token string">'Allen'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">15000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token string">'Teddy'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'Norway'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token string">'Mark'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Rich-Mond '</span><span class="token punctuation">,</span> <span class="token number">65000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">85000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token string">'Kim'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'South-Hall'</span><span class="token punctuation">,</span> <span class="token number">45000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token string">'James'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'Houston'</span><span class="token punctuation">,</span> <span class="token number">10000.00</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ( 'Paul', 32, 'California', 20000.00 )")</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ('Allen', 25, 'Texas', 15000.00 )")</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ('Teddy', 23, 'Norway', 20000.00 )")</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ( 'Mark', 25, 'Rich-Mond ', 65000.00 )")</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ( 'David', 27, 'Texas', 85000.00 )");</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ( 'Kim', 22, 'South-Hall', 45000.00 )")</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ( 'James', 24, 'Houston', 10000.00 )")</span>        <span class="token comment" spellcheck="true"># 提交,否则重新运行程序时,表中无数据</span>        conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"insert successfully"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 查询表</span>        sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""            select id,NAME,AGE,ADDRESS,SALARY FROM COMPANY         """</span>        result <span class="token operator">=</span> conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> result<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %.2f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># or</span>            <span class="token comment" spellcheck="true"># print('{:10s} {:.2f}'.format("salary", row[4]))</span><span class="token keyword">except</span> sqlite3<span class="token punctuation">.</span>Error <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sqlite3 Error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python交互 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python交互 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水调歌头·黄州快哉亭赠张偓佺</title>
      <link href="/posts/ec53.html"/>
      <url>/posts/ec53.html</url>
      
        <content type="html"><![CDATA[<h1 id="水调歌头·黄州快哉亭赠张偓佺"><a href="#水调歌头·黄州快哉亭赠张偓佺" class="headerlink" title="水调歌头·黄州快哉亭赠张偓佺"></a>水调歌头·黄州快哉亭赠张偓佺</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​                                                                水调歌头·黄州快哉亭赠张偓佺</p><p>​                                                                                                                                        宋·苏轼</p><p>​        落日绣帘卷，亭下水连空。知君为我新作，窗户湿青红。长记平山堂上，欹(qī)枕江南烟雨，杳(yǎo)杳没孤鸿。认得醉翁语，山色有无中。</p><p>​        一千顷，都镜净，倒碧峰。忽然浪起，掀舞一叶白头翁。堪笑兰台公子，未解庄生天籁(lài)，刚道有雌雄。一点浩然气，千里快哉风。</p><p>​        </p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>​        落日中卷起绣帘眺望，亭下江水与碧空相接，远处的夕阳与亭台相映，空阔无际。为了我的来到，你特意在窗户上涂上了清油的朱漆，色彩犹新。这让我想起当年在平山堂的时候，靠着枕席，欣赏江南的烟雨，遥望远方天际孤鸿出没的情景。今天看到眼前的景象，我方体会到欧阳醉翁词句中所描绘的，山色若隐若现的景致。</p><p>​        广阔的水面十分明净，山峰翠绿的影子倒映其中。忽然江面波涛汹涌，一个渔翁驾着小舟在风浪中掀舞。见此不由得想起了宋玉的《风赋》，像宋玉这样可笑的人，是不可能理解庄子的风是天籁之说的，硬说什么风有雄雌。其实，一个人只要具备至大至刚的浩然之气，就能在任何境遇中都处之泰然，享受到无穷快意的千里雄风。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>湿青红：谓漆色鲜润。</li><li>平山堂：宋仁宗庆历八年（1048年）欧阳修在扬州所建。</li><li>欹枕：谓卧着可以看望。</li><li>醉翁：欧阳修别号。</li><li>“山色”句：出自欧阳修《朝中措·平山栏槛倚晴空》。</li><li>倒碧峰：碧峰倒影水中。</li><li>一叶：指小舟。</li><li>白头翁：指老船夫。</li><li>兰台公子：指战国楚辞赋家宋玉，相传曾作兰台令。</li><li>庄生：战国时道家学者庄周。</li><li>天籁：是发于自然的音响，即指风吹声。</li><li>刚道：“硬说”的意思。</li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><p>​        这首词又名《快哉亭作》，是苏轼豪放词的代表作之一。全词通过描绘快哉亭周围壮阔的山光水色，抒发了作者旷达豪迈的处世精神。</p><p>　　此词描写的对象，主要是“快哉亭”周围的广阔景象。开头四句，先用实笔，描绘亭下江水与碧空相接、远处夕阳与亭台相映的优美图景，展现出一片空阔无际的境界，充满了苍茫阔远的情致。“知君为我新作”两句，交待新亭的创建，点明亭主和自己的密切关系，反客为主、诙谐风趣地把张偓佺所建的快哉亭说成特意为自己而造，又写亭台窗户涂抹上青红两色油漆，色彩犹新。“湿”字形容油漆未干，颇为传神。</p><p>　　“长记平山堂上”五句，是记忆中情景，又是对眼前景象的一种以虚托实的想象式侧面描写。作者用“长记”二字，唤起他曾在扬州平山堂所领略的“江南烟雨”“杳杳没孤鸿”那种若隐若现、若有若无、高远空蒙的江南山色的美好回忆。他又以此比拟他在“快哉亭”上所目睹的景致，将“快哉亭”与“平山堂”融为一体，构成一种优美独特的意境。这种以忆景写景的笔法，不但平添了曲折蕴藉的情致，而且加强了词境的空灵飞动。以上五句新颖别致，引人入胜，通过作者昔日的淋漓兴致，传达出当日快哉亭前览胜的欣喜之情。</p><p>　　上片是用虚实结合的笔法，描写快哉亭下及其远处的胜景。下片换头以下五句，又用高超的艺术手法展现亭前广阔江面倏忽变化、涛澜汹涌、风云开阖、动心骇目的壮观场面。词人并由此生发开来，抒发其江湖豪兴和人生追求。“一千顷，都镜净，倒碧峰”三句，写眼前广阔明净的江面，清澈见底，碧绿的山峰，倒映江水中，形成了一幅优美动人的平静的山水画卷，这是对水色山光的静态描写。“忽然”两句，写一阵巨风，江面倏忽变化，涛澜汹涌，风云开阖，一个渔翁驾着一叶小舟，在狂风巨浪中掀舞。至此，作者的描写奇峰突起，由静境忽变动境，从而自自然然地过渡到全词着意表现的着重点——一位奋力搏击风涛的白发老翁。这位白头翁的形象，其实是东坡自身人格风貌的一种象征。以下几句，作者由风波浪尖上弄舟的老人，自然引出他对战国时楚国兰台令宋玉所作《风赋》的议论。作者看来，宋玉将风分为“大王之雄风”和“庶人之雌风”是十分可笑的，是未解自然之理的生硬说教，白头翁搏击风浪的壮伟风神即是明证。其实，庄子所言天籁本身绝无贵贱之分，关键于人的精神境界的高下。他以“一点浩然气，千里快哉风”这一豪气干云的惊世骇俗之语昭告世人：一个人只要具备了至大至刚的浩然之气，就能超凡脱俗，刚直不阿，坦然自适，任何境遇中，都能处之泰然，享受使人感到无穷快意的千里雄风。苏轼这种逆境中仍保持浩然之气的坦荡的人生态度，显然具有积极的社会意义。</p><p>　　这首词在艺术构思和结构上，具有波澜起伏、跌宕多姿、大开大合、大起大落的特点。下片的描写和议论，豪纵酣畅，气势磅礴，词中出没风涛的白头翁形象，犹如百川汇海，含蓄地点明全篇主旨，有强烈的震撼力。全词熔写景、抒情、议论于一炉，既描写了浩阔雄壮、水天一色的自然风光，又其中灌注了一种坦荡旷达的浩然之气，展现出词人身处逆境却泰然处之、大气凛然的精神风貌，充分体现了苏词雄奇奔放的特色。</p><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>　　这首词是作者贬官在黄州（今湖北黄冈）时作的。快哉亭，在黄州的江边，张怀民修建。怀民名梦得，又字偓佺，当时也贬官在黄州，与苏轼的心境相同，二人交往密切。作者不仅欣赏江边的优美风景，而更加钦佩张的气度。所以他为张所建的亭起名为“快哉亭”。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>100个网络基础知识</title>
      <link href="/posts/7d46.html"/>
      <url>/posts/7d46.html</url>
      
        <content type="html"><![CDATA[<h1 id="100个网络基础知识"><a href="#100个网络基础知识" class="headerlink" title="100个网络基础知识"></a>100个网络基础知识</h1><h3 id="1）什么是链接？"><a href="#1）什么是链接？" class="headerlink" title="1）什么是链接？"></a>1）什么是链接？</h3><p>链接是指两个设备之间的连接。它包括用于一个设备能够与另一个设备通信的电缆类型和协议。</p><h3 id="2）OSI-参考模型的层次是什么？"><a href="#2）OSI-参考模型的层次是什么？" class="headerlink" title="2）OSI 参考模型的层次是什么？"></a>2）OSI 参考模型的层次是什么？</h3><p>有 7 个 OSI 层：物理层，数据链路层，网络层，传输层，会话层，表示层和应用层。</p><h3 id="3）什么是骨干网？"><a href="#3）什么是骨干网？" class="headerlink" title="3）什么是骨干网？"></a>3）什么是骨干网？</h3><p>骨干网络是集中的基础设施，旨在将不同的路由和数据分发到各种网络。它还处理带宽管理和各种通道。</p><h3 id="4）什么是-LAN？"><a href="#4）什么是-LAN？" class="headerlink" title="4）什么是 LAN？"></a>4）什么是 LAN？</h3><p>LAN 是局域网的缩写。它是指计算机与位于小物理位置的其他网络设备之间的连接。</p><h3 id="5）什么是节点？"><a href="#5）什么是节点？" class="headerlink" title="5）什么是节点？"></a>5）什么是节点？</h3><p>节点是指连接发生的点。它可以是作为网络一部分的计算机或设备。为了形成网络连接，需要两个或更多个节点。</p><h3 id="6）什么是路由器？"><a href="#6）什么是路由器？" class="headerlink" title="6）什么是路由器？"></a>6）什么是路由器？</h3><p>路由器可以连接两个或更多网段。这些是在其路由表中存储信息的智能网络设备，例如路径，跳数等。有了这个信息，他们就可以确定数据传输的最佳路径。路由器在 OSI 网络层运行。</p><h3 id="7）什么是点对点链接？"><a href="#7）什么是点对点链接？" class="headerlink" title="7）什么是点对点链接？"></a>7）什么是点对点链接？</h3><p>它是指网络上两台计算机之间的直接连接。除了将电缆连接到两台计算机的 NIC卡之外，点对点连接不需要任何其他网络设备。</p><h3 id="8）什么是匿名-FTP？"><a href="#8）什么是匿名-FTP？" class="headerlink" title="8）什么是匿名 FTP？"></a>8）什么是匿名 FTP？</h3><p>匿名 FTP 是授予用户访问公共服务器中的文件的一种方式。允许访问这些服务器中的数据的用户不需要识别自己，而是以匿名访客身份登录。</p><h3 id="9）什么是子网掩码？"><a href="#9）什么是子网掩码？" class="headerlink" title="9）什么是子网掩码？"></a>9）什么是子网掩码？</h3><p>子网掩码与 IP 地址组合，以识别两个部分：扩展网络地址和主机地址。像 IP 地址一样，子网掩码由 32 位组成。</p><h3 id="10）UTP-电缆允许的最大长度是多少？"><a href="#10）UTP-电缆允许的最大长度是多少？" class="headerlink" title="10）UTP 电缆允许的最大长度是多少？"></a>10）UTP 电缆允许的最大长度是多少？</h3><p>UTP 电缆的单段具有 90 到 100 米的允许长度。这种限制可以通过使用中继器和开关来克服</p><h3 id="11）什么是数据封装？"><a href="#11）什么是数据封装？" class="headerlink" title="11）什么是数据封装？"></a>11）什么是数据封装？</h3><p>数据封装是在通过网络传输信息之前将信息分解成更小的可管理块的过程。在这个过程中，源和目标地址与奇偶校验一起附加到标题中。</p><h3 id="12）描述网络拓扑"><a href="#12）描述网络拓扑" class="headerlink" title="12）描述网络拓扑"></a>12）描述网络拓扑</h3><p>网络拓扑是指计算机网络的布局。它显示了设备和电缆的物理布局，以及它们如何连接到彼此。</p><h3 id="13）什么是-VPN？"><a href="#13）什么是-VPN？" class="headerlink" title="13）什么是 VPN？"></a>13）什么是 VPN？</h3><p>VPN 意味着虚拟专用网络，这种技术允许通过网络（如 Internet）创建安全通道。</p><p>例如，VPN 允许您建立到远程服务器的安全拨号连接。</p><h3 id="14）简要描述-NAT。"><a href="#14）简要描述-NAT。" class="headerlink" title="14）简要描述 NAT。"></a>14）简要描述 NAT。</h3><p>NAT 是网络地址转换。这是一种协议，为公共网络上的多台计算机提供一种方式来共享到 Internet 的单一连接。</p><h3 id="15）OSI-参考模型下网络层的工作是什么？"><a href="#15）OSI-参考模型下网络层的工作是什么？" class="headerlink" title="15）OSI 参考模型下网络层的工作是什么？"></a>15）OSI 参考模型下网络层的工作是什么？</h3><p>网络层负责数据路由，分组交换和网络拥塞控制。路由器在此层下运行。</p><h3 id="16）网络拓扑如何影响您在建立网络时的决策？"><a href="#16）网络拓扑如何影响您在建立网络时的决策？" class="headerlink" title="16）网络拓扑如何影响您在建立网络时的决策？"></a>16）网络拓扑如何影响您在建立网络时的决策？</h3><p>网络拓扑决定了互连设备必须使用什么媒介。它还作为适用于设置的材料，连接器和终端的基础。</p><h3 id="17）什么是-RIP？"><a href="#17）什么是-RIP？" class="headerlink" title="17）什么是 RIP？"></a>17）什么是 RIP？</h3><p>RIP，路由信息协议的简称由路由器用于将数据从一个网络发送到另一个网络。</p><p>它通过将其路由表广播到网络中的所有其他路由器来有效地管理路由数据。它以跳数为单位确定网络距离。</p><h3 id="18）什么是不同的方式来保护计算机网络？"><a href="#18）什么是不同的方式来保护计算机网络？" class="headerlink" title="18）什么是不同的方式来保护计算机网络？"></a>18）什么是不同的方式来保护计算机网络？</h3><p>有几种方法可以做到这一点。在所有计算机上安装可靠和更新的防病毒程序。确保防火墙的设置和配置正确。用户认证也将有很大的帮助。所有这些组合将构成一个高度安全的网络。</p><h3 id="19）什么是-NIC？"><a href="#19）什么是-NIC？" class="headerlink" title="19）什么是 NIC？"></a>19）什么是 NIC？</h3><p>NIC 是网络接口卡（网卡）的缩写。这是连接到 PC 以连接到网络沈北。每个 NIC都有自己的 MAC 地址，用于标识网络上的 PC。</p><h3 id="20）什么是-WAN？"><a href="#20）什么是-WAN？" class="headerlink" title="20）什么是 WAN？"></a>20）什么是 WAN？</h3><p>WAN 代表广域网。它是地理上分散的计算机和设备的互连。它连接位于不同地区和国家/地区的网络。</p><h3 id="21）OSI-物理层的重要性是什么？"><a href="#21）OSI-物理层的重要性是什么？" class="headerlink" title="21）OSI 物理层的重要性是什么？"></a>21）OSI 物理层的重要性是什么？</h3><p>物理层进行从数据位到电信号的转换，反之亦然。这是网络设备和电缆类型的考虑和设置。</p><h3 id="22）TCP-IP-下有多少层？"><a href="#22）TCP-IP-下有多少层？" class="headerlink" title="22）TCP/IP 下有多少层？"></a>22）TCP/IP 下有多少层？</h3><p>有四层：网络层，互联网层，传输层和应用层。</p><h3 id="23）什么是代理服务器，它们如何保护计算机网络？"><a href="#23）什么是代理服务器，它们如何保护计算机网络？" class="headerlink" title="23）什么是代理服务器，它们如何保护计算机网络？"></a>23）什么是代理服务器，它们如何保护计算机网络？</h3><p>代理服务器主要防止外部用户识别内部网络的 IP 地址。不知道正确的 IP 地址，甚至无法识别网络的物理位置。代理服务器可以使外部用户几乎看不到网络。</p><h3 id="24）OSI-会话层的功能是什么？"><a href="#24）OSI-会话层的功能是什么？" class="headerlink" title="24）OSI 会话层的功能是什么？"></a>24）OSI 会话层的功能是什么？</h3><p>该层为网络上的两个设备提供协议和方法，通过举行会话来相互通信。这包括设置会话，管理会话期间的信息交换以及终止会话时的解除过程。</p><h3 id="25）实施容错系统的重要性是什么？有限吗？"><a href="#25）实施容错系统的重要性是什么？有限吗？" class="headerlink" title="25）实施容错系统的重要性是什么？有限吗？"></a>25）实施容错系统的重要性是什么？有限吗？</h3><p>容错系统确保持续的数据可用性。这是通过消除单点故障来实现的。但是，在某些情况下，这种类型的系统将无法保护数据，例如意外删除。</p><h3 id="26）10Base-T-是什么意思？"><a href="#26）10Base-T-是什么意思？" class="headerlink" title="26）10Base-T 是什么意思？"></a>26）10Base-T 是什么意思？</h3><p>10 是指数据传输速率，在这种情况下是 10Mbps。“Base”是指基带。T 表示双绞线，这是用于该网络的电缆。</p><h3 id="27）什么是私有-IP-地址？"><a href="#27）什么是私有-IP-地址？" class="headerlink" title="27）什么是私有 IP 地址？"></a>27）什么是私有 IP 地址？</h3><p>专用 IP 地址被分配用于内部网。这些地址用于内部网络，不能在外部公共网络上路由。这些确保内部网络之间不存在任何冲突，同时私有 IP 地址的范围同样可重复使用于多个内部网络，因为它们不会“看到”彼此。</p><h3 id="28）什么是-NOS？"><a href="#28）什么是-NOS？" class="headerlink" title="28）什么是 NOS？"></a>28）什么是 NOS？</h3><p>NOS 或网络操作系统是专门的软件，其主要任务是向计算机提供网络连接，以便能够与其他计算机和连接的设备进行通信。</p><h3 id="29）什么是-DoS？"><a href="#29）什么是-DoS？" class="headerlink" title="29）什么是 DoS？"></a>29）什么是 DoS？</h3><p>DoS 或拒绝服务攻击是试图阻止用户访问互联网或任何其他网络服务。这种攻击可能有不同的形式，由一群永久者组成。这样做的一个常见方法是使系统服务器过载，使其无法再处理合法流量，并将被强制重置。</p><h3 id="30）什么是-OSI，它在电脑网络中扮演什么角色？"><a href="#30）什么是-OSI，它在电脑网络中扮演什么角色？" class="headerlink" title="30）什么是 OSI，它在电脑网络中扮演什么角色？"></a>30）什么是 OSI，它在电脑网络中扮演什么角色？</h3><p>OSI（开放系统互连）作为数据通信的参考模型。它由 7 层组成，每层定义了网络设备如何相互连接和通信的特定方面。一层可以处理所使用的物理介质，而另一层则指示如何通过网络实际传输数据。</p><h3 id="31）电缆被屏蔽并具有双绞线的目的是什么？"><a href="#31）电缆被屏蔽并具有双绞线的目的是什么？" class="headerlink" title="31）电缆被屏蔽并具有双绞线的目的是什么？"></a>31）电缆被屏蔽并具有双绞线的目的是什么？</h3><p>其主要目的是防止串扰。串扰是电磁干扰或噪声，可能影响通过电缆传输的数据。</p><h3 id="32）地址共享的优点是什么？"><a href="#32）地址共享的优点是什么？" class="headerlink" title="32）地址共享的优点是什么？"></a>32）地址共享的优点是什么？</h3><p>通过使用地址转换而不是路由，地址共享提供了固有的安全性优势。这是因为互联网上的主机只能看到提供地址转换的计算机上的外部接口的公共 IP 地址，而不是内部网络上的私有 IP 地址。</p><h3 id="33）什么是-MAC-地址？"><a href="#33）什么是-MAC-地址？" class="headerlink" title="33）什么是 MAC 地址？"></a>33）什么是 MAC 地址？</h3><p>MAC 或媒介访问控制，可以唯一地标识网络上的设备。它也被称为物理地址或以太网地址。MAC 地址由 6 个字节组成。</p><h3 id="34）在-OSI-参考模型方面，TCP-IP-应用层的等同层或多层是什么？"><a href="#34）在-OSI-参考模型方面，TCP-IP-应用层的等同层或多层是什么？" class="headerlink" title="34）在 OSI 参考模型方面，TCP/IP 应用层的等同层或多层是什么？"></a>34）在 OSI 参考模型方面，TCP/IP 应用层的等同层或多层是什么？</h3><h3 id="TCP-IP-应用层实际上在-OSI-模型上具有三个对等体：会话层，表示层和应用层。"><a href="#TCP-IP-应用层实际上在-OSI-模型上具有三个对等体：会话层，表示层和应用层。" class="headerlink" title="TCP/IP 应用层实际上在 OSI 模型上具有三个对等体：会话层，表示层和应用层。"></a>TCP/IP 应用层实际上在 OSI 模型上具有三个对等体：会话层，表示层和应用层。</h3><h3 id="35）如何识别给定-IP-地址的-IP-类？"><a href="#35）如何识别给定-IP-地址的-IP-类？" class="headerlink" title="35）如何识别给定 IP 地址的 IP 类？"></a>35）如何识别给定 IP 地址的 IP 类？</h3><p>通过查看任何给定 IP 地址的第一个八位字节，您可以识别它是 A 类，B 类还是 C类。如果第一个八位字节以 0 位开头，则该地址为 Class A.如果以位 10 开头，则该地址为 B 类地址。如果从 110 开始，那么它是 C 类网络。</p><h3 id="36）OSPF-的主要目的是什么？"><a href="#36）OSPF-的主要目的是什么？" class="headerlink" title="36）OSPF 的主要目的是什么？"></a>36）OSPF 的主要目的是什么？</h3><p>OSPF 或开放最短路径优先，是使用路由表确定数据交换的最佳路径的链路状态路由协议。</p><h3 id="37）什么是防火墙？"><a href="#37）什么是防火墙？" class="headerlink" title="37）什么是防火墙？"></a>37）什么是防火墙？</h3><p>防火墙用于保护内部网络免受外部攻击。这些外部威胁可能是黑客谁想要窃取数据或计算机病毒，可以立即消除数据。它还可以防止来自外部网络的其他用户访问专用网络。</p><h3 id="38）描述星形拓扑"><a href="#38）描述星形拓扑" class="headerlink" title="38）描述星形拓扑"></a>38）描述星形拓扑</h3><p>星形拓扑由连接到节点的中央集线器组成。这是最简单的设置和维护之一。</p><h3 id="39）什么是网关？"><a href="#39）什么是网关？" class="headerlink" title="39）什么是网关？"></a>39）什么是网关？</h3><p>网关提供两个或多个网段之间的连接。它通常是运行网关软件并提供翻译服务的计算机。该翻译是允许不同系统在网络上通信的关键。</p><h3 id="40）星型拓扑的缺点是什么？"><a href="#40）星型拓扑的缺点是什么？" class="headerlink" title="40）星型拓扑的缺点是什么？"></a>40）星型拓扑的缺点是什么？</h3><p>星形拓扑的一个主要缺点是，一旦中央集线器或交换机被损坏，整个网络就变得不可用了。</p><h3 id="41）什么是-SLIP？"><a href="#41）什么是-SLIP？" class="headerlink" title="41）什么是 SLIP？"></a>41）什么是 SLIP？</h3><p>SLIP 或串行线路接口协议实际上是在 UNIX 早期开发的旧协议。这是用于远程访问的协议之一。</p><h3 id="42）给出一些私有网络地址的例子。"><a href="#42）给出一些私有网络地址的例子。" class="headerlink" title="42）给出一些私有网络地址的例子。"></a>42）给出一些私有网络地址的例子。</h3><p>10.0.0.0，子网掩码为 255.0.0.0</p><p>172.16.0.0，子网掩码为 255.240.0.0</p><p>千人ccie认证交流群463904693</p><p>领取最新CCIE考试题库</p><p>CCIE 认证经验分享千人群：463904693</p><p>192.168.0.0，子网掩码为 255.255.0.0</p><h3 id="43）什么是-tracert？"><a href="#43）什么是-tracert？" class="headerlink" title="43）什么是 tracert？"></a>43）什么是 tracert？</h3><p>Tracert 是一个 Windows 实用程序，可用于跟踪从路由器到目标网络的数据采集的路由。它还显示了在整个传输路由期间采用的跳数。</p><h3 id="44）网络管理员的功能是什么？"><a href="#44）网络管理员的功能是什么？" class="headerlink" title="44）网络管理员的功能是什么？"></a>44）网络管理员的功能是什么？</h3><p>网络管理员有许多责任，可以总结为 3 个关键功能：安装网络，配置网络设置以及网络的维护/故障排除。</p><h3 id="45）描述对等网络的一个缺点。"><a href="#45）描述对等网络的一个缺点。" class="headerlink" title="45）描述对等网络的一个缺点。"></a>45）描述对等网络的一个缺点。</h3><p>当您正在访问由网络上的某个工作站共享的资源时，该工作站的性能会降低。</p><h3 id="46）什么是混合网络？"><a href="#46）什么是混合网络？" class="headerlink" title="46）什么是混合网络？"></a>46）什么是混合网络？</h3><p>混合网络是利用客户端 - 服务器和对等体系结构的网络设置。</p><h3 id="47）什么是-DHCP？"><a href="#47）什么是-DHCP？" class="headerlink" title="47）什么是 DHCP？"></a>47）什么是 DHCP？</h3><p>DHCP 是动态主机配置协议的缩写。其主要任务是自动为网络上的设备分配 IP 地址。它首先检查任何设备尚未占用的下一个可用地址，然后将其分配给网络设备。</p><h3 id="48）ARP-的主要工作是什么？"><a href="#48）ARP-的主要工作是什么？" class="headerlink" title="48）ARP 的主要工作是什么？"></a>48）ARP 的主要工作是什么？</h3><p>ARP 或地址解析协议的主要任务是将已知的 IP 地址映射到 MAC 层地址。</p><h3 id="49）什么是-TCP-IP？"><a href="#49）什么是-TCP-IP？" class="headerlink" title="49）什么是 TCP/IP？"></a>49）什么是 TCP/IP？</h3><p>TCP/IP 是传输控制协议/互联网协议的缩写。这是一组协议层，旨在在不同类型的计算机网络（也称为异构网络）上进行数据交换。</p><h3 id="50）如何使用路由器管理网络？"><a href="#50）如何使用路由器管理网络？" class="headerlink" title="50）如何使用路由器管理网络？"></a>50）如何使用路由器管理网络？</h3><p>路由器内置了控制台，可让您配置不同的设置，如安全和数据记录。您可以为计算机分配限制，例如允许访问的资源，或者可以浏览互联网的某一天的特定时间。</p><p>您甚至可以对整个网络中看不到的网站施加限制。</p><h3 id="51）当您希望在不同平台（如-UNIX-系统和-Windows-服务器之间）传输文件时，可以应用什么协议？"><a href="#51）当您希望在不同平台（如-UNIX-系统和-Windows-服务器之间）传输文件时，可以应用什么协议？" class="headerlink" title="51）当您希望在不同平台（如 UNIX 系统和 Windows 服务器之间）传输文件时，可以应用什么协议？"></a>51）当您希望在不同平台（如 UNIX 系统和 Windows 服务器之间）传输文件时，可以应用什么协议？</h3><p>使用 FTP（文件传输协议）在这些不同的服务器之间进行文件传输。这是可能的，因为 FTP 是平台无关的。</p><h3 id="52）默认网关的使用是什么？"><a href="#52）默认网关的使用是什么？" class="headerlink" title="52）默认网关的使用是什么？"></a>52）默认网关的使用是什么？</h3><p>默认网关提供了本地网络连接到外部网络的方法。用于连接外部网络的默认网关通常是外部路由器端口的地址。</p><h3 id="53）保护网络的一种方法是使用密码。什么可以被认为是好的密码？"><a href="#53）保护网络的一种方法是使用密码。什么可以被认为是好的密码？" class="headerlink" title="53）保护网络的一种方法是使用密码。什么可以被认为是好的密码？"></a>53）保护网络的一种方法是使用密码。什么可以被认为是好的密码？</h3><p>良好的密码不仅由字母组成，还包括字母和数字的组合。结合大小写字母的密码比使用所有大写字母或全部小写字母的密码有利。密码必须不能被黑客很容易猜到，比如日期，姓名，收藏夹等等。</p><h3 id="54）UTP-电缆的正确终止率是多少？"><a href="#54）UTP-电缆的正确终止率是多少？" class="headerlink" title="54）UTP 电缆的正确终止率是多少？"></a>54）UTP 电缆的正确终止率是多少？</h3><p>非屏蔽双绞线网线的正常终止是 100 欧姆。</p><h3 id="55）什么是-netstat？"><a href="#55）什么是-netstat？" class="headerlink" title="55）什么是 netstat？"></a>55）什么是 netstat？</h3><p>Netstat 是一个命令行实用程序。它提供有关连接当前 TCP/IP 设置的有用信息。</p><h3 id="56）C-类网络中的网络-ID-数量是多少？"><a href="#56）C-类网络中的网络-ID-数量是多少？" class="headerlink" title="56）C 类网络中的网络 ID 数量是多少？"></a>56）C 类网络中的网络 ID 数量是多少？</h3><p>对于 C 类网络，可用的网络 ID 位数为 21。可能的网络 ID 数目为 2，提高到 21或 2,097,152。每个网络 ID 的主机 ID 数量为 2，增加到 8 减去 2，或 254。</p><h3 id="57）使用长于规定长度的电缆时会发生什么？"><a href="#57）使用长于规定长度的电缆时会发生什么？" class="headerlink" title="57）使用长于规定长度的电缆时会发生什么？"></a>57）使用长于规定长度的电缆时会发生什么？</h3><p>电缆太长会导致信号丢失。这意味着数据传输和接收将受到影响，因为信号长度下降。</p><h3 id="58）什么常见的软件问题可能导致网络缺陷？"><a href="#58）什么常见的软件问题可能导致网络缺陷？" class="headerlink" title="58）什么常见的软件问题可能导致网络缺陷？"></a>58）什么常见的软件问题可能导致网络缺陷？</h3><p>软件相关问题可以是以下任何一种或其组合：</p><p>- 客户端服务器问题</p><p>- 应用程序冲突</p><p>- 配置错误</p><p>- 协议不匹配</p><p>- 安全问题</p><p>- 用户政策和权利问题</p><h3 id="59）什么是-ICMP？"><a href="#59）什么是-ICMP？" class="headerlink" title="59）什么是 ICMP？"></a>59）什么是 ICMP？</h3><p>ICMP 是 Internet 控制消息协议。它为 TCP/IP 协议栈内的协议提供消息传递和通信。这也是管理由 PING 等网络工具使用的错误信息的协议。</p><blockquote></blockquote><h3 id="60）什么是-Ping？"><a href="#60）什么是-Ping？" class="headerlink" title="60）什么是 Ping？"></a>60）什么是 Ping？</h3><p>Ping 是一个实用程序，允许您检查网络上的网络设备之间的连接。您可以使用其IP 地址或设备名称（如计算机名称）ping 设备。</p><h3 id="61）什么是点对点（P2P）？"><a href="#61）什么是点对点（P2P）？" class="headerlink" title="61）什么是点对点（P2P）？"></a>61）什么是点对点（P2P）？</h3><p>对等是不在服务器上回复的网络。该网络上的所有 PC 都是单独的工作站。</p><h3 id="62）什么是-DNS？"><a href="#62）什么是-DNS？" class="headerlink" title="62）什么是 DNS？"></a>62）什么是 DNS？</h3><p>DNS 是域名系统。该网络服务的主要功能是为 TCP/IP 地址解析提供主机名。</p><h3 id="63）光纤与其他介质有什么优势？"><a href="#63）光纤与其他介质有什么优势？" class="headerlink" title="63）光纤与其他介质有什么优势？"></a>63）光纤与其他介质有什么优势？</h3><p>光纤的一个主要优点是不太容易受到电气干扰。它还支持更高的带宽，意味着可以发送和接收更多的数据。长距离信号降级也非常小。</p><h3 id="64）集线器和交换机有什么区别？"><a href="#64）集线器和交换机有什么区别？" class="headerlink" title="64）集线器和交换机有什么区别？"></a>64）集线器和交换机有什么区别？</h3><p>集线器充当多端口中继器。然而，随着越来越多的设备连接到它，它将无法有效地管理通过它的流量。交换机提供了一个更好的替代方案，可以提高性能，特别是在所有端口上预期有高流量时。</p><h3 id="65）Windows-RRAS-服务支持的不同网络协议是什么？"><a href="#65）Windows-RRAS-服务支持的不同网络协议是什么？" class="headerlink" title="65）Windows RRAS 服务支持的不同网络协议是什么？"></a>65）Windows RRAS 服务支持的不同网络协议是什么？</h3><p>支持三种主要的网络协议：NetBEUI，TCP/IP 和 IPX。</p><h3 id="66）A，B-和-C-类网络中的最大网络和主机是什么？"><a href="#66）A，B-和-C-类网络中的最大网络和主机是什么？" class="headerlink" title="66）A，B 和 C 类网络中的最大网络和主机是什么？"></a>66）A，B 和 C 类网络中的最大网络和主机是什么？</h3><p>对于 A 类，有 126 个可能的网络和 16,777,214 个主机</p><p>对于 B 类，有 16,384 个可能的网络和 65,534 个主机</p><p>对于 C 类，有 2,097,152 个可能的网络和 254 个主机</p><h3 id="67）直通电缆的标准颜色顺序是什么？"><a href="#67）直通电缆的标准颜色顺序是什么？" class="headerlink" title="67）直通电缆的标准颜色顺序是什么？"></a>67）直通电缆的标准颜色顺序是什么？</h3><p>橙色/白色，橙色，绿色/白色，蓝色，蓝色/白色，绿色，棕色/白色，棕色。</p><h3 id="68）什么协议落在-TCP-IP-协议栈的应用层之下？"><a href="#68）什么协议落在-TCP-IP-协议栈的应用层之下？" class="headerlink" title="68）什么协议落在 TCP/IP 协议栈的应用层之下？"></a>68）什么协议落在 TCP/IP 协议栈的应用层之下？</h3><p>以下是 TCP/IP 应用层协议：FTP，TFTP，Telnet 和 SMTP。</p><h3 id="69）您需要连接两台电脑进行文件共享。是否可以这样做，而不使用集线器或路由器？"><a href="#69）您需要连接两台电脑进行文件共享。是否可以这样做，而不使用集线器或路由器？" class="headerlink" title="69）您需要连接两台电脑进行文件共享。是否可以这样做，而不使用集线器或路由器？"></a>69）您需要连接两台电脑进行文件共享。是否可以这样做，而不使用集线器或路由器？</h3><p>是的，您可以使用一根电缆将两台计算机连接在一起。在这种情况下可以使用交叉型电缆。在这种设置中，一条电缆的数据传输引脚连接到另一条电缆的数据接收引脚，反之亦然。</p><h3 id="70）什么是-ipconfig？"><a href="#70）什么是-ipconfig？" class="headerlink" title="70）什么是 ipconfig？"></a>70）什么是 ipconfig？</h3><p>Ipconfig 是一个常用于识别网络上计算机的地址信息的实用程序。它可以显示物理地址以及 IP 地址。</p><h3 id="71）直通和交叉电缆有什么区别？"><a href="#71）直通和交叉电缆有什么区别？" class="headerlink" title="71）直通和交叉电缆有什么区别？"></a>71）直通和交叉电缆有什么区别？</h3><p>直通电缆用于将计算机连接到交换机，集线器或路由器。交叉电缆用于将两个类似设备连接在一起，如 PC 到 PC 或集线器到集线器。</p><h3 id="72）什么是客户端-服务器？"><a href="#72）什么是客户端-服务器？" class="headerlink" title="72）什么是客户端/服务器？"></a>72）什么是客户端/服务器？</h3><p>客户端/服务器是一种类型的网络，其中一个或多个计算机充当服务器。服务器提供集中的资源库，如打印机和文件。客户端是指访问服务器的工作站。</p><h3 id="73）描述网络。"><a href="#73）描述网络。" class="headerlink" title="73）描述网络。"></a>73）描述网络。</h3><p>网络是指用于数据通信的计算机和外围设备之间的互连。可以使用有线电缆或通过无线链路进行网络连接。</p><h3 id="74）将-NIC-卡从一台-PC-移动到另一台-PC-时，MAC-地址是否也被转移？"><a href="#74）将-NIC-卡从一台-PC-移动到另一台-PC-时，MAC-地址是否也被转移？" class="headerlink" title="74）将 NIC 卡从一台 PC 移动到另一台 PC 时，MAC 地址是否也被转移？"></a>74）将 NIC 卡从一台 PC 移动到另一台 PC 时，MAC 地址是否也被转移？</h3><p>是的，那是因为 MAC 地址是硬连线到 NIC 电路，而不是 PC。这也意味着当 NIC卡被另一个替换时，PC 可以具有不同的 MAC 地址。</p><h3 id="75）解释聚类支持"><a href="#75）解释聚类支持" class="headerlink" title="75）解释聚类支持"></a>75）解释聚类支持</h3><p>群集支持是指网络操作系统在容错组中连接多台服务器的能力。这样做的主要目的是在一台服务器发生故障的情况下，集群中的下一个服务器将继续进行所有处理。</p><h3 id="76）在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？"><a href="#76）在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？" class="headerlink" title="76）在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？"></a>76）在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？</h3><p>必须在所有服务器和工作站上安装防病毒程序，以确保保护。这是因为个人用户可以访问任何工作站，并在插入可移动硬盘驱动器或闪存驱动器时引入计算机病毒。</p><h3 id="77）描述以太网。"><a href="#77）描述以太网。" class="headerlink" title="77）描述以太网。"></a>77）描述以太网。</h3><p>以太网是当今使用的流行网络技术之一。它是在 20 世纪 70 年代初开发的，并且基于 IEEE 中规定的规范。以太网在局域网中使用。</p><h3 id="78）实现环形拓扑有什么缺点？"><a href="#78）实现环形拓扑有什么缺点？" class="headerlink" title="78）实现环形拓扑有什么缺点？"></a>78）实现环形拓扑有什么缺点？</h3><p>如果网络上的一个工作站发生故障，可能会导致整个网络丢失。另一个缺点是，当需要在网络的特定部分进行调整和重新配置时，整个网络也必须被暂时关闭。</p><h3 id="79）CSMA-CD-和-CSMA-CA-有什么区别？"><a href="#79）CSMA-CD-和-CSMA-CA-有什么区别？" class="headerlink" title="79）CSMA/CD 和 CSMA/CA 有什么区别？"></a>79）CSMA/CD 和 CSMA/CA 有什么区别？</h3><p>CSMA/CD 或碰撞检测，每当碰撞发生时重新发送数据帧。CSMA/CA 或碰撞避免，将首先在数据传输之前广播意图发送。</p><h3 id="80）什么是-SMTP？"><a href="#80）什么是-SMTP？" class="headerlink" title="80）什么是 SMTP？"></a>80）什么是 SMTP？</h3><h3 id="SMTP-是简单邮件传输协议的缩写。该协议处理所有内部邮件，并在-TCP-IP-协议栈上提供必要的邮件传递服务。"><a href="#SMTP-是简单邮件传输协议的缩写。该协议处理所有内部邮件，并在-TCP-IP-协议栈上提供必要的邮件传递服务。" class="headerlink" title="SMTP 是简单邮件传输协议的缩写。该协议处理所有内部邮件，并在 TCP/IP 协议栈上提供必要的邮件传递服务。"></a>SMTP 是简单邮件传输协议的缩写。该协议处理所有内部邮件，并在 TCP/IP 协议栈上提供必要的邮件传递服务。</h3><h3 id="81）什么是组播路由？"><a href="#81）什么是组播路由？" class="headerlink" title="81）什么是组播路由？"></a>81）什么是组播路由？</h3><p>组播路由是一种有针对性的广播形式，将消息发送到所选择的用户组，而不是将其发送到子网上的所有用户。</p><h3 id="82）加密在网络上的重要性是什么？"><a href="#82）加密在网络上的重要性是什么？" class="headerlink" title="82）加密在网络上的重要性是什么？"></a>82）加密在网络上的重要性是什么？</h3><p>加密是将信息转换成用户不可读的代码的过程。然后使用秘密密钥或密码将其翻译或解密回其正常可读格式。加密有助于确保中途截获的信息仍然不可读，因为用户必须具有正确的密码或密钥。</p><h3 id="83）如何安排和显示-IP-地址？"><a href="#83）如何安排和显示-IP-地址？" class="headerlink" title="83）如何安排和显示 IP 地址？"></a>83）如何安排和显示 IP 地址？</h3><p>IP 地址显示为一系列由周期或点分隔的四位十进制数字。这种安排的另一个术语是点分十进制格式。一个例子是 192.168.101.2</p><h3 id="84）解释认证的重要性。"><a href="#84）解释认证的重要性。" class="headerlink" title="84）解释认证的重要性。"></a>84）解释认证的重要性。</h3><p>认证是在用户登录网络之前验证用户凭据的过程。它通常使用用户名和密码进行。这提供了限制来自网络上的有害入侵者的访问的安全手段。</p><h3 id="85）隧道模式是什么意思？"><a href="#85）隧道模式是什么意思？" class="headerlink" title="85）隧道模式是什么意思？"></a>85）隧道模式是什么意思？</h3><p>这是一种数据交换模式，其中两个通信计算机本身不使用 IPSec。相反，将 LAN连接到中转网络的网关创建了一个使用 IPSec 协议来保护通过它的所有通信的虚拟隧道。</p><h3 id="86）建立-WAN-链路涉及的不同技术有哪些？"><a href="#86）建立-WAN-链路涉及的不同技术有哪些？" class="headerlink" title="86）建立 WAN 链路涉及的不同技术有哪些？"></a>86）建立 WAN 链路涉及的不同技术有哪些？</h3><p>模拟连接 - 使用常规电话线；数字连接 - 使用数字电话线；交换连接 - 使用发送方和接收方之间的多组链接来移动数据。</p><h3 id="87）网格拓扑的一个优点是什么？"><a href="#87）网格拓扑的一个优点是什么？" class="headerlink" title="87）网格拓扑的一个优点是什么？"></a>87）网格拓扑的一个优点是什么？</h3><p>在一个链接失败的情况下，总会有另一个链接可用。网状拓扑实际上是最容错的网络拓扑之一。</p><h3 id="88）在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？"><a href="#88）在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？" class="headerlink" title="88）在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？"></a>88）在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？</h3><p>大部分网络由硬件组成。这些领域的问题可能包括硬盘故障，NIC 损坏甚至硬件启动。不正确的硬件配置也是其中一个疑难问题。</p><h3 id="89）可以做什么来修复信号衰减问题？"><a href="#89）可以做什么来修复信号衰减问题？" class="headerlink" title="89）可以做什么来修复信号衰减问题？"></a>89）可以做什么来修复信号衰减问题？</h3><p>处理这种问题的常见方法是使用中继器和集线器，因为它将有助于重新生成信号，从而防止信号丢失。检查电缆是否正确终止也是必须的。</p><h3 id="90）动态主机配置协议如何协助网络管理？"><a href="#90）动态主机配置协议如何协助网络管理？" class="headerlink" title="90）动态主机配置协议如何协助网络管理？"></a>90）动态主机配置协议如何协助网络管理？</h3><p>网络管理员不必访问每台客户端计算机来配置静态 IP 地址，而是可以应用动态主机配置协议来创建称为可以动态分配给客户端的范围的 IP 地址池。</p><h3 id="91）解释网络概念的概况？"><a href="#91）解释网络概念的概况？" class="headerlink" title="91）解释网络概念的概况？"></a>91）解释网络概念的概况？</h3><p>配置文件是为每个用户设置的配置设置。例如，可以创建将用户置于组中的配置文件。</p><h3 id="92）什么是-Sneakernet？"><a href="#92）什么是-Sneakernet？" class="headerlink" title="92）什么是 Sneakernet？"></a>92）什么是 Sneakernet？</h3><p>Sneakernet 被认为是最早的联网形式，其中使用可移动介质（如磁盘，磁带）物理传输数据。</p><h3 id="93）IEEE-在计算机网络中的作用是什么？"><a href="#93）IEEE-在计算机网络中的作用是什么？" class="headerlink" title="93）IEEE 在计算机网络中的作用是什么？"></a>93）IEEE 在计算机网络中的作用是什么？</h3><p>IEEE 或电气和电子工程师学会是由电气和电子设备标准发布和管理的工程师组成的组织。这包括网络设备，网络接口，cablings 和连接器。</p><h3 id="94）TCP-IP-Internet-层下有哪些协议？"><a href="#94）TCP-IP-Internet-层下有哪些协议？" class="headerlink" title="94）TCP/IP Internet 层下有哪些协议？"></a>94）TCP/IP Internet 层下有哪些协议？</h3><p>该层管理的协议有 4 种。这些是 ICMP，IGMP，IP 和 ARP。</p><h3 id="95）谈到网络，什么是权限？"><a href="#95）谈到网络，什么是权限？" class="headerlink" title="95）谈到网络，什么是权限？"></a>95）谈到网络，什么是权限？</h3><p>权限是指在网络上执行特定操作的授权许可。网络上的每个用户可以分配个人权限，具体取决于该用户必须允许的内容。</p><h3 id="96）建立-VLAN-的一个基本要求是什么？"><a href="#96）建立-VLAN-的一个基本要求是什么？" class="headerlink" title="96）建立 VLAN 的一个基本要求是什么？"></a>96）建立 VLAN 的一个基本要求是什么？</h3><p>需要一个 VLAN，因为在交换机级别只有一个广播域，这意味着每当新用户连接时，该信息都会传播到整个网络。交换机上的 VLAN 有助于在交换机级别创建单独的广播域。它用于安全目的。</p><h3 id="97）什么是-IPv6？"><a href="#97）什么是-IPv6？" class="headerlink" title="97）什么是 IPv6？"></a>97）什么是 IPv6？</h3><p>IPv6 或 Internet 协议版本 6 被开发以替代 IPv4。目前，IPv4 正在用于控制互联网流量，但 IPv4 已经饱和。IPv6 能够克服这个限制。</p><h3 id="98）什么是-RSA-算法？"><a href="#98）什么是-RSA-算法？" class="headerlink" title="98）什么是 RSA 算法？"></a>98）什么是 RSA 算法？</h3><p>RSA 是 Rivest-Shamir-Adleman 算法的缩写。它是目前最常用的公钥加密算法。</p><h3 id="99）什么是网格拓扑？"><a href="#99）什么是网格拓扑？" class="headerlink" title="99）什么是网格拓扑？"></a>99）什么是网格拓扑？</h3><p>网格拓扑是一种设置，其中每个设备都直接连接到网络上的每个其他设备。因此，它要求每个设备具有至少两个网络连接。</p><h3 id="100）100Base-FX-网络的最大段长度是多少？"><a href="#100）100Base-FX-网络的最大段长度是多少？" class="headerlink" title="100）100Base-FX 网络的最大段长度是多少？"></a>100）100Base-FX 网络的最大段长度是多少？</h3><p>使用 100Base-FX 的网段的最大允许长度为 412 米。整个网络的最大长度为 5 公里。</p><h1 id="下载网址"><a href="#下载网址" class="headerlink" title="下载网址"></a>下载网址</h1><ul><li><a href="https://batdalao.github.io/2020/04/11/computer-network/100-ge-wang-luo-ji-chu-zhi-shi/article.pdf" target="_blank" rel="noopener">https://batdalao.github.io/2020/04/11/computer-network/100-ge-wang-luo-ji-chu-zhi-shi/article.pdf</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>130个实用网站</title>
      <link href="/posts/2c23.html"/>
      <url>/posts/2c23.html</url>
      
        <content type="html"><![CDATA[<h1 id="130个实用网站"><a href="#130个实用网站" class="headerlink" title="130个实用网站"></a>130个实用网站</h1><h4 id="搞学习"><a href="#搞学习" class="headerlink" title="搞学习"></a>搞学习</h4><ul><li>知乎：<a href="http://www.zhihu.com" target="_blank" rel="noopener">www.zhihu.com</a></li><li>TED（最优质的演讲）：<a href="https://www.ted.com/" target="_blank" rel="noopener">https://www.ted.com/</a></li><li>谷粉学术： <a href="https://gfsoso.99lb.net/scholar.html" target="_blank" rel="noopener">https://gfsoso.99lb.net/scholar.html</a></li><li>大学资源网：<a href="http://www.dxzy163.com/" target="_blank" rel="noopener">http://www.dxzy163.com/</a></li><li>简答题：<a href="http://www.jiandati.com/" target="_blank" rel="noopener">http://www.jiandati.com/</a></li><li>网易公开课：<a href="https://open.163.com/ted/" target="_blank" rel="noopener">https://open.163.com/ted/</a></li><li>网易云课堂：<a href="https://study.163.com/" target="_blank" rel="noopener">https://study.163.com/</a></li><li>中国大学MOOC：<a href="http://www.icourse163.org" target="_blank" rel="noopener">www.icourse163.org</a></li><li>网易云课堂：<a href="https://study.163.com/" target="_blank" rel="noopener">https://study.163.com/</a></li><li>哔哩哔哩弹幕网：<a href="http://www.bilibili.com" target="_blank" rel="noopener">www.bilibili.com</a></li><li>我要自学网：<a href="http://www.51zxw.net" target="_blank" rel="noopener">www.51zxw.net</a></li><li>学堂在线：<a href="http://www.xuetangx.com" target="_blank" rel="noopener">www.xuetangx.com</a></li><li>爱课程：<a href="http://www.icourses.cn" target="_blank" rel="noopener">www.icourses.cn</a></li><li>猫咪论文：<a href="https://lunwen.im/" target="_blank" rel="noopener">https://lunwen.im/</a></li><li>iData（论文搜索）：<a href="http://www.cn-ki.net" target="_blank" rel="noopener">www.cn-ki.net</a></li><li>文泉考试：<a href="https://www.wqkaoshi.com" target="_blank" rel="noopener">https://www.wqkaoshi.com</a></li><li>码农之家（计算机电子书下载）：<a href="http://www.xz577.com" target="_blank" rel="noopener">www.xz577.com</a></li><li>鸠摩搜书：<a href="http://www.jiumodiary.com" target="_blank" rel="noopener">www.jiumodiary.com</a></li><li>云海电子图书馆：<a href="http://www.pdfbook.cn" target="_blank" rel="noopener">www.pdfbook.cn</a></li><li>周读（书籍搜索）：ireadweek.com</li><li>知轩藏书：<a href="http://www.zxcs.me/" target="_blank" rel="noopener">http://www.zxcs.me/</a></li><li>脚本之家电子书下载：<a href="https://www.jb51.net/books/" target="_blank" rel="noopener">https://www.jb51.net/books/</a></li><li>搜书VIP-电子书搜索：<a href="http://www.soshuvip.com/all.html" target="_blank" rel="noopener">http://www.soshuvip.com/all.html</a></li><li>书格（在线古籍图书馆）：<a href="https://new.shuge.org/" target="_blank" rel="noopener">https://new.shuge.org/</a></li><li>术语在线：<a href="http://www.termonline.cn/" target="_blank" rel="noopener">http://www.termonline.cn/</a></li><li>必看网（人生必看的书籍）：<a href="https://www.biikan.com/" target="_blank" rel="noopener">https://www.biikan.com/</a></li></ul><h4 id="冷知识-黑科技"><a href="#冷知识-黑科技" class="headerlink" title="冷知识 / 黑科技"></a>冷知识 / 黑科技</h4><ul><li>上班摸鱼必备（假装电脑系统升级）：<a href="http://fakeupdate.net/" target="_blank" rel="noopener">http://fakeupdate.net/</a></li><li>创意光线绘画：<a href="http://weavesilk.com/" target="_blank" rel="noopener">http://weavesilk.com/</a></li><li>星系观察：<a href="https://stellarium-web.org/" target="_blank" rel="noopener">https://stellarium-web.org/</a></li><li>煎蛋：<a href="http://jandan.net/" target="_blank" rel="noopener">http://jandan.net/</a></li><li>渣男-说话的艺术：<a href="https://lovelive.tools/" target="_blank" rel="noopener">https://lovelive.tools/</a></li><li>全历史：<a href="https://www.allhistory.com/" target="_blank" rel="noopener">https://www.allhistory.com/</a></li><li>iData：<a href="https://www.cn-ki.net/" target="_blank" rel="noopener">https://www.cn-ki.net/</a></li><li>caj云阅读：<a href="http://cajviewer.cnki.net/cajcloud/" target="_blank" rel="noopener">http://cajviewer.cnki.net/cajcloud/</a></li></ul><h4 id="资源搜索"><a href="#资源搜索" class="headerlink" title="资源搜索"></a>资源搜索</h4><ul><li>DogeDoge搜索引擎：<a href="http://www.dogedoge.com" target="_blank" rel="noopener">www.dogedoge.com</a></li><li>秘迹搜索：<a href="https://mijisou.com/" target="_blank" rel="noopener">https://mijisou.com/</a></li><li>小白盘：<a href="https://www.xiaobaipan.com/" target="_blank" rel="noopener">https://www.xiaobaipan.com/</a></li><li>云盘精灵（资源搜索）：<a href="http://www.yunpanjingling.com" target="_blank" rel="noopener">www.yunpanjingling.com</a></li><li>虫部落（资源搜索）：<a href="http://www.chongbuluo.com" target="_blank" rel="noopener">www.chongbuluo.com</a></li><li>如风搜（资源搜索）：<a href="http://www.rufengso.net/" target="_blank" rel="noopener">http://www.rufengso.net/</a></li><li>爱扒：<a href="https://www.zyboe.com/" target="_blank" rel="noopener">https://www.zyboe.com/</a></li></ul><h4 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h4><ul><li>云端超级应用空间（PS，PPT，Excel，Ai）：<a href="https://uzer.me/" target="_blank" rel="noopener">https://uzer.me/</a></li><li>在线接口测试（Getman）：<a href="https://getman.cn/" target="_blank" rel="noopener">https://getman.cn/</a></li><li>香当网（年终总结，个人简历，事迹材料，租赁合同，演讲稿）：<a href="https://www.xiangdang.net/" target="_blank" rel="noopener">https://www.xiangdang.net/</a></li><li>二维码生成：<a href="https://cli.im/" target="_blank" rel="noopener">https://cli.im/</a></li><li>搜狗翻译：fanyi.sogou.com</li><li>熵数（图表制作，数据可视化）：<a href="https://dydata.io/appv2/#/pages/index/home" target="_blank" rel="noopener">https://dydata.io/appv2/#/pages/index/home</a></li><li>拷贝兔：<a href="https://cp.anyknew.com/" target="_blank" rel="noopener">https://cp.anyknew.com/</a></li><li>图片无限变放大：<a href="http://bigjpg.com/zh" target="_blank" rel="noopener">http://bigjpg.com/zh</a></li><li>幕布（在线大纲笔记工具）：mubu.com</li><li>奶牛快传（在线传输文件利器）：cowtransfer.com</li><li>在线转换器（在线转换器转换任何测量单位）：<a href="https://zh.justcnw.com/" target="_blank" rel="noopener">https://zh.justcnw.com/</a></li><li>调查问卷制作：<a href="https://www.wenjuan.com/" target="_blank" rel="noopener">https://www.wenjuan.com/</a></li><li>果核剥壳（软件下载）：<a href="https://www.ghpym.com/" target="_blank" rel="noopener">https://www.ghpym.com/</a></li><li>软件下载：<a href="https://www.unyoo.com/" target="_blank" rel="noopener">https://www.unyoo.com/</a></li><li>MSDN我告诉你（windows10系统镜像下载）：<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a></li></ul><h4 id="导航页（工具集）"><a href="#导航页（工具集）" class="headerlink" title="导航页（工具集）"></a>导航页（工具集）</h4><ul><li>NiceTool.net 好工具网：<a href="http://www.nicetool.net/" target="_blank" rel="noopener">http://www.nicetool.net/</a></li><li>现实君工具箱（综合型在线工具集成网站）：<a href="http://tool.uixsj.cn/" target="_blank" rel="noopener">http://tool.uixsj.cn/</a></li><li>蓝调网站：<a href="http://lcoc.top/" target="_blank" rel="noopener">http://lcoc.top/</a></li><li>偷渡鱼：<a href="https://touduyu.com/" target="_blank" rel="noopener">https://touduyu.com/</a></li><li>牛导航：<a href="http://www.ziliao6.com/" target="_blank" rel="noopener">http://www.ziliao6.com/</a></li><li>小呆导航：<a href="https://www.webjike.com/index.html" target="_blank" rel="noopener">https://www.webjike.com/index.html</a></li><li>简法主页：<a href="http://www.jianfast.com/" target="_blank" rel="noopener">http://www.jianfast.com/</a></li><li>KIM主页：<a href="https://kim.plopco.com/" target="_blank" rel="noopener">https://kim.plopco.com/</a></li><li>聚BT：<a href="https://jubt.net/cn/index.html" target="_blank" rel="noopener">https://jubt.net/cn/index.html</a></li><li>精准云工具合集：<a href="https://jingzhunyun.com/" target="_blank" rel="noopener">https://jingzhunyun.com/</a></li><li>兔2工具合集：<a href="https://www.tool2.cn/" target="_blank" rel="noopener">https://www.tool2.cn/</a></li><li>爱资料工具（在线实用工具集合）：<a href="http://www.toolnb.com" target="_blank" rel="noopener">www.toolnb.com</a></li><li>工具导航：<a href="https://hao.logosc.cn/" target="_blank" rel="noopener">https://hao.logosc.cn/</a></li></ul><h4 id="看视频"><a href="#看视频" class="headerlink" title="看视频"></a>看视频</h4><ul><li>电影推荐（分类别致）：<a href="http://www.mvcat.com" target="_blank" rel="noopener">http://www.mvcat.com</a></li><li>去看TV：<a href="https://www.qukantv.net/" target="_blank" rel="noopener">https://www.qukantv.net/</a></li><li>动漫视频网：<a href="http://www.zzzfun.com/" target="_blank" rel="noopener">http://www.zzzfun.com/</a></li><li>94神马电影网：<a href="http://www.9rmb.com/" target="_blank" rel="noopener">http://www.9rmb.com/</a></li><li>NO视频官网：<a href="http://www.novipnoad.com/" target="_blank" rel="noopener">http://www.novipnoad.com/</a></li><li>蓝光画质电影：<a href="http://www.languang.co/" target="_blank" rel="noopener">http://www.languang.co/</a></li><li>在线看剧：<a href="http://dy.27234.cn/" target="_blank" rel="noopener">http://dy.27234.cn/</a></li><li>大数据导航：<a href="http://hao.199it.com/" target="_blank" rel="noopener">http://hao.199it.com/</a></li><li>多功能图片网站：<a href="https://www.logosc.cn/so/" target="_blank" rel="noopener">https://www.logosc.cn/so/</a></li><li>牛牛TV：<a href="http://www.ziliao6.com/tv/" target="_blank" rel="noopener">http://www.ziliao6.com/tv/</a></li><li>VideoFk解析视频：<a href="http://www.videofk.com/" target="_blank" rel="noopener">http://www.videofk.com/</a></li><li>蓝调网站：<a href="http://lcoc.top/vip2.3/" target="_blank" rel="noopener">http://lcoc.top/vip2.3/</a></li></ul><h4 id="学设计"><a href="#学设计" class="headerlink" title="学设计"></a>学设计</h4><ul><li>免费音频素材：<a href="https://icons8.cn/music" target="_blank" rel="noopener">https://icons8.cn/music</a></li><li>新CG儿（视频素材模板，无水印+免费下载）：<a href="https://www.newcger.com/" target="_blank" rel="noopener">https://www.newcger.com/</a></li><li>小图标下载：<a href="https://www.easyicon.net/" target="_blank" rel="noopener">https://www.easyicon.net/</a></li><li>第一字体转换器：<a href="http://www.diyiziti.com/" target="_blank" rel="noopener">http://www.diyiziti.com/</a></li><li>doyoudosh（平面设计）：<a href="http://www.doyoudo.com" target="_blank" rel="noopener">www.doyoudo.com</a></li><li>企业宣传视频在线制作：<a href="https://duomu.tv/" target="_blank" rel="noopener">https://duomu.tv/</a></li><li>MAKE海报设计官网：<a href="http://maka.im/" target="_blank" rel="noopener">http://maka.im/</a></li><li>一键海报神器：<a href="https://www.logosc.cn/photo/?utm_source=hao.logosc.cn&amp;utm_medium=referral" target="_blank" rel="noopener">https://www.logosc.cn/photo/?utm_source=hao.logosc.cn&amp;utm_medium=referral</a></li><li>字由（字体设计）：<a href="http://www.hellofont.cn/" target="_blank" rel="noopener">http://www.hellofont.cn/</a></li><li>查字体网站：<a href="https://fonts.safe.360.cn/" target="_blank" rel="noopener">https://fonts.safe.360.cn/</a></li><li>爱给网（免费素材下载的网站，包括音效、配乐，3D、视频、游戏，平面、教程）：<a href="http://www.aigei.com/" target="_blank" rel="noopener">http://www.aigei.com/</a></li><li>在线视频剪辑：<a href="https://bilibili.clipchamp.com/editor" target="_blank" rel="noopener">https://bilibili.clipchamp.com/editor</a></li></ul><h4 id="搞文档"><a href="#搞文档" class="headerlink" title="搞文档"></a>搞文档</h4><ul><li>即书（在线制作PPT）：<a href="https://www.keysuper.com/" target="_blank" rel="noopener">https://www.keysuper.com/</a></li><li>PDF处理：<a href="https://smallpdf.com/cn" target="_blank" rel="noopener">https://smallpdf.com/cn</a></li><li>PDF处理：<a href="https://www.ilovepdf.com/zh-cn" target="_blank" rel="noopener">https://www.ilovepdf.com/zh-cn</a></li><li>PDF处理：<a href="https://www.pdfpai.com/" target="_blank" rel="noopener">https://www.pdfpai.com/</a></li><li>PDF处理：<a href="https://www.hipdf.cn/" target="_blank" rel="noopener">https://www.hipdf.cn/</a></li><li>腾讯文档（在线协作编辑和管理文档）：<a href="https://docs.qq.com/" target="_blank" rel="noopener">https://docs.qq.com/</a></li><li>ProcessOn（在线协作制作结构图）：<a href="http://www.processon.com" target="_blank" rel="noopener">www.processon.com</a></li><li>iLovePDF（在线转换PDF利器）：<a href="http://www.ilovepdf.com" target="_blank" rel="noopener">www.ilovepdf.com</a></li><li>PPT在线制作：<a href="https://www.woodo.cn/" target="_blank" rel="noopener">https://www.woodo.cn/</a></li><li>PDF24工具（pdf处理工具）：<a href="https://tools.pdf24.org/en" target="_blank" rel="noopener">https://tools.pdf24.org/en</a></li><li>IMGBOT（在线图片处理）：<a href="http://www.imgbot.ai" target="_blank" rel="noopener">www.imgbot.ai</a></li><li>福昕云编辑（在线编辑PDF）：<a href="http://edit.foxitcloud.cn/" target="_blank" rel="noopener">http://edit.foxitcloud.cn/</a></li><li>TinyPNG（在线压缩图片）：<a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/</a></li><li>UZER.ME（在线使用各种大应用，在线使用CAD，MATLAB，Office三件套<br>）：<a href="https://uzer.me/" target="_blank" rel="noopener">https://uzer.me/</a></li><li>优品PPT（模板下载）：<a href="http://www.ypppt.com/" target="_blank" rel="noopener">http://www.ypppt.com/</a></li><li>第一PPT（模板下载）：<a href="http://www.1ppt.com/xiazai/" target="_blank" rel="noopener">http://www.1ppt.com/xiazai/</a></li><li>三顿PPT导航：<a href="https://sandunppt.com/" target="_blank" rel="noopener">https://sandunppt.com/</a></li></ul><h4 id="找图片"><a href="#找图片" class="headerlink" title="找图片"></a>找图片</h4><ul><li>电脑壁纸：<a href="http://lcoc.top/bizhi/" target="_blank" rel="noopener">http://lcoc.top/bizhi/</a></li><li><a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com/</a></li><li><a href="https://pixabay.com/" target="_blank" rel="noopener">https://pixabay.com/</a></li><li><a href="https://www.pexels.com/" target="_blank" rel="noopener">https://www.pexels.com/</a></li><li><a href="https://visualhunt.com/" target="_blank" rel="noopener">https://visualhunt.com/</a></li><li><a href="https://www.ssyer.com/" target="_blank" rel="noopener">https://www.ssyer.com/</a></li><li>彼岸图网：<a href="http://pic.netbian.com/" target="_blank" rel="noopener">http://pic.netbian.com/</a></li><li>极像素（超高清大图）：<a href="https://www.sigoo.com/" target="_blank" rel="noopener">https://www.sigoo.com/</a></li><li>免费版权图片搜索：<a href="https://www.logosc.cn/so/" target="_blank" rel="noopener">https://www.logosc.cn/so/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
