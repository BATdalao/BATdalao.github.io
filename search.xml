<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>微机原理基础概论</title>
      <link href="/posts/1635.html"/>
      <url>/posts/1635.html</url>
      
        <content type="html"><![CDATA[<h1 id="微机原理基础概论"><a href="#微机原理基础概论" class="headerlink" title="微机原理基础概论"></a>微机原理基础概论</h1><h2 id="硬件设备"><a href="#硬件设备" class="headerlink" title="硬件设备"></a>硬件设备</h2><p>主机系统:</p><ul><li>CPU</li><li>存储器</li><li>输入输出接口</li><li>总线</li></ul><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>微处理器简称CPU，是计算机的核心。<br>主要包括：</p><ul><li>运算器</li><li>控制器</li><li>寄存器组</li></ul><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hZmZjM2YzNjBhYzZhNjM0ODI3ZjM1ZDdjMGM2YzFlMC94bWxub3RlLzMzMDM4RUM2RTY4NTQ1QUZCOUM5NUQ1NkY5Q0Q4RDI5LzMxNDk3?x-oss-process=image/format,png" alt="img"></p><h3 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h3><p>定义：</p><ul><li>计算机中的记忆装置。用于存放计算机工作过程中需要操作的数据和程序。</li><li>内存储器<ul><li>特点:<ul><li>存取速度较快，容量相对较小。</li><li>内存按单元组织，每单元都对应一个惟一的地址；</li><li>每个内存单元中存放1Byte数据；</li><li>内存单元个数称为内存容量。</li></ul></li></ul></li></ul><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hZmZjM2YzNjBhYzZhNjM0ODI3ZjM1ZDdjMGM2YzFlMC94bWxub3RlL0Q4MzI1NDY4N0E0NjQ1NTlBMTY4ODAxQzczNTdFRjJELzMxNTEw?x-oss-process=image/format,png" alt="img"></p><ul><li>外存储器<ul><li>联机外存<ul><li>硬磁盘</li></ul></li><li>脱机外存<ul><li>各种移动存储设备</li></ul></li></ul></li></ul><h3 id="输入输出接口"><a href="#输入输出接口" class="headerlink" title="输入输出接口"></a>输入输出接口</h3><p>接口是CPU与外部设备间的桥梁</p><p>主要功能：</p><ul><li>数据缓冲寄存；</li><li>信号电平或类型的转换；</li><li>实现主机与外设间的运行匹配。</li></ul><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hZmZjM2YzNjBhYzZhNjM0ODI3ZjM1ZDdjMGM2YzFlMC94bWxub3RlL0JEMEE0M0RCNTFFMTRGMjI4NjE3Rjg0RUExRUNDMUE5LzMxNTE1?x-oss-process=image/format,png" alt="img"></p><h3 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h3><ul><li>是一组导线和相关的控制、驱动电路的集合。</li><li>是计算机系统各部件之间传输地址、数据和控制信息的通道<ul><li>地址总线（AB）</li><li>数据总线（DB）</li><li>控制总线（CB）</li></ul></li></ul><h2 id="微机的一般工作过程"><a href="#微机的一般工作过程" class="headerlink" title="微机的一般工作过程"></a>微机的一般工作过程</h2><p>计算机的工作就是按照一定的顺序,一条条地执行指令</p><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>指令：</p><ul><li>由人向计算机发出的、能够为计算机所识别的命令</li></ul><p>执行步骤:</p><ol><li>取指令</li><li>分析指令</li><li>读取操作数</li><li>执行指令</li><li>存放结果</li></ol><h3 id="并行与顺序执行"><a href="#并行与顺序执行" class="headerlink" title="并行与顺序执行"></a>并行与顺序执行</h3><p>顺序执行：</p><ul><li>一条指令执行完了再执行下一条指令。</li></ul><p>并行执行：</p><ul><li>同时执行两条或多条指令。</li></ul><h2 id="冯诺依曼计算机"><a href="#冯诺依曼计算机" class="headerlink" title="冯诺依曼计算机"></a>冯诺依曼计算机</h2><p>冯 • 诺依曼计算机的工作原理</p><ul><li>存储程序工作原理</li></ul><p>结构特点</p><ul><li>运算器为核心</li></ul><p>特点：</p><ul><li>程序存储，共享数据，顺序执行</li><li>属于顺序处理机，适合于确定的算法和数值数据的处理。</li></ul><p>不足：</p><ul><li>与存储器间有大量数据交互，对总线要求很高；</li><li>执行顺序由程序决定，对大型复杂任务较困难；</li><li>以运算器为核心，处理效率较低；</li><li>由PC控制执行顺序，难以进行真正的并行处理。</li></ul><h2 id="哈佛结构"><a href="#哈佛结构" class="headerlink" title="哈佛结构"></a>哈佛结构</h2><ul><li>指令和数据分别存放在两个独立的存储器模块中；</li><li>CPU与存储器间指令和数据的传送分别采用两组独立的总线；</li><li>可以在一个机器周期内同时获得指令操作码和操作数。</li></ul><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hZmZjM2YzNjBhYzZhNjM0ODI3ZjM1ZDdjMGM2YzFlMC94bWxub3RlL0FFRjQwQkM2ODI0RjREMzk5QkJGMkYxMkE1RTIyQTVDLzMxNTMx?x-oss-process=image/format,png" alt="img"></p><h2 id="数制"><a href="#数制" class="headerlink" title="数制"></a>数制</h2><p>十进制到非十进制数的转换</p><ul><li>对二进制的转换：<ul><li>对整数：除2取余；</li><li>对小数：乘2取整。</li></ul></li><li>对十六进制的转换：<ul><li>对整数：除16取余；</li><li>对小数：乘16取整。</li></ul></li><li>对八进制的转换：<ul><li>对整数：除8取余；</li><li>对小数：乘8取整。</li></ul></li></ul><p>实例:</p><blockquote><p>将十进制数48.25转换为二进制数。</p></blockquote><p>将两个部分分开计算:</p><p>48 / 2 -&gt; 结果逆序排放:110000</p><p>0.25 *2 -&gt; 结果顺序排放: 01</p><p>结果:110000.01</p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><ul><li>二进制</li><li>BCD</li><li>ASCII码</li></ul><h2 id="计算机中的数以及运算"><a href="#计算机中的数以及运算" class="headerlink" title="计算机中的数以及运算"></a>计算机中的数以及运算</h2><h3 id="定点数"><a href="#定点数" class="headerlink" title="定点数"></a>定点数</h3><p>定点数:</p><ul><li>定点整数</li><li>定点小数</li></ul><p>特点:</p><ol><li>编程时需要确定小数点位置；</li><li>难以表示两个大小相差较大的数</li><li>存储空间利用率低</li></ol><h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>浮点数：小数点的位置可以左右移动的数</p><h3 id="有符号数"><a href="#有符号数" class="headerlink" title="有符号数"></a>有符号数</h3><p>有符号数：</p><ul><li>用最高位表示符号，其余是数值</li></ul><pre><code>0：表示正数1：表示负数 </code></pre><p>符号数的表示方法：</p><ul><li>原码</li><li>反码</li><li>补码</li></ul><h4 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h4><pre><code>[X]原=符号位+|绝对值| </code></pre><p>缺点：</p><ul><li>计算机中用原码进行加减运算比较困难</li><li>0的表示不唯一。</li></ul><h4 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h4><ul><li>若X&gt;0 ，则 [X]反=[X]原</li><li>若X&lt;0， 则 [X]反= 对应原码的符号位不变，数值部分按位求反。</li></ul><p>数0的反码也不是唯一的。</p><h4 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h4><p>定义：</p><ul><li>若X&gt;0， 则[X]补= [X]反= [X]原</li><li>若X&lt;0， 则[X]补= [X]反+1</li></ul><p><strong>数0的补码也是唯一的。</strong></p><h4 id="运算溢出判断"><a href="#运算溢出判断" class="headerlink" title="运算溢出判断"></a>运算溢出判断</h4><ul><li>对最高位有进位,Cs = 1</li><li>对次高位有进位,Cp = 1<ul><li>当两者进一个为1时,发生溢出<ul><li>Cs =1 为负溢出</li><li>Cp =1 为正溢出</li></ul></li></ul></li><li>两者都为1,结果为正数</li></ul><h1 id="8088-8086-CPU"><a href="#8088-8086-CPU" class="headerlink" title="8088/8086 CPU"></a>8088/8086 CPU</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>采用了并行流水线工作方式<ul><li>通过指令欲取队列实现</li></ul></li><li>对内存空间实行分段管理<ul><li>将内存分成4段,并且设置地址寄存器,从而达到对于1MB空间的寻址</li></ul></li><li>支持协处理器</li></ul><h2 id="两种工作模式"><a href="#两种工作模式" class="headerlink" title="两种工作模式"></a>两种工作模式</h2><p>8088/8086可工作于两种模式下</p><ul><li>最小模式<ul><li>最小模式为单处理器模式，所有控制信号由微处理器产生</li></ul></li><li>最大模式<ul><li>最大模式为多处理器模式，部分控制信号由外部总线控制器产生</li><li>用于包含协处理器的情况下</li></ul></li></ul><h3 id="最小模式"><a href="#最小模式" class="headerlink" title="最小模式"></a>最小模式</h3><p>8088最小模式下的主要引脚信号</p><ul><li>完成<strong>一次访问内存或接口</strong>所需要的主要信号</li><li>与外部同步控制信号</li><li>中断请求和响应信号</li><li>总线保持和响应信号</li></ul><h2 id="内部结构"><a href="#内部结构" class="headerlink" title="内部结构"></a>内部结构</h2><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hZmZjM2YzNjBhYzZhNjM0ODI3ZjM1ZDdjMGM2YzFlMC94bWxub3RlLzJBODQ0RDhBRjc3QTQ3QTBBQkMyOEQxQjhBMDMyMDM0LzI5NjY5?x-oss-process=image/format,png" alt="img"></p><h3 id="EU-执行单元"><a href="#EU-执行单元" class="headerlink" title="EU_执行单元"></a>EU_执行单元</h3><p>构成:</p><ul><li>运算器</li><li>8个通用寄存器</li><li>1个标志寄存器</li><li>EU部分控制电路</li></ul><p>作用:</p><ul><li>指令译码</li><li>指令执行</li><li>暂存中间运算结果</li><li>保存运算结果特征</li></ul><h3 id="BIU-总线接口单元"><a href="#BIU-总线接口单元" class="headerlink" title="BIU_总线接口单元"></a>BIU_总线接口单元</h3><p>功能:</p><ul><li>从内存中取到指令到欲取队列<ul><li>并行流水线的基础</li></ul></li><li>负责与内存和IO的数据传输</li><li>传递新的指令给EU去执行</li></ul><p>结构:</p><ul><li>指令队列</li><li>段寄存器</li><li>地址加法器</li><li>逻辑控制单元</li></ul><h3 id="8088-内部寄存器详解"><a href="#8088-内部寄存器详解" class="headerlink" title="8088 内部寄存器详解"></a>8088 内部寄存器详解</h3><ul><li>总共14个16位寄存器<ul><li>8个通用寄存器</li><li>4个段寄存器</li><li>2个控制寄存器</li></ul></li></ul><h4 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h4><h5 id="数据寄存器"><a href="#数据寄存器" class="headerlink" title="数据寄存器"></a>数据寄存器</h5><ul><li>AX : 累加器<ul><li>IO指令接口信息,中间运算结果</li></ul></li><li>BX : 基址寄存器<ul><li>间接寻址存放基址</li></ul></li><li>CX : 计数寄存器<ul><li>循环或者串操作的计数器</li></ul></li><li>DX : 数据寄存器</li></ul><h5 id="地址寄存器"><a href="#地址寄存器" class="headerlink" title="地址寄存器"></a>地址寄存器</h5><ul><li>SP : 堆栈指针寄存器<ul><li>栈顶的偏移地址</li></ul></li><li>BP : 基址指针寄存器<ul><li>访问内存单元的偏移地址</li></ul></li></ul><p><strong>BP默认在堆栈段,BX默认在数据段</strong></p><h5 id="变址寄存器"><a href="#变址寄存器" class="headerlink" title="变址寄存器"></a>变址寄存器</h5><ul><li>SI : 源变址寄存器</li><li>DI : 目标变址寄存器</li></ul><h4 id="控制寄存器"><a href="#控制寄存器" class="headerlink" title="控制寄存器"></a>控制寄存器</h4><h5 id="IP指针寄存器"><a href="#IP指针寄存器" class="headerlink" title="IP指针寄存器"></a>IP指针寄存器</h5><ul><li>用于指定下一条指令</li></ul><h5 id="FLAGS状态寄存器"><a href="#FLAGS状态寄存器" class="headerlink" title="FLAGS状态寄存器"></a>FLAGS状态寄存器</h5><h6 id="状态标志位"><a href="#状态标志位" class="headerlink" title="状态标志位"></a>状态标志位</h6><ul><li>记录计算的结果状态</li></ul><table><thead><tr><th>标志位</th><th>含义</th><th>为</th></tr></thead><tbody><tr><td>CF</td><td>进位标志位</td><td>加(减)法运算时，若最高位有进(借)位则CF=1</td></tr><tr><td>PF</td><td>奇偶标志位</td><td>偶数个</td></tr><tr><td>AF</td><td>辅助进位标志位</td><td>第三位对第四位有进位</td></tr><tr><td>ZF</td><td>零标志位</td><td>结果为0</td></tr><tr><td>SF</td><td>符号标志位</td><td>最高位为1,意思就是结果为负数</td></tr><tr><td>OF</td><td>溢出标志位</td><td>当算术运算的结果超出了有符号数的可表达范围时， OF=l</td></tr></tbody></table><h6 id="控制标志位"><a href="#控制标志位" class="headerlink" title="控制标志位"></a>控制标志位</h6><table><thead><tr><th>标志位</th><th>含义</th></tr></thead><tbody><tr><td>TF</td><td>陷阱标志位.TF=1时，使CPU处于单步执行指令的工作方式</td></tr><tr><td>IF</td><td>允许中断</td></tr><tr><td>DF</td><td>串操作方向</td></tr></tbody></table><h4 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h4><ul><li>CS<ul><li>代码段寄存器，存放代码段的段基地址。</li></ul></li><li>DS<ul><li>数据段寄存器 ，存放数据段的段基地址。</li></ul></li><li>ES<ul><li>附加段寄存器，存放数据段的段基地址。</li></ul></li><li>SS<ul><li>堆栈段寄存器， 存放堆栈段的段基地址</li></ul></li></ul><h1 id="实模式下存储与总线"><a href="#实模式下存储与总线" class="headerlink" title="实模式下存储与总线"></a>实模式下存储与总线</h1><h2 id="寻址"><a href="#寻址" class="headerlink" title="寻址"></a>寻址</h2><h3 id="内存分段管理思想"><a href="#内存分段管理思想" class="headerlink" title="内存分段管理思想"></a>内存分段管理思想</h3><p>内存每个单元的地址在逻辑上都由两部分组成：</p><ul><li>段（基）地址<ul><li>指示存储单元在整个内存空间中处于哪个区域</li></ul></li><li>段内地址（相对地址/偏移地址）<ul><li>指示存储单元在段中的相对位置（与<strong>段中第1个单元</strong>的距离）</li></ul></li></ul><h3 id="内存地址变换"><a href="#内存地址变换" class="headerlink" title="内存地址变换"></a>内存地址变换</h3><pre><code>物理地址=段基地址×16+偏移地址</code></pre><p>或</p><pre><code>物理地址=段基地址×10H+偏移地址</code></pre><p>实例:</p><ul><li>段基地址 =6000H</li><li>段首地址 : 60000H</li><li>偏移地址=0009H</li><li>物理地址 : 60009H</li></ul><h3 id="逻辑段与逻辑地址"><a href="#逻辑段与逻辑地址" class="headerlink" title="逻辑段与逻辑地址"></a>逻辑段与逻辑地址</h3><p>内存的分段是逻辑分段，不是物理段。各个逻辑段在地址上可以不相连、可以部分重合，也可以完全重合。每个内存单元具有惟一物理地址，但可能具有多个逻辑地址。即：</p><ul><li>一个内存单元可以同时处于两个逻辑段</li><li>一个内存单元可以在不同的时刻属于相同（或不同）类型的段</li><li>一个内存单元在同一时刻可以属于不同类型的段</li></ul><p>实例:</p><blockquote><p>已知:<br>CS=1055H，<br>DS=250AH<br>ES=2EF0H<br>SS=8FF0H<br>画出各段在内存中的分布。</p></blockquote><p>解:</p><ul><li>CS=1055H<ul><li>段首地址=10550H<ul><li>默认段尾地址= 2054FH (加了 FFFFH)</li></ul></li></ul></li><li>DS=250AH<ul><li>段首地址=250A0H</li><li>默认段尾地址=3509FH</li></ul></li><li>ES=2EF0H</li><li>SS=8FF0H</li></ul><h3 id="堆栈的概念"><a href="#堆栈的概念" class="headerlink" title="堆栈的概念"></a>堆栈的概念</h3><p>堆栈：</p><ul><li>内存中一个特殊区域，用于存放暂时不用或需要保护的数据。</li><li>常用于响应中断或子程序调用。</li></ul><p>名词解释:</p><ul><li>栈顶:堆栈指针的偏移位置</li><li>栈首:等于则满,堆栈段的首地址</li><li>栈底:等于则空,堆栈段的结尾地址</li></ul><p>实例:</p><ul><li>已知<ul><li>SS=1000H，SP=0100H</li></ul></li><li>则：<ul><li>堆栈段的段首地址=10000H</li><li>栈顶（偏移）地址=0100H</li></ul></li><li>若该段最后一个单元地址为10200H，则：<ul><li>栈底偏移地址=0200H</li></ul></li></ul><h2 id="系统总线"><a href="#系统总线" class="headerlink" title="系统总线"></a>系统总线</h2><p>CPU工作时序：</p><ul><li>CPU各引脚信号在时间上的关系</li></ul><p>总线周期：</p><ul><li>CPU完成一次访问内存（或接口）操作所需要的时间。</li><li>一个总线周期至少包括4个时钟周期。</li></ul><h1 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h1><h2 id="指令系统概述"><a href="#指令系统概述" class="headerlink" title="指令系统概述"></a>指令系统概述</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>指令:命令CPU完成的命令</li><li>指令系统:所有指令的集合</li></ul><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><pre class=" language-shell"><code class="language-shell">操作码 [目的操作码],[源操作码]</code></pre><h3 id="操作数的格式"><a href="#操作数的格式" class="headerlink" title="操作数的格式"></a>操作数的格式</h3><h4 id="立即操作数"><a href="#立即操作数" class="headerlink" title="立即操作数"></a>立即操作数</h4><ul><li><strong>其实就是值,不是地址</strong></li><li>不能作为目的操作码</li></ul><h4 id="寄存器操作数"><a href="#寄存器操作数" class="headerlink" title="寄存器操作数"></a>寄存器操作数</h4><ul><li><strong>指定寄存器存储的数据</strong></li><li>最快的</li></ul><h4 id="存储器操作数"><a href="#存储器操作数" class="headerlink" title="存储器操作数"></a>存储器操作数</h4><ul><li><strong>指定内存中的偏移值</strong></li><li>格式最特殊,使用<code>[]</code>符号包裹住偏移量</li><li>运行时间最长</li></ul><h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h2><p><strong>无论哪种寻址方式,得到的指令长短都取决于目标操作数</strong></p><h3 id="普通的立即寻址和寄存器寻址都比较简单就不赘述了"><a href="#普通的立即寻址和寄存器寻址都比较简单就不赘述了" class="headerlink" title="普通的立即寻址和寄存器寻址都比较简单就不赘述了"></a>普通的立即寻址和寄存器寻址都比较简单就不赘述了</h3><h3 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h3><ul><li>仅有通用4个寄存器可以用于存放数据的偏移地址<ul><li>BX : 数据段</li><li>BP : 仅仅这个默认在堆栈段</li><li>SI : 数据段</li><li>DI : 数据段</li></ul></li><li>一般格式</li></ul><pre class=" language-asm"><code class="language-asm">// 1200H是偏移地址,从段起始地址开始偏移1200HMOV BX,1200H MOV AX,[BX]</code></pre><h4 id="重设段"><a href="#重设段" class="headerlink" title="重设段"></a>重设段</h4><p>使用<code>段名:</code>的方式可以重新设置段号</p><h3 id="寄存器相对寻址"><a href="#寄存器相对寻址" class="headerlink" title="寄存器相对寻址"></a>寄存器相对寻址</h3><pre class=" language-assembly"><code class="language-assembly">MOV AL,[BX]5</code></pre><p>在BX的寻址上再加5</p><h3 id="基址变址寻址"><a href="#基址变址寻址" class="headerlink" title="基址变址寻址"></a>基址变址寻址</h3><ul><li>偏移地址为<ul><li>一个基址 + 一个变址</li></ul></li><li>段地址由选择的基址决定<ul><li>BX:数据</li><li>BP:堆栈</li></ul></li><li><strong>必须要一个基址 + 一个变址</strong></li></ul><pre class=" language-assembly"><code class="language-assembly">MOV SI，1100HMOV BX，SIMOV AX，[SI+BX] ;也可表示为 [BX][SI]</code></pre><h3 id="基址变址相对寻址"><a href="#基址变址相对寻址" class="headerlink" title="基址变址相对寻址"></a>基址变址相对寻址</h3><p>在原来的基础上加上相对,不赘述了.</p><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>从功能上可以分为六大类:</p><ul><li>数据传送</li><li>算术运算</li><li>逻辑运算和位移</li><li>串操作</li><li>程序控制</li><li>处理器控制</li></ul><h3 id="数据传送类指令"><a href="#数据传送类指令" class="headerlink" title="数据传送类指令"></a>数据传送类指令</h3><h4 id="通用数据传送指令"><a href="#通用数据传送指令" class="headerlink" title="通用数据传送指令"></a>通用数据传送指令</h4><h5 id="MOV"><a href="#MOV" class="headerlink" title="MOV"></a>MOV</h5><pre class=" language-assembly"><code class="language-assembly">MOV AL,BL</code></pre><p>注意点:</p><ul><li>两个操作数字长必须相同</li><li>不允许同时为存储器操作数</li><li>不允许同时为段寄存器</li><li>当源操作数是立即数,目标操作数不能是段寄存器</li><li>IP和CS还有FLAGS一般不作为目标操作数</li></ul><h4 id="堆栈操作指令"><a href="#堆栈操作指令" class="headerlink" title="堆栈操作指令"></a>堆栈操作指令</h4><ul><li>以字为单位</li><li>压栈</li></ul><pre class=" language-assembly"><code class="language-assembly">// OPRD:16位寄存器PUSH OPRD</code></pre><ul><li>出栈</li></ul><pre class=" language-assembly"><code class="language-assembly">POP OPRD</code></pre><h5 id="PUSH"><a href="#PUSH" class="headerlink" title="PUSH"></a>PUSH</h5><p>push指令执行过程</p><ol><li>SP–&gt;SP</li><li>高位字节 -&gt; SP-1</li><li>低位字节 -&gt; SP</li></ol><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hZmZjM2YzNjBhYzZhNjM0ODI3ZjM1ZDdjMGM2YzFlMC94bWxub3RlLzY5MUJBRjU4MzA4MzREQTRCQTc0NDlGNEI2MzI2RkU2LzI5ODA2?x-oss-process=image/format,png" alt="img"></p><p><strong>其实对堆栈本身在内存中是倒置的</strong></p><p>操作说明:</p><ul><li>操作数必须16位</li><li>操作数不能是立即数</li><li>不能从栈顶弹出一个字给CS</li></ul><h4 id="交换指令"><a href="#交换指令" class="headerlink" title="交换指令"></a>交换指令</h4><h5 id="XCHG"><a href="#XCHG" class="headerlink" title="XCHG"></a>XCHG</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">XCHG REG,MEM/REG</code></pre><p>注意:</p><ul><li>两个操作数必须有一个是寄存器操作数</li><li>不允许使用段寄存器</li><li>任何一个操作数不能为立即数</li><li>两个操作数长度必须相等</li></ul><p>例子:</p><pre class=" language-assembly"><code class="language-assembly">XCHG AX,BX  ;将BX和AX寄存器的值交换XCHG [2000],CL ;将内存中从2000位置与CL中的值交换</code></pre><h4 id="查表指令"><a href="#查表指令" class="headerlink" title="查表指令"></a>查表指令</h4><h5 id="XLAT"><a href="#XLAT" class="headerlink" title="XLAT"></a>XLAT</h5><ul><li>没有操作数</li><li>固定<code>BX</code>中存储表格首地址,<code>AL</code>存储表内位移量</li><li><code>BX+AL</code>得到对应的偏移地址</li><li>操作:将偏移地址的内容送到AL</li></ul><h4 id="字位扩展指令"><a href="#字位扩展指令" class="headerlink" title="字位扩展指令"></a>字位扩展指令</h4><h5 id="CBW"><a href="#CBW" class="headerlink" title="CBW"></a>CBW</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">CBW</code></pre><p>操作:</p><ul><li>将AL内容扩展到AX</li><li>规则<ul><li>如果最高位=1,则执行后<code>AH=FFH</code></li><li>如果最高位=0,则执行后<code>AH=00H</code></li></ul></li></ul><h5 id="CWD"><a href="#CWD" class="headerlink" title="CWD"></a>CWD</h5><pre class=" language-assembly"><code class="language-assembly">CWD</code></pre><p>操作:</p><ul><li>将AX内容拓展到DX</li></ul><p>注意:</p><ul><li>将<strong>符号数的符号</strong>位扩展到高位</li><li><strong>无符号数为在高位补充0</strong></li></ul><h4 id="地址传送指令"><a href="#地址传送指令" class="headerlink" title="地址传送指令"></a>地址传送指令</h4><h5 id="LEA"><a href="#LEA" class="headerlink" title="LEA"></a>LEA</h5><p>作用:</p><ul><li>将<code>变量</code>(属于存储器操作数)的十六位偏移地址写入到目标寄存器</li></ul><p>格式:</p><pre><code>LEA REG,MEM ;MEM必须是存储器操作数</code></pre><p>例子:</p><pre class=" language-assembly"><code class="language-assembly">MOV AL,i ;结果:AL中存入i处的内容LEA BX,i ;结果:BX = i</code></pre><h4 id="标志传输指令"><a href="#标志传输指令" class="headerlink" title="标志传输指令"></a>标志传输指令</h4><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hZmZjM2YzNjBhYzZhNjM0ODI3ZjM1ZDdjMGM2YzFlMC94bWxub3RlLzgyMDk3MzVFODQzNTQ1QUM5NjdDNjU4ODQxQjNGNUJCLzI5ODI2?x-oss-process=image/format,png" alt="img"></p><p>格式就是这样,这个不重要</p><h4 id="输入输出指令"><a href="#输入输出指令" class="headerlink" title="输入输出指令"></a>输入输出指令</h4><h5 id="对于IO设备接口的基础概念"><a href="#对于IO设备接口的基础概念" class="headerlink" title="对于IO设备接口的基础概念"></a>对于IO设备接口的基础概念</h5><p>IO设备的接口也有地址的概念.</p><h5 id="IN-amp-OUT"><a href="#IN-amp-OUT" class="headerlink" title="IN &amp; OUT"></a>IN &amp; OUT</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">IN acc,PORT ;读入,port:端口地址OUT PORT,acc ;输出</code></pre><p>两种寻址方式:</p><ul><li>直接寻址<ul><li>端口地址8位</li><li>寻址256个端口。</li></ul></li><li>间接寻址<ul><li>端口地址16位</li><li>端口地址必须有DX指定</li><li>可寻址64K个端口。</li></ul></li></ul><p>例子:</p><pre class=" language-assembly"><code class="language-assembly">IN AX,80H ;从80H位的读入16bit数据到AXMOV DX,2400H IN AL,DX ;将2400H端口读入8bit到ALOUT 35H,AX ;将AX的值写入到35H端口中OUT AX,35H ;格式错误</code></pre><h3 id="算术运算指令"><a href="#算术运算指令" class="headerlink" title="算术运算指令"></a>算术运算指令</h3><p><strong>算术运算指令的执行会对状态标志位产生影响</strong></p><h4 id="加法运算"><a href="#加法运算" class="headerlink" title="加法运算"></a>加法运算</h4><h5 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">ADD OPRD1,OPRD2 ;OPRD1的值会变为:OPRD1+OPRD2</code></pre><p>实例:</p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hZmZjM2YzNjBhYzZhNjM0ODI3ZjM1ZDdjMGM2YzFlMC94bWxub3RlLzhDMzJDMUFDNzdFNjQwQURCQ0ExQUNEQzNDODdDNDhFLzI5ODUy?x-oss-process=image/format,png" alt="img"></p><h5 id="ADC"><a href="#ADC" class="headerlink" title="ADC"></a>ADC</h5><p>操作方式对于<code>ADD</code>完全一样</p><p>ADC用于多字节数相加,<strong>使用前要件将CF清零</strong></p><h5 id="INC"><a href="#INC" class="headerlink" title="INC"></a>INC</h5><p>作用:</p><ul><li>修改地址指针</li><li>一次的内容为1个字节,8个bit</li></ul><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">INC OPRD ;不能是段寄存器,不能是立即数</code></pre><h5 id="加法用例"><a href="#加法用例" class="headerlink" title="加法用例"></a>加法用例</h5><ul><li>目的:求内存数据段中M1为首和M2为首的两个20字节数之和,并将结果写入M2为首的区域中。</li></ul><pre class=" language-assembly"><code class="language-assembly">LEA SI,M1 ;将M1的地址给SILEA DI,M2 ;将M2的地址给DIMOV CX,20  ;计数器CLC ;是CF = 0NEXT:MOV AL,[SI]      ADC [DI],AL  ;计算     INC SI ;下一个指针      INC DI      DEC CX      JNZ NEXT ;循环     HLT </code></pre><h4 id="减法运算"><a href="#减法运算" class="headerlink" title="减法运算"></a>减法运算</h4><h5 id="SUB"><a href="#SUB" class="headerlink" title="SUB"></a>SUB</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">SUB OPRD1,OPRD2 </code></pre><p>操作:</p><pre><code>OPRD1-OPRD2 -&gt; OPRD1 </code></pre><h5 id="SBB"><a href="#SBB" class="headerlink" title="SBB"></a>SBB</h5><p>操作与SUB一致</p><pre class=" language-assembly"><code class="language-assembly">SBB OPRD1,OPRD2 </code></pre><p>作用:</p><pre><code>OPRD1-OPRD2-CF -&gt; OPRD1 </code></pre><h5 id="DEC"><a href="#DEC" class="headerlink" title="DEC"></a>DEC</h5><p>操作数-1</p><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">DEC OPRD </code></pre><p>操作:</p><pre class=" language-assembly"><code class="language-assembly">OPRD -1 -> OPRD</code></pre><h5 id="NEG"><a href="#NEG" class="headerlink" title="NEG"></a>NEG</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">NEG OPRD </code></pre><p>操作:</p><pre class=" language-assembly"><code class="language-assembly">0-OPRD -> OPRD</code></pre><p>对一个负数取补码相当于用0减去此数</p><p>说明:</p><p>对一个负数取补码就相当于用零减去此数</p><h5 id="CMP"><a href="#CMP" class="headerlink" title="CMP"></a>CMP</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">CMP OPRD1,OPRD2</code></pre><p>操作:</p><pre><code>OPRD1-OPRD2</code></pre><p>作用:</p><pre class=" language-assembly"><code class="language-assembly">CAP AX,BX;OF和SF状态相同,AX >= BX;OF和SF状态不同,AX < BX;AX >= BX ,CF = 0;AX = BX , ZF = 0;AX < BX ,CF = 1</code></pre><h4 id="乘法运算"><a href="#乘法运算" class="headerlink" title="乘法运算"></a>乘法运算</h4><h5 id="无符号-MUL"><a href="#无符号-MUL" class="headerlink" title="无符号(MUL)"></a>无符号(MUL)</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">MUL OPRD ; OPRD 不能是立即数</code></pre><ul><li>乘法采用的是隐含寻址,被乘数<strong>隐含存放在累加器AL或者AX中</strong></li><li>乘法的结果会翻倍:字节 * 字节 = 16位</li><li>OPRD是字节数<ul><li>结果存放在<code>AX</code></li></ul></li><li>OPRD是16位数<ul><li>结果存放在<code>DXAX</code></li></ul></li></ul><p>实例:</p><pre class=" language-assembly"><code class="language-assembly">MUL BYTE PTR[BX]</code></pre><ul><li>BYTE PTR 用于指定为字节操作数</li><li>WORD PTR 用于指定为16位操作数</li></ul><h5 id="有符号-IMUL"><a href="#有符号-IMUL" class="headerlink" title="有符号(IMUL)"></a>有符号(IMUL)</h5><p>格式:</p><pre><code>IMUL OPRD</code></pre><p>原理:</p><ul><li>将操作数取补码(对负数按位取反+1)</li><li>乘法运算</li><li>将乘积按位取反+1</li></ul><h4 id="除法运算"><a href="#除法运算" class="headerlink" title="除法运算"></a>除法运算</h4><h5 id="无符号-DIV"><a href="#无符号-DIV" class="headerlink" title="无符号(DIV)"></a>无符号(DIV)</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">DIV OPRD</code></pre><h5 id="有符号-IDIV"><a href="#有符号-IDIV" class="headerlink" title="有符号(IDIV)"></a>有符号(IDIV)</h5><pre class=" language-assembly"><code class="language-assembly">IDIV OPRD</code></pre><p>如果OPRD是字节数:</p><ul><li>执行:AX/OPRD</li><li>AL = 商 , AH = 余数</li></ul><p>如果OPRD是双字节数:</p><ul><li>执行:DXAX/OPRD</li><li>AX = 商 , DX = 余数</li></ul><h4 id="位移指令"><a href="#位移指令" class="headerlink" title="位移指令"></a>位移指令</h4><h3 id="逻辑指令"><a href="#逻辑指令" class="headerlink" title="逻辑指令"></a>逻辑指令</h3><h5 id="对标志位的影响"><a href="#对标志位的影响" class="headerlink" title="对标志位的影响"></a>对标志位的影响</h5><ul><li>除了<code>非</code>指令,其他指令都会影响AF(辅助)外的五个标志</li><li>无论结果如何,都会让标志位OF = CF = 0 (无进位,无溢出)</li><li><code>非</code>不影响标志位</li></ul><h5 id="AND-与"><a href="#AND-与" class="headerlink" title="AND(与)"></a>AND(与)</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">AND OPRD1,OPRD2</code></pre><p>操作:</p><ul><li>两个操作数相<code>与</code>,结果送往目标地址</li></ul><p>应用:</p><ul><li>实现按位相与运算</li></ul><pre class=" language-assembly"><code class="language-assembly">AND BL,[SI]</code></pre><ul><li>让目标操作数的某些位不变,某些位为0</li></ul><pre class=" language-assembly"><code class="language-assembly">AND AL,OFH ;将高八位都置位0</code></pre><ul><li>将CF和OF清零</li></ul><pre class=" language-assembly"><code class="language-assembly">AND AX,AX</code></pre><p>实例:</p><blockquote><p>从地址3F8H端口中读入一个字节数,如果该数bit1位为1,则可以从38FH端口将DATA为首地址的一个字输出,否则就不能进行数据传送.</p></blockquote><pre class=" language-assembly"><code class="language-assembly">      MOV DX,3F8H  ;将地址存起来WATT: IN AL,DX  ;从端口读取      AND AL,02H  ;进行与运算      JZ WATT  ;ZF = 1转移,重复之前      MOV DX,38FH  ;输出端口      MOV AX,DATA  ;输出数据      OUT DX,AX  ;进行输出</code></pre><h5 id="OR-或"><a href="#OR-或" class="headerlink" title="OR(或)"></a>OR(或)</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">OR OPRD1,OPRD2</code></pre><p>操作:</p><ul><li>两个操作数相<code>或</code>,结果送往目标地址</li></ul><p>应用:</p><ul><li>和与基本一致,就是可以将某些位不变,某些位置”1”</li></ul><p>实例:</p><blockquote><p>将一个二进制数9变为字符’9’</p></blockquote><pre class=" language-assembly"><code class="language-assembly">MOV AL,9OR AL,30H</code></pre><h5 id="NOT-非"><a href="#NOT-非" class="headerlink" title="NOT(非)"></a>NOT(非)</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">OR OPRD1,OPRD2</code></pre><p>操作:</p><ul><li>操作数按位取反返回原地址</li></ul><h5 id="XOR-异或"><a href="#XOR-异或" class="headerlink" title="XOR(异或)"></a>XOR(异或)</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">XOR OPRD1,OPRD2</code></pre><p>操作:</p><ul><li>两操作数<code>异或</code>,结果送目标地址</li><li><strong>如果a、b两个值不相同，则异或结果为1。如果a、b两个值相同，异或结果为0。</strong></li></ul><h5 id="TEST-测试"><a href="#TEST-测试" class="headerlink" title="TEST(测试)"></a>TEST(测试)</h5><h5 id=""><a href="#" class="headerlink" title=""></a></h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">TEST OPRD1,OPRD2</code></pre><p>操作:</p><ul><li>执行<code>与</code>运算,但是结果不送回目标地址</li></ul><p>应用:</p><ul><li>长用于测试某些位的状态</li></ul><h3 id="串操作指令"><a href="#串操作指令" class="headerlink" title="串操作指令"></a>串操作指令</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p><strong>本质上是多个单操作数</strong></p><p>在串操作指令执行之前需要确定:</p><ul><li>串所在的区域</li><li>串的首地址</li><li>串的长度</li><li>串的控制方向</li></ul><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><ul><li>串所在区域以及首地址<ul><li>源串一般存放在数据段,偏移地址由SI指定.允许段重设</li><li>目标串必须在附加段,偏移地址由DI指定</li></ul></li><li>串长度<ul><li>有CX指定</li></ul></li><li>串操作方向<ul><li>有DF标志位指定.<ul><li>0 -&gt;增地址方向</li><li>1 -&gt;减地址方向</li></ul></li></ul></li></ul><h4 id="重复前缀"><a href="#重复前缀" class="headerlink" title="重复前缀"></a>重复前缀</h4><ul><li><p>无条件重复:</p><pre><code>REP</code></pre><ul><li>直到CX等于0才停止</li></ul></li><li><p>条件重复</p><ul><li>相等结束(寻找关键字)<ul><li><code>REPNZ</code></li></ul></li><li>不相等结束(比较字符串)<ul><li><code>REPZ</code></li></ul></li></ul></li></ul><h4 id="串操作指令的流程"><a href="#串操作指令的流程" class="headerlink" title="串操作指令的流程"></a>串操作指令的流程</h4><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hZmZjM2YzNjBhYzZhNjM0ODI3ZjM1ZDdjMGM2YzFlMC94bWxub3RlLzRCQTg3NDQxRjJFODRGMThCRjA4N0RDQUUzRTRBREY5LzI5OTI3?x-oss-process=image/format,png" alt="img"></p><p>简述:</p><ol><li>取数值</li><li>操作一个单位</li><li>修改地址值</li><li>修改串长</li><li>判断</li></ol><p>最终结果:</p><p> 串指令结束之后,地址<strong>实际上会指向判定点的后一位!</strong></p><h4 id="串传送指令"><a href="#串传送指令" class="headerlink" title="串传送指令"></a>串传送指令</h4><h5 id="MOVS"><a href="#MOVS" class="headerlink" title="MOVS"></a>MOVS</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">MOVS OPRD1,OPRD2 ;此格式仅用于源操作数虚段重设的情况下MOVSB ;按字节传输MOVSW ;按字传送</code></pre><ul><li>通常与无条件重复前缀连用</li></ul><p>实例:</p><p>题目:<strong>使用MOVS指令将两百个字节数据从<code>MEM1</code>为首的地址区域传送到<code>MEM2</code>为首地址的区域内</strong></p><pre class=" language-assembly"><code class="language-assembly">LEA SI,MEM1LEA DI,MEM2MOV CX,200CLDREP MOVSB ;这句话就可以完成功能HLT</code></pre><h4 id="串比较指令"><a href="#串比较指令" class="headerlink" title="串比较指令"></a>串比较指令</h4><h5 id="CMPS"><a href="#CMPS" class="headerlink" title="CMPS"></a>CMPS</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">CMPS OPRD1,OPRD2CMPSB CMPSW</code></pre><p>功能:</p><ul><li>实现两个数据串的比较</li></ul><p>实例:</p><blockquote><p>测试上传的200个字节是否正确</p></blockquote><pre class=" language-assembly"><code class="language-assembly">LEA SI,MEM1LEA DI,MEM2MOV CX,200CLDREPE CMPSB ;当CX=0或者ZF=0(就是不相等)JZ STOP ;两个串相等就stopDEC SI  ;指向不相等数据的地址MOV AL,[SI] ;获取对应的值MOV BX,SI ;获取地址STOP :HLT</code></pre><h4 id="串扫描指令"><a href="#串扫描指令" class="headerlink" title="串扫描指令"></a>串扫描指令</h4><h5 id="SCAS"><a href="#SCAS" class="headerlink" title="SCAS"></a>SCAS</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">SCAS OPRD ;目标操作数SCASB ;源操作数AL SCASW ;源操作数AX</code></pre><p>作用:</p><p>用于指定存储区域中寻找某个关键字</p><p>实例:</p><blockquote><p>在ES段中从2000H单元开始存放了10个字符,寻找其中有无字符’A’.如果有则记录下搜索次数,将搜索次数写到DATA1单元,并将存放’A’的地址写入DATA2单元.</p></blockquote><pre class=" language-assembly"><code class="language-assembly">MOV DI,2000HMOV BX,DIMOV CX,0AHMOV AL,'A'REPNZ SCANSB  ;遇到不相等的就循环</code></pre><h4 id="串装入和存储指令"><a href="#串装入和存储指令" class="headerlink" title="串装入和存储指令"></a>串装入和存储指令</h4><h5 id="LODS"><a href="#LODS" class="headerlink" title="LODS"></a>LODS</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">LODS OPRDLODSBLODSW</code></pre><p>作用:</p><ul><li>对字节:AL &lt;- [DS:SI]</li><li>对字 : AX &lt;- [DS:SI]</li><li>用于将数据传依次装入累加器,以便显示和输出到接口</li><li>一般不加前缀</li></ul><h5 id="STOS"><a href="#STOS" class="headerlink" title="STOS"></a>STOS</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">STOS OPRDSTOSBSTOSW</code></pre><p>操作:</p><ul><li>字节:AL -&gt; [ES:DI]</li><li>字:AX -&gt; [ES:DI]</li><li>常常用于将内存某个区域置为同样的值</li></ul><p>实例:</p><blockquote><p>将6000H:1200H单元开始的l00个字存储单元内容清零。</p></blockquote><pre class=" language-assembly"><code class="language-assembly">MOV AX，6000HMOV ES，AXM0V DI，1200HM0V CX，100CLDM0V AX，0REP STOSWHLT</code></pre><h5 id="串操作注意事项"><a href="#串操作注意事项" class="headerlink" title="串操作注意事项"></a>串操作注意事项</h5><ul><li>需要定义附加段<ul><li>目标操作数必须在附加段</li></ul></li><li>需要设置数据的操作方向<ul><li>确定DF的状态</li></ul></li><li>源串和目标串指针分别为SI和DI</li><li>串长度值必须由CX给出<ul><li>注意重复前缀的使用方法<ul><li>传送类指令前加无条件重复前缀</li><li>串比较类指令前加条件重复前缀，但前缀不影响ZF状态</li></ul></li></ul></li></ul><h3 id="程序控制指令"><a href="#程序控制指令" class="headerlink" title="程序控制指令"></a>程序控制指令</h3><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><ul><li>修改PC(程序计数器)和CS(代码段),从而达到目的</li></ul><h4 id="转移指令"><a href="#转移指令" class="headerlink" title="转移指令"></a>转移指令</h4><h5 id="无条件转移-JMP"><a href="#无条件转移-JMP" class="headerlink" title="无条件转移(JMP)"></a>无条件转移(JMP)</h5><p>有两种:</p><ul><li>不同字长需要指定</li><li>段间转移<ul><li>32位操作数</li><li>只能间接寻址</li></ul></li><li>段内转移<ul><li>16位操作数</li><li>可以直接也可以间接</li></ul></li></ul><p>段内实例:</p><pre class=" language-assembly"><code class="language-assembly">MOV BX,1200JMP WORD PTR[BX]</code></pre><p>段间实例:</p><pre class=" language-assembly"><code class="language-assembly">MOV SI,1122H  ;SI得到地址MOV WORD PRT[SI],0120H  ;从SI内地址的内存段开始存入一个16位0120HADD SI,2  ;SI内地址向前16位MOV WORD PTR[SI],0122H  ;从SI内地址的内存段开始存入一个16位0122HJMP DWORD PTR[SI-2]  ;跳转到0120H:0122H的地方</code></pre><h5 id="有条件转移"><a href="#有条件转移" class="headerlink" title="有条件转移"></a>有条件转移</h5><ul><li>条件转移均为段内短地址转移<ul><li>范围为:-128 — +127</li></ul></li></ul><table><thead><tr><th>指令名称</th><th>汇编格式</th><th>转移条件</th><th>备注</th></tr></thead><tbody><tr><td>CX内容为0转移</td><td>JCXZ</td><td>target</td><td>CX=0</td></tr><tr><td>大于/不小于等于转移</td><td>JG/JNLE</td><td>target</td><td>SF=OF且ZF=0</td></tr><tr><td>大于等于/不小于转移</td><td>JGE/JNL</td><td>target</td><td>SF=OF</td></tr><tr><td>小于/不大于等于转移</td><td>JL/JNGE</td><td>target</td><td>SF≠OF且ZF=0</td></tr><tr><td>小于等于/不大于转移</td><td>JLE/JNG</td><td>target</td><td>SF≠OF</td></tr><tr><td>溢出转移</td><td>JO</td><td>target</td><td>0F=1</td></tr><tr><td>不溢出转移</td><td>JNO</td><td>target</td><td>0F=0</td></tr><tr><td>结果为负转移</td><td>JS</td><td>target</td><td>SF=1</td></tr><tr><td>结果为正转移</td><td>JNS</td><td>target</td><td>SF=0</td></tr><tr><td>高于/不低于等于转移</td><td>JA/JNBE</td><td>target</td><td>CF=0且ZF=0</td></tr><tr><td>高于等于/不低于转移</td><td>JAE/JNB</td><td>target</td><td>CF=0</td></tr><tr><td>低于/不高于等于转移</td><td>JB/JNAE</td><td>target</td><td>CF=1</td></tr><tr><td>低于等于/不高于转移</td><td>JBE/JNA</td><td>target</td><td>CF=1或ZF=1</td></tr><tr><td>进位转移</td><td>JC</td><td>target</td><td>CF=1</td></tr><tr><td>无进位转移</td><td>JNC</td><td>target</td><td>CF=0</td></tr><tr><td>等于或为零转移</td><td>JE/JZ</td><td>target</td><td>ZF=1</td></tr><tr><td>不等于或非零转移</td><td>JNE/JNZ</td><td>target</td><td>ZF=0</td></tr><tr><td>奇偶校验为偶转移</td><td>JP/JPE</td><td>target</td><td>PF=1</td></tr><tr><td>奇偶校验为奇转移</td><td>JNP/JPO</td><td>target</td><td>PF=0</td></tr></tbody></table><p>实例:</p><blockquote><p>统计内存数据段中意TABLE为首地址的100个8位带符号数中正数,负数和零元数的个数</p></blockquote><p>基本思路:</p><ul><li>先将存放统计值的单元(或寄存器)清零</li><li>读取一个数,通过标志位的状态判断数的性质<ul><li>最高位是1,则是负数</li><li>最高位是0,则是正数或0</li><li>再判断是否为0</li></ul></li></ul><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hZmZjM2YzNjBhYzZhNjM0ODI3ZjM1ZDdjMGM2YzFlMC94bWxub3RlLzkyQzNDREI2ODU0MzQzMTBCNkZFOEUxQUYyRUU5MEU4LzMwMTc3?x-oss-process=image/format,png" alt="img"></p><p>代码:</p><pre class=" language-assembly"><code class="language-assembly">START: XOR AL,AL ;将AL本身清零       MOV PLUS,AL ;清零       MOV MINUS,AL ;清零       MOV ZERO,AL ;清零       LEA SI,TABLE ;记录地址       MOV CL,100 ;记录长度       CLDCHECK: LODSB ;将SI处数据读入AL       OR AL,AL ;将自己的数值特征输入符号标志位中       JS X1 ;如果SI为1,说明是负数       JZ X2 ;说明是0       INC PLUS ;说明是正数,正数计数+1       JMP NEXT ;跳转到下一个X1:    INC MINUS       JMP NEXTX2:    INC ZERONEXT:  DEC CL ;计数器-1       JNZ CHECK ;非零跳转       HLT</code></pre><h4 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h4><ul><li>循环范围<ul><li>以当前IP为中心的-128-+127之间内循环</li></ul></li><li>循环次数有CX指定</li><li>循环指令<ul><li><code>LOOP</code> -&gt; 无条件循环</li><li><code>LOOPZ</code> -&gt; 条件循环</li><li><code>LOOPNZ</code> -&gt; 条件循环</li></ul></li></ul><h5 id="无条件"><a href="#无条件" class="headerlink" title="无条件"></a>无条件</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">LOOP LABEL</code></pre><p>循环条件:</p><ul><li>CX != 0</li></ul><p>指令作用:</p><ul><li>跳转并将CX-1</li></ul><h5 id="条件循环"><a href="#条件循环" class="headerlink" title="条件循环"></a>条件循环</h5><p>和无条件基本一致,多了判断ZF的值</p><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><blockquote><p>在以DATA为首地址的内存数据段中,存放有200个16位的有符号数,试找出其中最大和最小的符号数,并分别放在MAX和MIN为首的内存单元内</p></blockquote><pre class=" language-assembly"><code class="language-assembly">START: LEA SI,DATA ;得到数据地址       MOV CX,200 ;标记长度       CLD ;指定串扫描的方向       LODSW ;读取数据地址的数据       MOV MAX,AX ;将AX设置为MAX       MOV MIN,AX ;将AX设置为MIN       DEC CX ;减长度NEXT:  LODSW ;串读取数据       CMP AX,MAX ;比较       JG LARGE ;大于跳转       CMP AX,MIN ;比较       JL SMALL ;小于跳转       JMP GOON ;直接跳转LARGE: MOV MAX,AX ;有更大的处理       JMP GOON SMALL: MOV MIN,AX ;有更小的处理GOON:  LOOP NEXT ;跳转下次循环       HLT</code></pre><h4 id="过程调用"><a href="#过程调用" class="headerlink" title="过程调用"></a>过程调用</h4><p>作用:</p><ul><li>用于调用一个子程序</li></ul><p>与<strong>转移指令</strong>的比较:</p><ul><li>子过程调用执行结束后,要返回原调用处<ul><li>必须保护返回地址</li></ul></li></ul><p>调用指令的执行过程:</p><ol><li>保护断点<ul><li>将调用指令的下一条指令的地址压入堆栈</li></ul></li><li>获取子过程的入口地址</li><li>执行子过程</li><li>恢复断点,返回原程序</li></ol><h5 id="段内调用"><a href="#段内调用" class="headerlink" title="段内调用"></a>段内调用</h5><p>被调用程序与调用程序在同一代码段</p><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">CALL NEAR PROCC ; NEAR可以省略</code></pre><p>实例:</p><pre class=" language-assembly"><code class="language-assembly">CALL TIMER ;直接调用CALL WORD RPT[SI] ;间接调用</code></pre><h5 id="段间调用"><a href="#段间调用" class="headerlink" title="段间调用"></a>段间调用</h5><p>子过程与原调用程序不在同一个代码段</p><p>实例:</p><pre class=" language-assembly"><code class="language-assembly">CALL FAR TIMRE ; 直接调用,FAR不能省略CALL DWORD PTR[SI] ; 间接调用,需要指定类型</code></pre><h5 id="返回指令"><a href="#返回指令" class="headerlink" title="返回指令"></a>返回指令</h5><p>功能:</p><ul><li>从堆栈中着弹出断点地址,返回原程序</li></ul><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">RET</code></pre><p><strong>子程序最后一条指令必须是RET</strong></p><h4 id="中断指令"><a href="#中断指令" class="headerlink" title="中断指令"></a>中断指令</h4><h5 id="复习中断的概念"><a href="#复习中断的概念" class="headerlink" title="复习中断的概念"></a>复习中断的概念</h5><p>中断的概念</p><ul><li>由于某种异常或者随机事件是处理器暂时停止正在运行的程序转去执行一段特殊处理程序,处理好后返回原程序.</li></ul><p>中断指令:</p><ul><li>引起CPU产生一次中断的指令</li></ul><h5 id="中断与过程调用"><a href="#中断与过程调用" class="headerlink" title="中断与过程调用"></a>中断与过程调用</h5><ul><li>相似点<ul><li>都是从一个过程转到另一个过程并且返回</li></ul></li><li>区别<ul><li>中断是随机或者异常事件,调用是事先写好的程序</li><li>调用直接给出子程序入口地址,中断只给出中断响亮码</li><li>调用可以是近过程也可以是远过程,但是中断均为远过程</li><li>响应中断请求不仅要保护断点地址,还要保护FLAGS内容(用于分析出错原因)</li></ul></li></ul><h5 id="中断指令-1"><a href="#中断指令-1" class="headerlink" title="中断指令"></a>中断指令</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">INT n ; n为中断类型码:0-255</code></pre><p>说明:</p><ul><li>偏移地址: n * 4</li><li>段地址:DS_数据段</li></ul><p>执行过程:</p><ol><li>将<code>FLAGS</code>压入堆栈</li><li>将INT指令的下一条指令的CS,IP入栈</li><li>有<code>4*n</code>得到存放中断向量的地址</li><li>将中断向量送CS和IP寄存器</li><li>转入中断程序</li></ol><h5 id="中断返回指令"><a href="#中断返回指令" class="headerlink" title="中断返回指令"></a>中断返回指令</h5><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">IRET ; 负责恢复断点和恢复标志寄存器的内容</code></pre><h3 id="处理器控制指令"><a href="#处理器控制指令" class="headerlink" title="处理器控制指令"></a>处理器控制指令</h3><p>这类指令用来对CPU进行控制,入修改标志寄存器,让CPU暂停等</p><h4 id="标志位操作指令"><a href="#标志位操作指令" class="headerlink" title="标志位操作指令"></a>标志位操作指令</h4><table><thead><tr><th>格式</th><th>作用</th></tr></thead><tbody><tr><td>CLC (CL置为0)</td><td>进位标志位</td></tr><tr><td>STC(ST置为1)</td><td></td></tr><tr><td>CMC(CM取反)</td><td></td></tr><tr><td>CLD</td><td>方向标志位</td></tr><tr><td>STD</td><td></td></tr><tr><td>CLI</td><td>中断标志位(这个为关中断)</td></tr><tr><td>STI</td><td></td></tr></tbody></table><h1 id="汇编程序设计"><a href="#汇编程序设计" class="headerlink" title="汇编程序设计"></a>汇编程序设计</h1><h2 id="汇编源程序"><a href="#汇编源程序" class="headerlink" title="汇编源程序"></a>汇编源程序</h2><ul><li>汇编源程序 : 使用助记符编写的程序</li><li>汇编程序 : 对汇编源程序进行编译</li></ul><p>编译过程: <img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hZmZjM2YzNjBhYzZhNjM0ODI3ZjM1ZDdjMGM2YzFlMC94bWxub3RlLzEyNDNBREVGREQ5NjQ2RTdCNDg1RTkyRkYxRjI0MjVDLzMwMzk4?x-oss-process=image/format,png" alt="img"></p><h3 id="汇编语言类型和格式"><a href="#汇编语言类型和格式" class="headerlink" title="汇编语言类型和格式"></a>汇编语言类型和格式</h3><p>汇编语句可以分为两类:</p><ul><li>指令性语句:CPU能够执行</li></ul><pre class=" language-assembly"><code class="language-assembly">[标号：] [前缀] 助记符 [操作数]，[操作数] [ ；注释]</code></pre><ul><li>指示性语句:CPU不执行,有汇编程序执行</li></ul><pre><code>[名字] 伪指令助记符 操作数 [，操作数，…] [ ；注释]</code></pre><h3 id="操作数"><a href="#操作数" class="headerlink" title="操作数"></a>操作数</h3><ul><li>寄存器</li><li>存储器单元</li><li><strong>常量</strong></li><li><strong>变量或标号</strong></li><li><strong>表达式</strong></li></ul><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><ul><li>数字常量</li><li>字符串常量<ul><li>用单引号包起来的字符或者字符串</li></ul></li></ul><p>例子:</p><pre class=" language-assembly"><code class="language-assembly">MOV AL,'A' ; MOV [DI],'ABCD' ; 存储相对应的ASCII码</code></pre><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul><li>其实就代表内存中的地址</li><li>属性<ul><li>段</li><li>偏移量</li><li>类型<ul><li>字节 byte</li><li>字型 word</li><li>双字型 dword</li></ul></li></ul></li></ul><h4 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h4><h5 id="取值运算"><a href="#取值运算" class="headerlink" title="取值运算"></a>取值运算</h5><p>作用:</p><ul><li>获取变量的属性值</li></ul><p>伪指令:</p><ul><li>OFFSET<ul><li>取偏移地址</li></ul></li><li>SEG<ul><li>取段地址</li></ul></li></ul><p>例子:</p><pre class=" language-assembly"><code class="language-assembly">MOV AX,SEG DATA ;取到DATA的段地址给AXMOV DS,AX ;将地址信息给数据段寄存器MOV BX,OFFSET DATA ;将DATA的偏移地址存入到BX;上面一句与 LEA BX,DATA 等价</code></pre><h5 id="属性运算"><a href="#属性运算" class="headerlink" title="属性运算"></a>属性运算</h5><p>作用:</p><ul><li>指定存储器操作数的类型</li></ul><p>运算符:</p><ul><li><code>PTR</code></li></ul><p>例子:</p><pre class=" language-assembly"><code class="language-assembly">MOV BYTE PTR[BX],12H ;指定为字节型</code></pre><h2 id="汇编伪指令"><a href="#汇编伪指令" class="headerlink" title="汇编伪指令"></a>汇编伪指令</h2><h3 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h3><ul><li>DB（Define Byte）:<ul><li>定义的变量为字节型</li></ul></li><li>DW （Define Word） :<ul><li>定义的变量为字类型</li></ul></li><li>DD （Define Double Word） :<ul><li>定义的变量为双字型</li></ul></li><li>DQ （Define Quadword） :<ul><li>定义的变量为4字型</li></ul></li><li>DT （Define Tenbytes） :<ul><li>定义的变量为10字节型</li></ul></li></ul><p>实例:</p><pre class=" language-assembly"><code class="language-assembly">DATA1 DB 11H,22H,33H,44H ;但是每个只能占用为一个Byte</code></pre><p>内存中数据分布:</p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hZmZjM2YzNjBhYzZhNjM0ODI3ZjM1ZDdjMGM2YzFlMC94bWxub3RlL0M4Q0QzQkQ4MDVEMjRFM0RCOTQzODc0MkUxQUFGQjE3LzMwNzI5?x-oss-process=image/format,png" alt="img"></p><p>说明:</p><ul><li>定义字符串必须使用DB伪指令</li></ul><pre class=" language-assembly"><code class="language-assembly">DATA1 DB 'ABCD',66H</code></pre><p>内存中数据分布:</p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hZmZjM2YzNjBhYzZhNjM0ODI3ZjM1ZDdjMGM2YzFlMC94bWxub3RlLzU0RkI5RjZFQjlENTRDQkFCMUJDQTMzQzY1NDBDRjg4LzMwNzQ3?x-oss-process=image/format,png" alt="img"></p><h4 id="重复操作符"><a href="#重复操作符" class="headerlink" title="重复操作符"></a>重复操作符</h4><p>用于多次重复数据定义</p><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">[变量名] 伪指令助记符 n DUP（初值 [,初值,… ] ）;n为重复次数</code></pre><p>例子:</p><pre class=" language-assembly"><code class="language-assembly">M1 DB 10 DUP (0) ;括号中有多个数据的话,多个数据都会重复定义n次</code></pre><h4 id="的作用"><a href="#的作用" class="headerlink" title="? 的作用"></a><code>?</code> 的作用</h4><p>用于表示随机值,用于预留存储空间</p><p>例子:</p><pre class=" language-assembly"><code class="language-assembly">MEM1 DB 34H,'A',?DW 20 DUP (?) ;预留40个字节单元，每单元为随机值</code></pre><h4 id="调整偏移量指令"><a href="#调整偏移量指令" class="headerlink" title="调整偏移量指令"></a>调整偏移量指令</h4><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">ORG 表达式 ;计算值为非负常数</code></pre><p>例子:</p><pre class=" language-assembly"><code class="language-assembly">DATA SEGMENT    ORG 1200H    BUFF DB 1,2DATA ENDS</code></pre><h3 id="符号伪指令"><a href="#符号伪指令" class="headerlink" title="符号伪指令"></a>符号伪指令</h3><p>作用:</p><ul><li>将表达式的值赋给一个名字。当源程序中需多次引用某一表达式时，可以利用EQU伪指令，用一个符号代替表达式，以便于程序维护。</li></ul><p>说明:</p><ul><li>EQU说明的表达式不占用内存空间</li></ul><p>例子:</p><pre class=" language-assembly"><code class="language-assembly">CONSTANT EQU 100 ; 以后使用CANSTANT就是100</code></pre><h3 id="段伪指令"><a href="#段伪指令" class="headerlink" title="段伪指令"></a>段伪指令</h3><h4 id="段定义"><a href="#段定义" class="headerlink" title="段定义"></a>段定义</h4><p>格式:</p><pre><code>段名 SEGMENT [定位类型] [组合类型] [’类别’]  ...段名 ENDS</code></pre><p>实例:</p><pre class=" language-assembly"><code class="language-assembly">DATA SEGMENT  ;这里一个典型的数据定义段    MEM1 DB 11H，22H    MEM2 DB ‘Hello！’    MEM3 DW 2 DUP（？）DATA ENDS</code></pre><h4 id="段指定"><a href="#段指定" class="headerlink" title="段指定"></a>段指定</h4><p>说明所定义逻辑段的性质</p><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">ASSUME 段寄存器名:段名[，段寄存器名:段名，…]</code></pre><p>实例:</p><pre class=" language-assembly"><code class="language-assembly">ASSUME DS:DATA ; 说明DATA在数据段</code></pre><h4 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h4><p>表示源程序结束</p><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">END [标号]</code></pre><h3 id="其他伪指令"><a href="#其他伪指令" class="headerlink" title="其他伪指令"></a>其他伪指令</h3><h4 id="过程定义"><a href="#过程定义" class="headerlink" title="过程定义"></a>过程定义</h4><p>作用:</p><p>用于定义一个过程体</p><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">PROCNAME PROC ...PROCNAME ENDP</code></pre><p>等待程序实例:</p><pre class=" language-assembly"><code class="language-assembly">DELAY PROC    PUSH BX ;保护需要使用的寄存器信息    PUSH CX    MOV BL，2 ;BL存储循环执行次数NEXT：MOV CX，4167 ;为无条件循环赋值W10M： LOOP W10M    DEC BL;BL-1    JNZ NEXT ;非零跳转    POP CX ;将数据取出来    POP BX    RET DELAY ENDPCALL DELAY ; 调用</code></pre><h4 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h4><p>作用:</p><ul><li>源程序中由汇编程序识别的具有独立功能的一段程序代码</li><li>当 源程序中需要多次使用同一个程序段时，可以将该程序段定义为一个宏</li></ul><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">宏命令名 MACRO <形式参数> ;形参:通过参数传递调用宏...ENDM;定义DADD MACRO X，Y，Z    MOV AX，X    ADD AX，Y    MOV Z，AX    ENDM;调用DADD DATA1，DATA2，SUM;汇编后源程序中的宏展开MOV AX，DATA1ADD AX，DATA2MOV SUM，AX</code></pre><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><h3 id="系统调用分类"><a href="#系统调用分类" class="headerlink" title="系统调用分类"></a>系统调用分类</h3><ul><li>BIOS<ul><li>驻留在ROM中的基本输入/输出系统</li></ul></li><li>DOS<ul><li>磁盘操作系统</li></ul></li></ul><p>DOS功能/BIOS功能调用是调用系统内核子程序</p><p>DOS功能与BIOS功能均通过<strong>中断方式调用</strong></p><h3 id="DOS软中断"><a href="#DOS软中断" class="headerlink" title="DOS软中断"></a>DOS软中断</h3><p>DOS中断包括：设备管理，目录管理，文件管理，其它</p><p>DOS软中断： 类型码为 21H</p><p>关于DOS软中断说明：</p><ul><li>包含多个子功能的功能包；</li><li>各子功能用功能号区分；</li><li>用软中断指令调用，中断类型码固定为21H。</li></ul><p>调用基本步骤:</p><ol><li>将调用参数装入指定的寄存器；</li><li>将功能号装入AH；  按中断类型号调用DOS中断；</li><li>检查返回参数是否正确。</li><li>调用格式：</li></ol><pre class=" language-assembly"><code class="language-assembly">MOV AH，功能号<置相应参数>INT 21H</code></pre><h3 id="字符输入"><a href="#字符输入" class="headerlink" title="字符输入"></a>字符输入</h3><h4 id="单字符输入"><a href="#单字符输入" class="headerlink" title="单字符输入"></a>单字符输入</h4><p>格式:</p><pre class=" language-assembly"><code class="language-assembly">MOV AH，01INT 21H</code></pre><ul><li>输入的字符在AL中</li></ul><h4 id="字符串输入"><a href="#字符串输入" class="headerlink" title="字符串输入"></a>字符串输入</h4><p>接收一串字符</p><p>用户自定义缓冲区,格式:</p><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hZmZjM2YzNjBhYzZhNjM0ODI3ZjM1ZDdjMGM2YzFlMC94bWxub3RlLzA2NDM0RDJDQUVFMTQwOEM4Nzk2RTMxNzkwNDQ2RUZFLzMxNDYx?x-oss-process=image/format,png" alt="img"></p><p>功能号:</p><ul><li>10</li></ul><p>说明:</p><ul><li>缓存区必须在数据段</li></ul><p>实例:</p><pre class=" language-assembly"><code class="language-assembly"> DATA1 DB 20,?,20 DUP(?) ;第一个20个字符最大,?实际输入字符,DUP真正的缓冲区 ... LEA DX,DAT1 MOV AH,0AH INT 21H</code></pre><h3 id="字符输出"><a href="#字符输出" class="headerlink" title="字符输出"></a>字符输出</h3><h4 id="单字符"><a href="#单字符" class="headerlink" title="单字符"></a>单字符</h4><p>功能号:</p><ul><li>2</li><li>由AH接收</li></ul><p>输出字符:</p><ul><li>由DL接收</li></ul><p>例子:</p><pre class=" language-assembly"><code class="language-assembly">MOV AH,2MOV DL,41HINT 21H ; 输出A到屏幕上</code></pre><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>AH :功能号09H</p><p><code>DS：DX</code> 待输出字符串的偏移地址</p><p>注意点:</p><ul><li>被显示的字符串必须以‘$’结束；</li><li>所显示的内容不应出现非可见的ASCII码；</li><li>若考虑输出格式需要，在定义字符串后，加上回车符和换行符。</li></ul><pre class=" language-assembly"><code class="language-assembly">DATA SEGMENTMESS1 DB ‘Input String:’, 0DH,0AH,’$’DATA ENDSCODE SEGMENT┇MOV AH，09MOV DX，OFFSET MESS1INT 21H</code></pre><h3 id="返回DOS"><a href="#返回DOS" class="headerlink" title="返回DOS"></a>返回DOS</h3><p>功能号：</p><ul><li>4CH</li></ul><p>调用格式：</p><pre class=" language-assembly"><code class="language-assembly">MOV AH，4CHINT 21H</code></pre><p>功能：</p><ul><li>程序执行完该2条语句后能正常返回OS</li><li>常位于程序结尾处。</li></ul><h2 id="汇编语言程序设计实例"><a href="#汇编语言程序设计实例" class="headerlink" title="汇编语言程序设计实例"></a>汇编语言程序设计实例</h2><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><blockquote><p>以下数据区在内存中是如何存储的？</p></blockquote><pre class=" language-assembly"><code class="language-assembly">DATA SEGMENT    NAMES DB ‘TOM..’，20    DB ‘CATE’，25DATA ENDS</code></pre><p><img src="/medias/loading.gif" data-original="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20veXdzL3B1YmxpYy9yZXNvdXJjZS9hZmZjM2YzNjBhYzZhNjM0ODI3ZjM1ZDdjMGM2YzFlMC94bWxub3RlL0VDOUYxMjRGNTc4NTQ5NDJCQkVGOTVFQTQyRDAyMDBDLzMxNDgz?x-oss-process=image/format,png" alt="img"></p><h3 id="输出字符串"><a href="#输出字符串" class="headerlink" title="输出字符串"></a>输出字符串</h3><blockquote><p>阅读程序段，说明该程序段的功能</p></blockquote><pre class=" language-assembly"><code class="language-assembly">DATA SEGMENT    A DB ‘123ABC’DATA ENDSCODE SEGMENTASSUME CS：CODE，DS：DATASTART： MOV AX，DATA        MOV DS，AX        LEA BX，A        MOV CX，6    LP：MOV AH，2        MOV AL，[BX]        XCHG AL，DL        INC BX        INT 21H        LOOP LP        MOV AH，4CH        INT 21H        CODE ENDS        END START</code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怀天经智老因访之</title>
      <link href="/posts/e083.html"/>
      <url>/posts/e083.html</url>
      
        <content type="html"><![CDATA[<h1 id="怀天经智老因访之"><a href="#怀天经智老因访之" class="headerlink" title="怀天经智老因访之"></a>怀天经智老因访之</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​           怀天经智老因访之</p><p>​                                                                宋·陈与义</p><p>今年二月冻初融，睡起苕溪绿向东。<br>客子光阴诗卷里，杏花消息雨声中。<br>西庵禅伯还多病，北栅儒先只固穷。<br>忽忆轻舟寻二子，纶巾鹤氅试春风。</p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><ul><li>今年二月早春时节，冰雪都开始融化了，寒冬时节沉睡了已久的苕溪，夹带着几丝绿色，潺潺涓涓，向东流去。</li><li>我寓居他乡，在吟诗作赋中淡泊度日。杏花时节，伴随着窗外稀稀落落的雨声，我时常探听远方好友的音讯。</li><li>西庵所居住的智老精于禅学，但病魔缠身；北栅所居住的天经精于儒学，又安于穷困。</li><li>我忽然想念他们，于是就荡舟寻访这二位老友。在春风的吹拂下，我头戴纶巾，身披鹤氅，是何等的风流俊逸！</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>天经：姓叶，名德。智老：即大圆洪智和尚。诗中“禅伯”指大圆洪智，“儒先”指叶天经。</li><li>苕溪：河名，源出浙江省天目山，流经余杭、杭州、湖州等地，进入太湖。</li><li>西庵：智老所居。位于湖州东南九十里的乌镇。禅伯：形容智老精于禅学。</li><li>北栅：天经所居。亦位于湖州东南九十里的乌镇。儒先：形容天经精于儒学。固穷：安于穷困。</li><li>纶巾鹤氅：是六朝以来名士喜爱的穿戴，这里比喻诗人是雅人。纶巾，用丝带做成的头巾。鹤氅，用鸟羽做成的外衣</li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><p>　　公元1136年（宋高宗绍兴六年）旧历二月，陈与义寓居苕溪畔的青镇，怀念对岸的两位朋友天经和智老，因而写下这首诗。</p><p>　　作品的开篇写时间变化，一夜之间，春水已涨，尽向东流，顿生怀友、访友之意。但笔意至此，先出一折，从自己写起。安于贫贱，甘于淡泊，在吟诗作赋的生涯中，看到杏花春雨又送来一个春天，心中充满了顺适之感。自己如此，友人也是一样。所以下面写到禅伯之多病，儒先之固穷。实则写己即写友，写友即写己，二者交相为用，互为生发，以见出心灵的相契，见出溪涨思友的心理依据。有了前面的铺垫，末二句就顺理成章地踏上了访友的路途。至于见到友人后的情形，却全都忽略了，留给读者自己去想像。但作者另有一诗题为《与智老天经夜坐》：“残年不复徙他邦，长与两禅同夜釭。坐到更深都寂寂，雪花无数落天窗。”其中对雨夜谈禅的描写，正可与此诗互相补充。</p><p>　　“客子光阴诗卷里，杏花消息雨声中”是陈与义的名句，曾经得到宋高宗的激赏。这一联写诗人观赏杏花，以诗自娱，以自然清新的笔触表现了诗人的平淡闲适之情，却并未道出诗人是喜是悲，是苦是乐，给读者留下了想象空间。就对仗来说，此联除了“里”、“中”外，其余都不算工对，但也正因为如此，反映了作者在古典诗歌的对仗艺术上所作的探索，因而曾被魏庆之的《诗人玉屑》列为“宋朝警句”。方回在《瀛奎律髓》卷二十六中对此作了分析：“以客子对杏花，以雨声对诗卷，一我一物，一景一情，变化至此。乃老杜‘即今蓬鬓改，但愧菊花开’，贾岛‘身事岂能遂，兰花又已开’，翻窠换臼，至简斋而益奇也。”对仗要求和谐工稳，是六朝以来的总体趋势；但至唐代发展到极致以后，一些有创造性的诗人如杜甫、韩愈等又致力于打破已成模式化的对仗方式，力图求新求变，突破这种工稳，以求得在不平衡中的平衡。到了宋人手里，就更是有意识地忽略字面上的工稳，而着重于两句之间的内在联系。陈与义的这一联，上句写客中吟咏送日的宁静、淡泊，下联写一个清丽的境界，从而构成一个和谐的整体。至于两句之间在字面上是否的对，倒没有特别注意。从这个角度看，这联诗也反映了宋人对唐诗的发展。</p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>​        陈与义(1090-1138)，字去非，号简斋，汉族，其先祖居京兆，自曾祖陈希亮迁居洛阳，故为宋代河南洛阳人（现在属河南）。他生于宋哲宗元祐五年(1090年)，卒于南宋宋高宗绍兴八年(1138年)。北宋末，南宋初年的杰出诗人，同时也工于填词。其词存于今者虽仅十余首，却别具风格，尤近于苏东坡，语意超绝，笔力横空，疏朗明快，自然浑成，著有《简斋集》</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行香子·过七里濑</title>
      <link href="/posts/93e.html"/>
      <url>/posts/93e.html</url>
      
        <content type="html"><![CDATA[<h1 id="行香子·过七里濑"><a href="#行香子·过七里濑" class="headerlink" title="行香子·过七里濑"></a>行香子·过七里濑</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​            行香子·过七里濑</p><p>​                                                                宋·苏轼</p><p>一叶舟轻，双桨鸿惊。水天清、影湛波平。鱼翻藻鉴，鹭点烟汀。过沙溪急，霜溪冷，月溪明。<br>重重似画，曲曲如屏。算当年、虚老严陵。君臣一梦，今古空名。但远山长，云山乱，晓山青</p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><ul><li>乘一叶小舟，荡着双桨，像惊飞的鸿雁一样，飞快地掠过水面。天空碧蓝，水色清明，山色天光，尽入江水，波平如镜。水中游鱼，清晰可数，不时跃出明镜般的水面；水边沙洲，白鹭点点，悠闲自得。白天之溪，清澈而见沙底；清晓之溪，清冷而有霜意；月下之溪，是明亮的水晶世界。</li><li>两岸连山，往纵深看则重重叠叠，如画景；从横列看则曲曲折折，如屏风。笑严光当年白白地在此终老，不曾真正领略到山水佳处。皇帝和隐士，而今也已如梦一般消失，只留下空名而已。只有远山连绵，重峦叠嶂；山间白云，缭绕变幻；晓山晨曦，青翠欲滴。</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li><p>行香子：词牌名。</p></li><li><p>七里濑：又名七里滩、七里泷，在今浙江省桐庐县城南三十里。钱塘江两岸山峦夹峙，水流湍急，连绵七里，故名七里濑。濑，沙石上流过的急水。</p></li><li><p>一叶：舟轻小如叶，故称“一叶”。</p></li><li><p>湛（zhàn）：清澈。</p></li><li><p>藻鉴：亦称藻镜，指背面刻有鱼、藻之类纹饰的铜镜，这里比喻像镜子一样平的水面。藻，生活在水中的一种</p><p>隐花植物。鉴，镜子。</p></li><li><p>鹭：一种水鸟。汀（tīng）：水中或水边的平地，小洲。</p></li><li><p>屏：屏风，室内用具，用以挡风或障蔽。</p></li><li><p>严陵：即严光，字子陵，东汉人，曾与刘秀同学，并帮助刘秀打天下。刘秀称帝后，他改名隐居。刘秀三次派人才把他召到京师。授谏议大夫，他不肯接受，归隐富春江，终日钓鱼。</p></li><li><p>君臣：君指刘秀，臣指严光。</p></li><li><p>空名：世人多认为严光钓鱼是假，“钓名”是真。这里指刘秀称帝和严光垂钓都不过是梦一般的空名而已。</p></li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><blockquote><p>​        此词在对大自然美景的赞叹中，寄寓了因缘自适、看透名利、归真返朴的人生态度，发出了人生如梦的浩叹。</p></blockquote><p>　　上阕头六句描写清澈宁静的江水之美：一叶小舟，荡着双桨，像惊飞的鸿雁一样，飞快地掠过水面。天空碧蓝，水色清明，山色天光，尽入江水，波平如镜。水中游鱼，清晰可数，不时跃出明镜般的水面；水边沙洲，白鹭点点，悠闲自得。词人用简练的笔墨，动静结合、点面兼顾地描绘出生机盎然的江面风光，体现出作者热爱自然、热爱生活的情趣。</p><p>　　接下来“过沙溪急，霜溪冷，月溪明”三句，节奏轻快。沙溪，是白天之溪，清澈而见沙底；霜溪，是清晓之溪，清冷而有霜意；月溪，乃是月下之溪，是明亮的水晶世界。词人用蒙太奇手法，剪接了三个不同时辰的舟行之景。既写出了船之行程，也创造出清寒凄美的意境，由此引出一股人生的况味，为下片抒写人生感慨作了铺垫。</p><p>　　词的下阕，作者首先由写江水之清明转写夹岸的奇山异景——“重重似画，曲曲如屏”：两岸连山，往纵深看则重重叠叠，如画景；从横列看则曲曲折折，如屏风。词写水则特详，写山则至简，章法变化，体现了在江上舟中观察景物近则精细远则粗略的特点。</p><p>　　“算当年，虚老严陵。”东汉初年的严子陵，辅佐刘秀打天下以后，隐居不仕，垂钓富春江上。昔人多说严光垂钓实是“钓名”，东坡在此，也笑严光当年白白在此终老，不曾真正领略到山水佳处。“君臣一梦，今古空名”，表达出浮生若梦的感慨：皇帝和隐士，而今也已如梦一般消失，只留下空名而已。那么真正能永恒留传的实体是什么呢？“但远山长，云山乱，晓山青。”只有远山连绵，重峦叠嶂；山间白云，缭绕变形；晓山晨曦，青翠欲滴。意思是说，只有大自然才是永恒的，只有大自然之美才是永恒的。这是苏轼的一贯思想，正如他在《前赤壁赋》中所感叹的：“惟江上之清风，与山间之明月，耳得之而为声，目遇之而成色，取之无禁，用之无竭……”</p><p>　　下半阕以山起，以山结，中间插入议论感慨，而以“虚老”粘上文，“但”字转下意，衔接自然。结尾用一“但”字领“远山长，云山乱，晓山青”三个跳跃的短句，又与上半阕“沙溪急，霜溪冷，月溪明”遥相呼应。前面写水，后面写山，异曲同工，以景结情。人生的感慨，历史的沉思，都融化在一片流动闪烁、如诗如画的水光山色之中，隽永含蓄，韵味无穷。</p><p>　　从这首词可以看出，苏轼因与朝廷掌权者意见不合，而贬谪杭州任通判期间，尽管仕途不顺，却仍然生活得轻松闲适。他好佛老而不溺于佛老，看透生活而不厌倦生活，善于将沉重的荣辱得失化为过眼云烟，在大自然的美景中找回内心的宁静与安慰。词中那生意盎然、活泼清灵的景色中，融注着词人深沉的人生感慨和哲理思考。</p><p>　　苏东坡经常发出“人生如梦”的感慨，有的评论家便批评苏东坡消极、悲观，但人们仍然爱苏词。人们从苏词中得到的，不是灰色的颓唐，而是绿色的欢欣，是诗情画意的美感享受。</p><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>这首词作于公元1073年（宋神宗熙宁六年）春二月。苏轼时任杭州通判，巡查富阳，由新城至桐庐，乘舟富春江，经过七里濑时作此词。</p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>​      苏轼（1037年1月8日-1101年8月24日）字子瞻、和仲，号铁冠道人、东坡居士，世称苏东坡、苏仙，汉族，眉州眉山（四川省眉山市）人，祖籍河北栾城，北宋著名文学家、书法家、画家，历史治水名人。苏轼是北宋中期文坛领袖，在诗、词、散文、书、画等方面取得很高成就。文纵横恣肆；诗题材广阔，清新豪健，善用夸张比喻，独具风格，与黄庭坚并称“苏黄”；词开豪放一派，与辛弃疾同是豪放派代表，并称“苏辛”；散文著述宏富，豪放自如，与欧阳修并称“欧苏”，为“唐宋八大家”之一。苏轼善书，“宋四家”之一；擅长文人画，尤擅墨竹、怪石、枯木等。作品有《东坡七集》《东坡易传》《东坡乐府》《潇湘竹石图卷》《古木怪石图卷》等。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python内置函数详解</title>
      <link href="/posts/1e2c.html"/>
      <url>/posts/1e2c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python-内置函数详解"><a href="#Python-内置函数详解" class="headerlink" title="Python 内置函数详解"></a>Python 内置函数详解</h1><h2 id="01、abs"><a href="#01、abs" class="headerlink" title="01、abs()"></a>01、abs()</h2><blockquote><p><strong>描述：</strong>返回数字绝对值或复数的模</p><p><strong>语法：</strong>abs( x )</p><p><strong>参数：</strong>x 数值表达式。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token number">6</span>abs<span class="token punctuation">(</span><span class="token number">5j</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token number">6.4031242374328485</span></code></pre><h2 id="02、all"><a href="#02、all" class="headerlink" title="02、all()"></a><strong>02、all()</strong></h2><blockquote><p><strong>描述：</strong>接受一个迭代器，如果迭代器(元组或列表)的所有元素都为真，那么返回True，否则返回False，元素除了是 0、空、None、False 外都算 True。</p><p><strong>注意：</strong>空元组、空列表返回值为True，这里要特别注意。</p><p><strong>语法：</strong>all(iterable)</p><p><strong>参数：</strong>iterable – 元组或列表</p></blockquote><pre class=" language-python"><code class="language-python">all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">False</span>all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">True</span>all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">False</span>all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#空列表为真</span><span class="token boolean">True</span> all<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#空元组为真</span><span class="token boolean">True</span></code></pre><h2 id="03、any"><a href="#03、any" class="headerlink" title="03、any()"></a><strong>03、any()</strong></h2><blockquote><p><strong>描述：</strong>接受一个迭代器，如果迭代器里有一个元素为真，那么返回True，否则返回False，元素除了是 0、空、None、False 外都算 True。</p><p><strong>语法：any</strong>(iterable)</p><p><strong>参数：</strong>iterable – 元组或列表</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">any<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">False</span>any<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">True</span>any<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token boolean">False</span>any<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 空列表</span><span class="token boolean">False</span>any<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 空元组</span><span class="token boolean">False</span></code></pre><h2 id="04、ascii"><a href="#04、ascii" class="headerlink" title="04、ascii()"></a><strong>04、ascii()</strong></h2><blockquote><p><strong>描述：</strong>ascii() 函数返回任何对象（字符串，元组，列表等）的可读版本。</p><p>ascii() 函数会将所有非 ascii 字符替换为转义字符：</p><p>å 将替换为 \xe5。</p><p><strong>语法：</strong>ascii(<em>object</em>)</p><p><strong>参数：*</strong>object–*对象，可以是元组、列表、字典、字符串、set()创建的集合。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">ascii<span class="token punctuation">(</span><span class="token string">'中国'</span><span class="token punctuation">)</span><span class="token string">"'\\u4e2d\\u56fd'"</span>ascii<span class="token punctuation">(</span><span class="token string">'新冠肺炎'</span><span class="token punctuation">)</span>"'\\u65b0\\u51a0\\u80ba\\uascii<span class="token punctuation">(</span><span class="token string">"My name is Ståle"</span><span class="token punctuation">)</span><span class="token string">"'My name is St\\xe5le'"</span><span class="token keyword">print</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#元组</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#列表</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token string">'？'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#字符串，非 ASCII字符，转义</span><span class="token string">'\uff1f'</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token string">"？"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#字典</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>ascii<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span></code></pre><p><strong>ASCII码表具体如下所示</strong></p><table><thead><tr><th><strong>Bin</strong>(二进制)</th><th><strong>Oct</strong>(八进制)</th><th><strong>Dec</strong>(十进制)</th><th><strong>Hex</strong>(十六进制)</th><th><strong>缩写/字符</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td>0000 0000</td><td>00</td><td>0</td><td>0x00</td><td>NUL(null)</td><td>空字符</td></tr><tr><td>0000 0001</td><td>01</td><td>1</td><td>0x01</td><td>SOH(start of headline)</td><td>标题开始</td></tr><tr><td>0000 1010</td><td>012</td><td>10</td><td>0x0A</td><td>LF (NL line feed, new line)</td><td>换行键</td></tr><tr><td>0010 0100</td><td>044</td><td>36</td><td>0x24</td><td>$</td><td>美元符</td></tr><tr><td>0010 0101</td><td>045</td><td>37</td><td>0x25</td><td>%</td><td>百分号</td></tr><tr><td>0010 1010</td><td>052</td><td>42</td><td>0x2A</td><td>*</td><td>星号</td></tr><tr><td>0011 0010</td><td>062</td><td>50</td><td>0x32</td><td>2</td><td>字符2</td></tr><tr><td>0011 0111</td><td>067</td><td>55</td><td>0x37</td><td>7</td><td>字符7</td></tr><tr><td>0011 1000</td><td>070</td><td>56</td><td>0x38</td><td>8</td><td>字符8</td></tr><tr><td>0011 1001</td><td>071</td><td>57</td><td>0x39</td><td>9</td><td>字符9</td></tr><tr><td>0100 0000</td><td>0100</td><td>64</td><td>0x40</td><td>@</td><td>电子邮件符号</td></tr><tr><td>0100 0001</td><td>0101</td><td>65</td><td>0x41</td><td>A</td><td>大写字母A</td></tr><tr><td>0110 0101</td><td>0145</td><td>101</td><td>0x65</td><td>e</td><td>小写字母e</td></tr><tr><td>0110 1100</td><td>0154</td><td>108</td><td>0x6C</td><td>l</td><td>小写字母l</td></tr><tr><td>0110 1101</td><td>0155</td><td>109</td><td>0x6D</td><td>m</td><td>小写字母m</td></tr><tr><td>0110 1110</td><td>0156</td><td>110</td><td>0x6E</td><td>n</td><td>小写字母n</td></tr><tr><td>0110 1111</td><td>0157</td><td>111</td><td>0x6F</td><td>o</td><td>小写字母o</td></tr><tr><td>0111 0000</td><td>0160</td><td>112</td><td>0x70</td><td>p</td><td>小写字母p</td></tr><tr><td>0111 1110</td><td>0176</td><td>126</td><td>0x7E</td><td>~</td><td>波浪号</td></tr><tr><td>0111 1111</td><td>0177</td><td>127</td><td>0x7F</td><td>DEL (delete)</td><td>删除</td></tr></tbody></table><h2 id="05、bin"><a href="#05、bin" class="headerlink" title="05、bin()"></a><strong>05、bin()</strong></h2><blockquote><p><strong>描述</strong>：bin() 返回一个整数 int 或者长整数 long int 的二进制表示。将十进制转换为二进制</p><p><strong>语法：</strong>bin(x)</p><p><strong>参数：</strong>x – int 或者 long int 数字</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">bin<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token string">'0b10'</span>bin<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>'<span class="token number">0b10100</span>'</code></pre><h2 id="06、oct"><a href="#06、oct" class="headerlink" title="06、oct()"></a><strong>06、oct()</strong></h2><blockquote><p><strong>描述：</strong>将十进制转换为八进制</p><p><strong>语法：</strong>oct(x)</p><p><strong>参数：</strong>x – 整数。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">oct<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token string">'0o10'</span>oct<span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token string">'0o53'</span></code></pre><h2 id="07、hex"><a href="#07、hex" class="headerlink" title="07、hex()"></a><strong>07、hex()</strong></h2><blockquote><p><strong>描述：**</strong>hex()** 函数用于将10进制整数转换成16进制，以字符串形式表示。</p><p><strong>语法：</strong>hex(x)</p><p><strong>参数：</strong>x – 10进制整数。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">将十进制转换为十六进制hex<span class="token punctuation">(</span><span class="token number">43</span><span class="token punctuation">)</span><span class="token string">'0x2b'</span><span class="token comment" spellcheck="true">#43等于2B</span>hex<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token string">'0xf'</span></code></pre><h2 id="08、bool"><a href="#08、bool" class="headerlink" title="08、bool()"></a><strong>08、bool()</strong></h2><blockquote><p><strong>描述：</strong>测试一个对象是True, 还是False.bool 是 int 的子类。</p><p><strong>语法：</strong>class bool([x])</p><p><strong>参数：</strong>x – 要进行转换的参数。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">bool<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">True</span>bool<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token boolean">False</span>issubclass<span class="token punctuation">(</span>bool<span class="token punctuation">,</span> int<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># bool 是 int 子类</span><span class="token boolean">True</span></code></pre><h2 id="09、bytes"><a href="#09、bytes" class="headerlink" title="09、bytes()"></a><strong>09、bytes()</strong></h2><blockquote><p><strong>描述：</strong>将一个字符串转换成字节类型</p><p><strong>语法：</strong>class bytes([source[, encoding[, errors]]])</p><p><strong>参数：</strong></p><ul><li><p>如果 source 为整数，则返回一个长度为 source 的初始化数组；</p></li><li><p>如果 source 为字符串，则按照指定的 encoding 将字符串转换为字节序列；</p></li><li><p>如果 source 为可迭代类型，则元素必须为[0 ,255] 中的整数；</p></li><li><p>如果 source 为与 buffer 接口一致的对象，则此对象也可以被用于初始化 bytearray。</p></li><li><p>如果没有输入任何参数，默认就是初始化数组为0个元素。</p><p><strong>案例：</strong></p></li></ul></blockquote><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"apple"</span>bytes<span class="token punctuation">(</span>s<span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>b<span class="token string">'apple'</span>bytes<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b<span class="token string">'\x01\x02\x03\x04'</span></code></pre><h2 id="10、str"><a href="#10、str" class="headerlink" title="10、str()"></a><strong>10、str()</strong></h2><blockquote><p><strong>描述：</strong>str() 函数将对象转化为适于人阅读的形式。将字符类型、数值类型等转换为字符串类型</p><p><strong>语法：</strong>class str(object=’’)</p><p><strong>参数：</strong>object – 对象。</p><p><strong>案例：</strong></p></blockquote><p>integ = 100</p><pre class=" language-python"><code class="language-python">str<span class="token punctuation">(</span>integ<span class="token punctuation">)</span><span class="token string">'100'</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'baidu'</span><span class="token punctuation">:</span> <span class="token string">'baidu.com'</span><span class="token punctuation">,</span> <span class="token string">'google'</span><span class="token punctuation">:</span> <span class="token string">'google.com'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>str<span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token string">"{'baidu': 'baidu.com', 'google': 'google.com'}"</span></code></pre><p> <strong>11、callable()</strong></p><blockquote><p><strong>描述：</strong>判断对象是否可以被调用，能被调用的对象就是一个callable 对象，对于函数、方法、lambda 函式、 类以及实现了 <strong><strong>call</strong></strong> 方法的类实例, 它都返回 True。</p><p><strong>语法：</strong>callable(object)</p><p><strong>参数：</strong>object – 对象</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">callable<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> ycallable<span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token boolean">True</span></code></pre><h2 id="12、chr"><a href="#12、chr" class="headerlink" title="12、chr()"></a><strong>12、chr()</strong></h2><blockquote><p><strong>描述：</strong>chr() 用一个范围在 range（256）内的（就是0～255）整数作参数，返回一个对应的字符。</p><p><strong>语法：</strong>chr(i)</p><p><strong>参数：</strong>i – 可以是10进制也可以是16进制的形式的数字。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">查看十进制整数对应的ASCII字符chr<span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">)</span><span class="token string">'A'</span>可以参考<span class="token number">4</span>案例中的表</code></pre><h2 id="13、ord"><a href="#13、ord" class="headerlink" title="13、ord()"></a><strong>13、ord()</strong></h2><blockquote><p><strong>描述：</strong>查看某个ascii对应的十进制数</p><p><strong>语法：</strong>ord(c)</p><p><strong>参数：</strong>c – 字符。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">ord<span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token number">65</span>ord<span class="token punctuation">(</span><span class="token string">'~'</span><span class="token punctuation">)</span><span class="token number">126</span></code></pre><h2 id="14、classmethod"><a href="#14、classmethod" class="headerlink" title="14、classmethod()"></a><strong>14、classmethod()</strong></h2><blockquote><p><strong>描述：**</strong>classmethod** 修饰符对应的函数不需要实例化，不需要 self 参数，但第一个参数需要是表示自身类的 cls 参数，可以来调用类的属性，类的方法，实例化对象等。</p><p><strong>语法：</strong>classmethod</p><p><strong>参数：无</strong></p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Sample</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    bar <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">fun1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span>     @classmethod    <span class="token keyword">def</span> <span class="token function">fun2</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'fun2'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span>cls<span class="token punctuation">.</span>bar<span class="token punctuation">)</span>        cls<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fun1<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 调用 foo 方法</span>Sample<span class="token punctuation">.</span>fun2<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 不需要实例化</span>fun2<span class="token number">1</span>foo</code></pre><h2 id="15、compile"><a href="#15、compile" class="headerlink" title="15、compile()"></a><strong>15、compile()</strong></h2><blockquote><p><strong>描述：</strong>compile() 函数将一个字符串编译为字节代码。</p><p><strong>语法：</strong>compile(source, filename, mode[, flags[, dont_inherit]])</p><p><strong>参数：</strong></p><ul><li>source – 字符串或者AST（Abstract Syntax Trees）对象。。</li><li>filename – 代码文件名称，如果不是从文件读取代码则传递一些可辨认的值。</li><li>mode – 指定编译代码的种类。可以指定为 exec, eval, single。</li><li>flags – 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。。</li><li>flags和dont_inherit是用来控制编译源码时的标志</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">将字符串编译成python能识别或可以执行的代码，也可以将文字读成字符串再编译。s <span class="token operator">=</span> <span class="token string">"print('helloworld')"</span>r <span class="token operator">=</span> compile<span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"&lt;string>"</span><span class="token punctuation">,</span> <span class="token string">"exec"</span><span class="token punctuation">)</span>r<span class="token operator">&lt;</span>code object <span class="token operator">&lt;</span>module<span class="token operator">></span> at <span class="token number">0x000000000F819420</span><span class="token punctuation">,</span> file <span class="token string">"&lt;string>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token operator">></span><span class="token keyword">exec</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>helloworldstr <span class="token operator">=</span> <span class="token string">"for i in range(0,5): print(i)"</span> c <span class="token operator">=</span> compile<span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token string">'exec'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 编译为字节代码对象 </span>c<span class="token operator">&lt;</span>code object <span class="token operator">&lt;</span>module<span class="token operator">></span> at <span class="token number">0x000001EB82C91ED0</span><span class="token punctuation">,</span> file <span class="token string">""</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token operator">></span><span class="token keyword">exec</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">4</span></code></pre><h2 id="16、complex"><a href="#16、complex" class="headerlink" title="16、complex()"></a><strong>16、complex()</strong></h2><blockquote><p><strong>描述：</strong>创建一个复数</p><p><strong>语法：</strong>class complex([real[, imag]])</p><p><strong>参数：</strong></p><ul><li>real – int, long, float或字符串；</li><li>imag – int, long, float；</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">complex<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2j</span><span class="token punctuation">)</span> complex<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">0j</span><span class="token punctuation">)</span>complex<span class="token punctuation">(</span><span class="token string">"1+2j"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2j</span><span class="token punctuation">)</span></code></pre><h2 id="17、delattr"><a href="#17、delattr" class="headerlink" title="17、delattr()"></a><strong>17、delattr()</strong></h2><blockquote><p><strong>描述：</strong>删除对象的属性</p><p><strong>语法：</strong>delattr(object, name)</p><p><strong>参数：</strong></p><ul><li>object – 对象。</li><li>name – 必须是对象的属性。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Coordinate</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token number">10</span>    y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span>    z <span class="token operator">=</span> <span class="token number">0</span>point1 <span class="token operator">=</span> Coordinate<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x = '</span><span class="token punctuation">,</span>point1<span class="token punctuation">.</span>x<span class="token punctuation">)</span>x <span class="token operator">=</span>  <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'y = '</span><span class="token punctuation">,</span>point1<span class="token punctuation">.</span>y<span class="token punctuation">)</span>y <span class="token operator">=</span>  <span class="token operator">-</span><span class="token number">5</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'z = '</span><span class="token punctuation">,</span>point1<span class="token punctuation">.</span>z<span class="token punctuation">)</span>z <span class="token operator">=</span>  <span class="token number">0</span>delattr<span class="token punctuation">(</span>Coordinate<span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--删除 z 属性后--'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'z = '</span><span class="token punctuation">,</span>point1<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 触发错误</span>AttributeError<span class="token punctuation">:</span> <span class="token string">'Coordinate'</span> object has no attribute <span class="token string">'z'</span>dir<span class="token punctuation">(</span>Coordinate<span class="token punctuation">)</span><span class="token punctuation">[</span>'__class__省略部分 <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span></code></pre><h2 id="18、dict"><a href="#18、dict" class="headerlink" title="18、dict()"></a><strong>18、dict()</strong></h2><blockquote><p><strong>描述：</strong>创建数据字典</p><p><strong>语法：</strong></p><p>class dict(**kwarg)</p><p>class dict(mapping, **kwarg)</p><p>class dict(iterable, **kwarg)</p><p><strong>参数：</strong></p><ul><li>**kwargs – 关键字</li><li>mapping – 元素的容器。</li><li>iterable – 可迭代对象。</li></ul><p><strong>案例：</strong></p></blockquote><p>#创建空字典</p><pre class=" language-python"><code class="language-python">dict<span class="token punctuation">(</span><span class="token punctuation">)</span>                       <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#传入关键字</span>dict<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">,</span> t<span class="token operator">=</span><span class="token string">'t'</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">:</span> <span class="token string">'t'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 映射函数方式来构造字典</span>dict<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token string">'three'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">#可迭代对象方式来构造字典</span>dict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'three'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token string">'three'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'one'</span><span class="token punctuation">:</span></code></pre><h2 id="19、dir"><a href="#19、dir" class="headerlink" title="19、dir()"></a><strong>19、dir()</strong></h2><blockquote><p><strong>描述：**</strong>dir()** 函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。如果参数包含方法<strong>dir</strong>()，该方法将被调用。如果参数不包含<strong>dir</strong>()，该方法将最大限度地收集参数信息。</p><p><strong>语法：</strong>dir([object])</p><p><strong>参数：</strong>object – 对象、变量、类型。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">dir<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#  获得当前模块的属性列表</span><span class="token punctuation">[</span><span class="token string">'In'</span><span class="token punctuation">,</span> <span class="token string">'Out'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token string">'__'</span><span class="token punctuation">,</span> <span class="token string">'___'</span><span class="token punctuation">,</span> <span class="token string">'__builtin__'</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">,</span> <span class="token string">'__name__'</span><span class="token punctuation">,</span> <span class="token string">'__package__'</span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">,</span> <span class="token string">'_dh'</span><span class="token punctuation">,</span> <span class="token string">'_i'</span><span class="token punctuation">,</span> <span class="token string">'_i1'</span><span class="token punctuation">,</span> <span class="token string">'_ih'</span><span class="token punctuation">,</span> <span class="token string">'_ii'</span><span class="token punctuation">,</span> <span class="token string">'_iii'</span><span class="token punctuation">,</span> <span class="token string">'_oh'</span><span class="token punctuation">,</span> <span class="token string">'exit'</span><span class="token punctuation">,</span> <span class="token string">'get_ipython'</span><span class="token punctuation">,</span> <span class="token string">'quit'</span><span class="token punctuation">]</span></code></pre><pre class=" language-python"><code class="language-python">dir<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看列表的方法</span>dir<span class="token punctuation">(</span>list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看列表的方法</span><span class="token punctuation">[</span><span class="token string">'__add__'</span><span class="token punctuation">,</span> <span class="token string">'__class__'</span><span class="token punctuation">,</span> <span class="token string">'__contains__'</span><span class="token punctuation">,</span> <span class="token string">'__delattr__'</span><span class="token punctuation">,</span> <span class="token string">'__delitem__'</span><span class="token punctuation">,</span> <span class="token string">'__dir__'</span><span class="token punctuation">,</span> <span class="token string">'__str__'</span><span class="token punctuation">,</span> <span class="token string">'__subclasshook__'</span><span class="token punctuation">,</span> <span class="token string">'append'</span><span class="token punctuation">,</span> <span class="token string">'clear'</span><span class="token punctuation">,</span> <span class="token string">'copy'</span><span class="token punctuation">,</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token string">'extend'</span><span class="token punctuation">,</span> <span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token string">'insert'</span><span class="token punctuation">,</span> <span class="token string">'pop'</span><span class="token punctuation">,</span> <span class="token string">'remove'</span><span class="token punctuation">,</span> <span class="token string">'reverse'</span><span class="token punctuation">,</span> <span class="token string">'sort'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>dir<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取所有的方法</span><span class="token keyword">print</span><span class="token punctuation">(</span>dir<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取所有的方法</span><span class="token keyword">print</span><span class="token punctuation">(</span>dir<span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取所有的</span>不带参数时返回当前范围内的变量，方法和定义的类型列表；带参数时返回参数的属性，方法列表。</code></pre><h2 id="20、divmod"><a href="#20、divmod" class="headerlink" title="20、divmod()"></a><strong>20、divmod()</strong></h2><blockquote><p><strong>描述：</strong>divmod() 函数把除数和余数运算结果结合起来，返回一个包含商和余数的元组(a // b, a % b)。</p><p><strong>语法：</strong>divmod(a, b)</p><p><strong>参数：</strong>a: 数字–被除数</p><p>​     b: 数字–除数</p><p><strong>案例：</strong></p><pre class=" language-python"><code class="language-python">divmod<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>divmod<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre></blockquote><h2 id="21、enumerate"><a href="#21、enumerate" class="headerlink" title="21、enumerate()"></a><strong>21、enumerate()</strong></h2><blockquote><p><strong>描述：</strong>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。返回一个可以枚举的对象，该对象的next()方法将返回一个元组。</p><p><strong>语法：</strong>enumerate(sequence, [start=0])</p><p><strong>参数：</strong>sequence – 一个序列、迭代器或其他支持迭代对象。</p><p>​     start – 下标起始位置。</p><p><strong>案例：</strong></p></blockquote><p>L = [‘Spring’, ‘Summer’, ‘Fall’, ‘Winter’]</p><pre class=" language-python"><code class="language-python">enumerate<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token operator">&lt;</span>enumerate at <span class="token number">0x226e1ee1138</span><span class="token operator">></span><span class="token comment" spellcheck="true">#生成的额迭代器，无法直接查看</span>list<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#列表形式，可以看到内部结构，默认下标从0开始</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Spring'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Summer'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Fall'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Winter'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>enumerate<span class="token punctuation">(</span>L<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#下标从 1 开始</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Spring'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Summer'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Fall'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Winter'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token number">0</span> Spring<span class="token number">1</span> Summer<span class="token number">2</span> Fall<span class="token number">3</span> Winter<span class="token keyword">for</span> i<span class="token punctuation">,</span>v <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>L<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token number">1</span> Spring<span class="token number">2</span> Summer<span class="token number">3</span> Fall<span class="token number">4</span> Winters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token punctuation">,</span>v <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token number">2</span> a<span class="token number">3</span> b<span class="token number">4</span> c普通的 <span class="token keyword">for</span> 循环i <span class="token operator">=</span> <span class="token number">0</span>seq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token keyword">for</span> element <span class="token keyword">in</span> seq<span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> seq<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    i<span class="token operator">+=</span> <span class="token number">1</span><span class="token number">0</span> one<span class="token number">1</span> two<span class="token number">2</span> three在看一个普通循环的对比案例    <span class="token keyword">for</span> 循环使用 enumerateseq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> element <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>seq<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token number">0</span> one<span class="token number">1</span> two<span class="token number">2</span> threeseq <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">,</span> <span class="token string">'two'</span><span class="token punctuation">,</span> <span class="token string">'three'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> element <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>seq<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token number">2</span> one<span class="token number">3</span> two</code></pre><h2 id="22、eval"><a href="#22、eval" class="headerlink" title="22、eval()"></a><strong>22、eval()</strong></h2><blockquote><p><strong>描述：</strong>将字符串str 当成有效的表达式来求值并返回计算结果取出字符串中内容</p><p><strong>语法：</strong>eval(expression[, globals[, locals]])</p><p><strong>参数：</strong></p><ul><li>expression – 表达式。</li><li>globals – 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。</li><li>locals – 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">s <span class="token operator">=</span> <span class="token string">"1 + 3 +5"</span>eval<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token number">9</span><span class="token comment" spellcheck="true">#要统计图片的数量</span>str1 <span class="token operator">=</span> <span class="token string">"['https://ww1.sin5n.jpg', 'https://ww1.siqk4he.jpg']"</span>len<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">2</span>len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token number">5</span></code></pre><blockquote><p><strong>23、exec()</strong></p><p><strong>描述：</strong>执行储存在字符串或文件中的Python语句，相比于 eval，exec可以执行更复杂的 Python 代码。</p><p><strong>语法：</strong>exec(<em>obj**ect</em>, <em>globals</em>, <em>locals</em>)</p><p> <strong>参数：</strong></p><ul><li><em>obj<strong>e</strong>ct</em>– 要执行的表达式。</li><li>globals – 可选。包含全局参数的字典。</li><li>locals – 可选。包含局部参数的字典。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">执行字符串或compile方法编译过的字符串，没有返回值s <span class="token operator">=</span> <span class="token string">"print('helloworld')"</span>r <span class="token operator">=</span> compile<span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token string">"&lt;string>"</span><span class="token punctuation">,</span> <span class="token string">"exec"</span><span class="token punctuation">)</span><span class="token keyword">exec</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>helloworldx <span class="token operator">=</span> <span class="token number">10</span>expr <span class="token operator">=</span> <span class="token triple-quoted-string string">"""z = 30sum = x + y + zprint(sum)"""</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> <span class="token number">20</span>    <span class="token keyword">exec</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span>    <span class="token keyword">exec</span><span class="token punctuation">(</span>expr<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">exec</span><span class="token punctuation">(</span>expr<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">60</span><span class="token number">33</span><span class="token number">34</span></code></pre><h2 id="24、filter"><a href="#24、filter" class="headerlink" title="24、filter()"></a><strong>24、filter()</strong></h2><blockquote><p><strong>描述：**</strong>filter()** 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。</p><p>该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判断，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。</p><p> 过滤器，构造一个序列，等价于：[ item for item in iterables if function(item)]</p><p>在函数中设定过滤条件，逐一循环迭代器中的元素，将返回值为True时的元素留下，形成一个filter类型数据。</p><p> <strong>语法：</strong>filter(function, iterable)</p><p><strong>参数：</strong></p><ul><li>function – 判断函数。</li><li>iterable – 可迭代对象。</li></ul><p><strong>案例：</strong></p></blockquote><p>fil = filter(lambda x: x&gt;10,[1,11,2,45,7,6,13])</p><pre class=" language-python"><code class="language-python">fil <span class="token operator">&lt;</span>filter at <span class="token number">0x28b693b28c8</span><span class="token operator">></span>list<span class="token punctuation">(</span>fil<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">is_odd</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span>newlist <span class="token operator">=</span> filter<span class="token punctuation">(</span>is_odd<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>newlist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span></code></pre><h2 id="25、float"><a href="#25、float" class="headerlink" title="25、float()"></a><strong>25、float()</strong></h2><blockquote><p><strong>描述：</strong>将一个字符串或整数转换为浮点数</p><p><strong>语法：</strong>class float([x])</p><p><strong>参数：</strong>x – 整数或字符串</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">float<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token number">3.0</span>float<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 字符串</span> <span class="token number">123.0</span></code></pre><h2 id="26、format"><a href="#26、format" class="headerlink" title="26、format()"></a><strong>26、format()</strong></h2><blockquote><p><strong>描述：</strong>Python2.6 开始，新增了一种格式化字符串的函数 <strong>str.format()</strong>，它增强了字符串格式化的功能。基本语法是通过 <strong>{}</strong> 和 <strong>:</strong> 来代替以前的 <strong>%</strong> 。使用format()来格式化字符串时，使用在字符串中使用{}作为占位符，占位符的内容将引用format()中的参数进行替换。可以是位置参数、命名参数或者兼而有之。</p><p>format 函数可以接受不限个参数，位置可以不按顺序。</p><p><strong>语法：</strong>format(value, format_spec)</p><p><strong>参数：</strong></p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 位置参数</span><span class="token string">'{}:您{}购买的{}到了！请下楼取快递。'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'快递小哥'</span><span class="token punctuation">,</span><span class="token string">'淘宝'</span><span class="token punctuation">,</span><span class="token string">'快递'</span><span class="token punctuation">)</span><span class="token string">'快递小哥:您淘宝购买的快递到了！请下楼取快递。'</span><span class="token comment" spellcheck="true">#给批量客户发短息</span>n_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'马云'</span><span class="token punctuation">,</span><span class="token string">'马化腾'</span><span class="token punctuation">,</span><span class="token string">'麻子'</span><span class="token punctuation">,</span><span class="token string">'小红'</span><span class="token punctuation">,</span><span class="token string">'李彦宏'</span><span class="token punctuation">,</span><span class="token string">'二狗子'</span><span class="token punctuation">]</span><span class="token keyword">for</span> name <span class="token keyword">in</span> n_list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0}：您淘宝购买的快递到了！请下楼取快递！'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>马云：您淘宝购买的快递到了！请下楼取快递！马化腾：您淘宝购买的快递到了！请下楼取快递！麻子：您淘宝购买的快递到了！请下楼取快递！小红：您淘宝购买的快递到了！请下楼取快递！李彦宏：您淘宝购买的快递到了！请下楼取快递！二狗子：您淘宝购买的快递到了！请下楼取快递！<span class="token comment" spellcheck="true">#名字进行填充    </span><span class="token keyword">for</span> n <span class="token keyword">in</span> n_list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{0}：您淘宝购买的快递到了！请下楼取快递！'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>马云：您淘宝购买的快递到了！请下楼取快递！马化腾：您淘宝购买的快递到了！请下楼取快递！<span class="token operator">*</span>麻子：您淘宝购买的快递到了！请下楼取快递！<span class="token operator">*</span>小红：您淘宝购买的快递到了！请下楼取快递！李彦宏：您淘宝购买的快递到了！请下楼取快递！二狗子：您淘宝购买的快递到了！请下楼取快递！<span class="token string">'{0}, {1} and {2}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">'gao'</span><span class="token punctuation">,</span><span class="token string">'fu'</span><span class="token punctuation">,</span><span class="token string">'shuai'</span><span class="token punctuation">)</span><span class="token string">'gao, fu and shuai'</span>x<span class="token operator">=</span><span class="token number">3</span>y<span class="token operator">=</span><span class="token number">5</span><span class="token string">'{0}+{1}={2}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 命名参数</span><span class="token string">'{name1}, {name2} and {name3}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name1<span class="token operator">=</span><span class="token string">'gao'</span><span class="token punctuation">,</span> name2<span class="token operator">=</span><span class="token string">'fu'</span><span class="token punctuation">,</span> name3<span class="token operator">=</span><span class="token string">'shuai'</span><span class="token punctuation">)</span><span class="token string">'gao, fu and shuai'</span><span class="token comment" spellcheck="true"># 混合位置参数、命名参数</span><span class="token string">'{name1}, {0} and {name3}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token string">"shuai"</span><span class="token punctuation">,</span> name1<span class="token operator">=</span><span class="token string">'fu'</span><span class="token punctuation">,</span> name3<span class="token operator">=</span><span class="token string">'gao'</span><span class="token punctuation">)</span><span class="token string">'fu, shuai and gao'</span><span class="token comment" spellcheck="true">#for循环进行批量处理</span><span class="token punctuation">[</span><span class="token string">"vec_{0}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'vec_0'</span><span class="token punctuation">,</span> <span class="token string">'vec_1'</span><span class="token punctuation">,</span> <span class="token string">'vec_2'</span><span class="token punctuation">,</span> <span class="token string">'vec_3'</span><span class="token punctuation">,</span> <span class="token string">'vec_4'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'f_{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> list<span class="token punctuation">(</span><span class="token string">'abcde'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'f_a'</span><span class="token punctuation">,</span> <span class="token string">'f_b'</span><span class="token punctuation">,</span> <span class="token string">'f_c'</span><span class="token punctuation">,</span> <span class="token string">'f_d'</span><span class="token punctuation">,</span></code></pre><h2 id="27、frozenset"><a href="#27、frozenset" class="headerlink" title="27、frozenset()"></a><strong>27、frozenset()</strong></h2><blockquote><p><strong>描述：**</strong>frozenset()** 返回一个冻结的集合，冻结后集合不能再添加或删除任何元素。</p><p><strong>语法：</strong>class frozenset([iterable])</p><p><strong>参数：</strong>iterable – 可迭代的对象，比如列表、字典、元组等等。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">创建一个不可修改的集合。frozenset<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>frozenset<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="28、getattr"><a href="#28、getattr" class="headerlink" title="28、getattr()"></a><strong>28、getattr()</strong></h2><blockquote><p><strong>描述：</strong>获取对象的属性</p><p><strong>语法：</strong>getattr(object, name[, default])</p><p><strong>参数：</strong></p><ul><li>object – 对象。</li><li>name – 字符串，对象属性。</li><li>default – 默认返回值，如果不提供该参数，在没有对应属性时，将触发 AttributeError。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Age</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>      age <span class="token operator">=</span> <span class="token number">1</span>my_a <span class="token operator">=</span> Age<span class="token punctuation">(</span><span class="token punctuation">)</span>getattr<span class="token punctuation">(</span>my_a<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取属性 bar 值</span> <span class="token number">1</span>getattr<span class="token punctuation">(</span>my_a<span class="token punctuation">,</span> <span class="token string">'age1'</span><span class="token punctuation">)</span><span class="token string">'Age'</span> object has no attribute <span class="token string">'age1'</span></code></pre><h2 id="29、gobals"><a href="#29、gobals" class="headerlink" title="29、gobals()"></a><strong>29、gobals()</strong></h2><blockquote><p><strong>描述：</strong> 函数会以字典类型返回当前位置的全部全局变量。</p><p><strong>语法：</strong>globals()</p><p><strong>参数：无</strong></p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token string">'runoob'</span><span class="token keyword">print</span><span class="token punctuation">(</span>globals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># globals 函数返回一个全局变量的字典，包括所有导入的变量</span></code></pre><h2 id="30、hasattr"><a href="#30、hasattr" class="headerlink" title="30、hasattr()"></a><strong>30、hasattr()</strong></h2><blockquote><p><strong>描述：</strong>函数用于判断对象是否包含对应的属性。</p><p><strong>语法：</strong>hasattr(object, name)</p><p><strong>参数：</strong></p><ul><li>object – 对象。</li><li>name – 字符串，属性名。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Coordinate</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token number">10</span>    y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span>    z <span class="token operator">=</span> <span class="token number">0</span>point1 <span class="token operator">=</span> Coordinate<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>hasattr<span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span>hasattr<span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span>hasattr<span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span>hasattr<span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">'no'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 没有该属性</span>Falseclass Coordinate<span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token number">10</span>    y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span>    z <span class="token operator">=</span> <span class="token number">0</span> point1 <span class="token operator">=</span> Coordinate<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>hasattr<span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Trueprint<span class="token punctuation">(</span>hasattr<span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Trueprint<span class="token punctuation">(</span>hasattr<span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Trueprint<span class="token punctuation">(</span>hasattr<span class="token punctuation">(</span>point1<span class="token punctuation">,</span> <span class="token string">'no'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 没有该属性False</span></code></pre><h2 id="31、hash"><a href="#31、hash" class="headerlink" title="31、hash()"></a><strong>31、hash()</strong></h2><blockquote><p><strong>描述：</strong>返回对象的哈希值</p><p><strong>语法：</strong>hash(object)</p><p><strong>参数：</strong>object – 对象；</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">hash<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数可以应用于数字、字符串和对象，不能直接应用于 list、set、dictionary。在 hash<span class="token punctuation">(</span><span class="token punctuation">)</span> 对对象使用时，所得的结果不仅和对象的内容有关，还和对象的 id<span class="token punctuation">(</span><span class="token punctuation">)</span>，也就是内存地址有关。<span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>i <span class="token operator">=</span> i<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> Test<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>hash<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span>hash<span class="token punctuation">(</span>point1<span class="token punctuation">)</span><span class="token number">16294976</span>hash<span class="token punctuation">(</span><span class="token string">'返回对象的哈希值'</span><span class="token punctuation">)</span><span class="token number">4919828709165481160</span>hash<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数的用途hash<span class="token punctuation">(</span><span class="token punctuation">)</span> 函数的对象字符不管有多长，返回的 hash 值都是固定长度的，也用于校验程序在传输过程中是否被第三方（木马）修改，如果程序（字符）在传输过程中被修改hash值即发生变化，如果没有被修改，则 hash 值和原始的 hash 值吻合，只要验证 hash 值是否匹配即可验证程序是否带木马（病毒）。name1<span class="token operator">=</span><span class="token string">'正常程序代码'</span>name2<span class="token operator">=</span><span class="token string">'正常程序代码带病毒'</span><span class="token keyword">print</span><span class="token punctuation">(</span>hash<span class="token punctuation">(</span>name1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># -3048480827538126659</span><span class="token keyword">print</span><span class="token punctuation">(</span>hash<span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># -9065726187242961328</span></code></pre><h2 id="32、help"><a href="#32、help" class="headerlink" title="32、help()"></a><strong>32、help()</strong></h2><blockquote><p><strong>描述：</strong>返回对象的帮助文档</p><p><strong>语法：</strong>help([object])</p><p><strong>参数：</strong>object – 对象</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">help<span class="token punctuation">(</span><span class="token string">'sys'</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 查看 sys 模块的帮助</span>help<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 查看 str 数据类型的帮助</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>help<span class="token punctuation">(</span>a<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># 查看列表 list 帮助信息</span>help<span class="token punctuation">(</span>a<span class="token punctuation">.</span>append<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 显示list的append方法的帮助</span></code></pre><h2 id="33-、id"><a href="#33-、id" class="headerlink" title="33 、id()"></a><strong>33 、id()</strong></h2><blockquote><p><strong>描述：**</strong>id()** 函数返回对象的唯一标识符，标识符是一个整数。CPython 中 <strong>id()</strong> 函数用于获取对象的内存地址。</p><p><strong>语法：</strong>id([object])</p><p><strong>参数：</strong>object – 对象。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">返回对象的内存地址a <span class="token operator">=</span> <span class="token string">'runoob'</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">260316720</span></code></pre><h2 id="34、input"><a href="#34、input" class="headerlink" title="34、input()"></a><strong>34、input()</strong></h2><blockquote><p><strong>描述：</strong>Python3.x 中 input() 函数接受一个标准输入数据，返回为 string 类型。获取用户输入内容</p><p><strong>语法：</strong>input([prompt])</p><p><strong>参数：</strong>prompt: 提示信息</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"input:"</span><span class="token punctuation">)</span>input<span class="token punctuation">:</span><span class="token number">1234</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">123</span></code></pre><h2 id="35、int"><a href="#35、int" class="headerlink" title="35、int()"></a><strong>35、int()</strong></h2><blockquote><p><strong>描述：</strong>int() 函数用于将一个字符串或数字转换为整型。 x可能为字符串或数值，将x 转换为一个普通整数。如果参数是字符串，那么它可能包含符号和小数点。如果超出了普通整数的表示范围，一个长整数被返回。</p><p><strong>语法：</strong>int(x, base =10)</p><p><strong>参数：</strong></p><ul><li>x – 字符串或数字。</li><li>base – 进制数，默认十进制。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">int<span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token number">18</span>int<span class="token punctuation">(</span><span class="token string">'12'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token number">12</span></code></pre><h2 id="36、isinstance"><a href="#36、isinstance" class="headerlink" title="36、isinstance()"></a><strong>36、isinstance()</strong></h2><blockquote><p><strong>描述：</strong>isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()。</p><p>isinstance() 与 type() 区别：</p><p>type() 不会认为子类是一种父类类型，不考虑继承关系。</p><p>isinstance() 会认为子类是一种父类类型，考虑继承关系。</p><p>如果要判断两个类型是否相同推荐使用 isinstance()。</p><p> <strong>语法：</strong>isinstance(object, classinfo)</p><p><strong>参数：</strong></p><ul><li>object – 实例对象。</li><li>classinfo – 可以是直接或间接类名、基本类型或者由它们组成的元组。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">2</span>isinstance <span class="token punctuation">(</span>a<span class="token punctuation">,</span>int<span class="token punctuation">)</span><span class="token boolean">True</span>isinstance <span class="token punctuation">(</span>a<span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token boolean">False</span>isinstance <span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span>int<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#是元组中的一个返回 True</span><span class="token boolean">True</span></code></pre><h2 id="37、issubclass"><a href="#37、issubclass" class="headerlink" title="37、issubclass()"></a><strong>37、issubclass()</strong></h2><blockquote><p><strong>描述：**</strong>issubclass()** 方法用于判断参数 class 是否是类型参数 classinfo 的子类。如果class是classinfo类的子类，返回True：</p><p><strong>语法：</strong>issubclass(class, classinfo)</p><p><strong>参数：</strong></p><ul><li>class – 类。</li><li>classinfo – 类。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span>issubclass<span class="token punctuation">(</span>B<span class="token punctuation">,</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回 True</span></code></pre><h2 id="38、iter"><a href="#38、iter" class="headerlink" title="38、iter()"></a><strong>38、iter()</strong></h2><blockquote><p><strong>描述：**</strong>iter()** 函数用来生成迭代器。</p><p><strong>语法：</strong>iter(object[, sentinel])</p><p><strong>参数：</strong></p><ul><li>object – 支持迭代的集合对象。</li><li>sentinel – 如果传递了第二个参数，则参数 object 必须是一个可调用的对象（如，函数），此时，iter 创建了一个迭代器对象，每次调用这个迭代器对象的<strong>next</strong>()方法时，都会调用 object。返回一个可迭代对象, sentinel可省略，sentinel 理解为迭代对象的哨兵，一旦迭代到此元素，立即终止：</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>iter<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token operator">&lt;</span>list_iterator at <span class="token number">0xf8359e8</span><span class="token operator">></span><span class="token keyword">for</span> i <span class="token keyword">in</span> iter<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">3</span><span class="token number">5</span></code></pre><h2 id="39、len"><a href="#39、len" class="headerlink" title="39、len()"></a><strong>39、len()</strong></h2><blockquote><p><strong>描述：</strong>len() 函数返回对象（字符、列表、元组等）长度或项目个数。</p><p><strong>语法：</strong>len(s)</p><p><strong>参数：</strong>s – 对象。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#字典的长度</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span>len<span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token number">2</span><span class="token comment" spellcheck="true">#字符串长度</span>s<span class="token operator">=</span><span class="token string">'aasdf'</span>len<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token number">5</span><span class="token comment" spellcheck="true">#列表元素个数</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>len<span class="token punctuation">(</span>l<span class="token punctuation">)</span></code></pre><h2 id="40、list"><a href="#40、list" class="headerlink" title="40、list()"></a><strong>40、list()</strong></h2><blockquote><p><strong>描述：</strong>list() 函数创建列表或者用于将元组转换为列表。</p><p><strong>语法：</strong>list( tup )</p><p><strong>参数：</strong>tup – 要转换为列表的元组。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">atuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'xyz'</span><span class="token punctuation">,</span> <span class="token string">'zara'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">)</span>aList <span class="token operator">=</span> list<span class="token punctuation">(</span>atuple<span class="token punctuation">)</span>aList<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'xyz'</span><span class="token punctuation">,</span> <span class="token string">'zara'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">]</span></code></pre><h2 id="41、map"><a href="#41、map" class="headerlink" title="41、map()"></a><strong>41、map()</strong></h2><blockquote><p><strong>描述：</strong>map() 会根据提供的函数对指定序列做映射。返回一个将 function 应用于 iterable 中每一项并输出其结果的迭代器</p><p><strong>语法：</strong>map(function, iterable, …)</p><p><strong>参数：</strong></p><ul><li>function – 函数</li><li>iterable – 一个或多个序列</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 计算平方数</span>    <span class="token keyword">return</span> x <span class="token operator">**</span> <span class="token number">2</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>square<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 计算列表各个元素的平方</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用 lambda 匿名函数</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 提供了两个列表，对相同位置的列表数据进行相加</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span></code></pre><h2 id="42、max"><a href="#42、max" class="headerlink" title="42、max()"></a><strong>42、max()</strong></h2><blockquote><p><strong>描述：</strong>max() 方法返回给定参数的最大值，参数可以为序列。</p><p><strong>语法：</strong>max( x, y, z, …. )</p><p><strong>参数：</strong></p><ul><li>x – 数值表达式。</li><li>y – 数值表达式。</li><li>z – 数值表达式。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">最大值：max<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">4</span>di  <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'b1'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span>max<span class="token punctuation">(</span>di<span class="token punctuation">)</span><span class="token string">'c'</span></code></pre><h2 id="43、min"><a href="#43、min" class="headerlink" title="43、min()"></a><strong>43、min()</strong></h2><blockquote><p><strong>描述：</strong>min() 方法返回给定参数的最小值，参数可以为序列。</p><p><strong>语法：</strong>min( x, y, z, …. )</p><p><strong>参数：</strong></p><ul><li>x – 数值表达式。</li><li>y – 数值表达式。</li><li>z – 数值表达式。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">min<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token number">80</span>min<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">80</span></code></pre><h2 id="44、memoryview"><a href="#44、memoryview" class="headerlink" title="44、memoryview()"></a><strong>44、memoryview()</strong></h2><blockquote><p><strong>描述：**</strong>memoryview()** 函数返回给定参数的内存查看对象(Momory view)。返回由给定实参创建的“内存视图”对象， Python 代码访问一个对象的内部数据，只要该对象支持缓冲区协议 而无需进行拷贝</p><p><strong>语法：</strong>memoryview(obj)</p><p><strong>参数：</strong>obj – 对象</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">v <span class="token operator">=</span> memoryview<span class="token punctuation">(</span>bytearray<span class="token punctuation">(</span><span class="token string">"abcefg"</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token number">98</span>v<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token number">98</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>memory at <span class="token number">0x0000028B68E26AC8</span><span class="token operator">></span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tobytes<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token string">'bce'</span></code></pre><h2 id="45、next"><a href="#45、next" class="headerlink" title="45、next()"></a><strong>45、next()</strong></h2><blockquote><p><strong>描述：**</strong>next()** 返回迭代器的下一个项目。next() 函数要和生成迭代器的iter() 函数一起使用。</p><p><strong>语法：</strong>next(iterator[, default])</p><p><strong>参数：</strong></p><ul><li>iterator – 可迭代对象</li><li>default – 可选，用于设置在没有下一个元素时返回该默认值，如果不设置，又没有下一个元素则会触发 StopIteration 异常。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">it <span class="token operator">=</span> iter<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>next<span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token number">5</span>next<span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token number">3</span>next<span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token number">4</span></code></pre><h2 id="46、object"><a href="#46、object" class="headerlink" title="46、object()"></a><strong>46、object()</strong></h2><blockquote><p><strong>描述：</strong>Object类是Python中所有类的基类，如果定义一个类时没有指定继承哪个类，则默认继承object类。返回一个没有特征的新对象。object 是所有类的基类。</p><p><strong>语法：</strong>object()</p><p><strong>参数：无</strong></p><p><strong>案例：无</strong></p></blockquote><h2 id="47、open"><a href="#47、open" class="headerlink" title="47、open()"></a><strong>47、open()</strong></h2><blockquote><p><strong>描述：</strong>open() 函数用于打开一个文件，创建一个 <strong>file</strong> 对象，相关的方法才可以调用它进行读写。</p><p><strong>语法：</strong>open(name[, mode[, buffering]])</p><p><strong>参数：</strong></p><ul><li>name : 一个包含了你要访问的文件名称的字符串值。</li><li>mode : mode 决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</li><li>buffering : 如果 buffering 的值被设为 0，就不会有寄存。如果 buffering 的值取 1，访问文件时会寄存行。如果将 buffering 的值设为大于 1 的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。</li></ul></blockquote><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>rb</td><td>以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</td></tr><tr><td>r+</td><td>打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>rb+</td><td>以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>w</td><td>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>w+</td><td>打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td></tr><tr><td>a</td><td>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>ab</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr><tr><td>ab+</td><td>以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><blockquote><p><strong>file 对象方法</strong></p><p><strong>file.read([size])</strong>：size 未指定则返回整个文件，如果文件大小 &gt;2 倍内存则有问题，f.read()读到文件尾时返回””(空字串)。</p><p><strong>file.readline()</strong>：返回一行。</p><p><strong>file.readlines([size])</strong> ：返回包含size行的列表, size 未指定则返回全部行。</p><p><strong>for line in f: print（line ）</strong>：通过迭代器访问。</p><p><strong>f.write(“hello\n”)</strong>：如果要写入字符串以外的数据,先将他转换为字符串。</p><p><strong>f.tell()</strong>：返回一个整数,表示当前文件指针的位置(就是到文件头的比特数)。</p><p><strong>f.seek(偏移量,[起始位置])</strong>：用来移动文件指针。</p><ul><li>偏移量: 单位为比特，可正可负</li><li>起始位置: 0 - 文件头, 默认值; 1 - 当前位置; 2 - 文件尾</li></ul><p><strong>f.close()</strong> 关闭文件</p></blockquote><p><strong>案例：</strong></p><pre class=" language-python"><code class="language-python">f<span class="token operator">=</span>open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#打开文件</span>data<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#文件操作</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#关闭文件</span></code></pre><h2 id="48、pow"><a href="#48、pow" class="headerlink" title="48、pow()"></a><strong>48、pow()</strong></h2><blockquote><p><strong>描述：</strong>pow()方法返回 xy（x的y次方） 的值。函数是计算x的y次方，如果z在存在，则再对结果进行取模，其结果等效于pow(x,y) %z</p><p><strong>语法：</strong>pow(x, y[, z])</p><p><strong>参数：</strong></p><ul><li>x – 数值表达式。</li><li>y – 数值表达式。</li><li>z – 数值表达式。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">pow<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token number">100</span>pow<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token number">4</span>等价于<span class="token number">4</span><span class="token operator">**</span><span class="token number">3</span><span class="token operator">%</span><span class="token number">5</span> </code></pre><h2 id="49、print"><a href="#49、print" class="headerlink" title="49、print()"></a><strong>49、print()</strong></h2><blockquote><p><strong>描述：</strong>打印对象，此函数不解释</p><p><strong>语法：</strong></p><p><strong>参数：</strong></p><p><strong>案例：</strong></p></blockquote><h2 id="50、property"><a href="#50、property" class="headerlink" title="50、property()"></a><strong>50、property()</strong></h2><blockquote><p><strong>描述：**</strong>property()** 函数的作用是在新式类中返回属性值。</p><p><strong>语法：</strong>class property([fget[, fset[, fdel[, doc]]]])</p><p><strong>参数：</strong></p><ul><li>fget – 获取属性值的函数</li><li>fset – 设置属性值的函数</li><li>fdel – 删除属性值函数</li><li>doc – 属性描述信息</li></ul><p><strong>案例：</strong></p></blockquote><p>暂不解释</p><h2 id="51、range"><a href="#51、range" class="headerlink" title="51、range()"></a><strong>51、range()</strong></h2><blockquote><p><strong>描述：</strong>range() 函数可创建一个整数列表，一般用在 for 循环中。</p><p><strong>语法：</strong>range(start, stop[, step])</p><p><strong>参数：</strong></p><ul><li><p>start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</p></li><li><p>stop: 计数到 stop 结束，但不包括 stop。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</p></li><li><p>step：步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</p><p><strong>案例：</strong></p></li></ul></blockquote><pre class=" language-python"><code class="language-python">list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 从 1 开始到 11</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token number">0</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span></code></pre><h2 id="52、reversed"><a href="#52、reversed" class="headerlink" title="52、reversed()"></a><strong>52、reversed()</strong></h2><blockquote><p><strong>描述：</strong>reversed 函数返回一个反转的迭代器。</p><p><strong>语法：</strong>reversed(seq)</p><p><strong>参数：</strong>seq – 要转换的序列，可以是 tuple, string, list 或 range。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#反转列表</span>rev <span class="token operator">=</span> reversed<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>list<span class="token punctuation">(</span>rev<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> rev<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token number">1</span><span class="token number">3</span><span class="token number">2</span><span class="token number">4</span><span class="token number">1</span> <span class="token comment" spellcheck="true">#反转字符串</span>rev <span class="token operator">=</span> reversed<span class="token punctuation">(</span><span class="token string">'我爱中国'</span><span class="token punctuation">)</span>list<span class="token punctuation">(</span>rev<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'国'</span><span class="token punctuation">,</span> <span class="token string">'中'</span><span class="token punctuation">,</span> <span class="token string">'爱'</span><span class="token punctuation">,</span> <span class="token string">'我'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> rev<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>国中爱</code></pre><h2 id="53、round"><a href="#53、round" class="headerlink" title="53、round()"></a><strong>53、round()</strong></h2><blockquote><p><strong>描述：**</strong>round()** 函数返回浮点数x的四舍五入值。</p><p><strong>语法：</strong>round( x [, n]  )</p><p><strong>参数：</strong></p><ul><li>x – 数值表达式。</li><li>n –代表小数点后保留几位</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">round<span class="token punctuation">(</span><span class="token number">10.0222222</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token number">10.022</span></code></pre><h2 id="54、set"><a href="#54、set" class="headerlink" title="54、set()"></a><strong>54、set()</strong></h2><blockquote><p><strong>描述：**</strong>set()** 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。</p><p><strong>语法：</strong>class set([iterable])</p><p><strong>参数：</strong>iterable – 可迭代对象对象；</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#返回一个set对象，可实现去重：</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>set<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span></code></pre><h2 id="55、slice"><a href="#55、slice" class="headerlink" title="55、slice()"></a><strong>55、slice()</strong></h2><blockquote><p><strong>描述：**</strong>slice()** 函数实现切片对象，主要用在切片操作函数里的参数传递。返回一个表示由 range(start, stop, step) 所指定索引集的 slice对象</p><p><strong>语法：</strong></p><p>class slice(stop)</p><p>class slice(start, stop[, step])</p><p><strong>参数：</strong></p><ul><li>start – 起始位置</li><li>stop – 结束位置</li><li>step – 间距</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>a<span class="token punctuation">[</span>slice<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#等价于a[0:5:2]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><h2 id="56、sorted"><a href="#56、sorted" class="headerlink" title="56、sorted()"></a><strong>56、sorted()</strong></h2><blockquote><p><strong>描述：**</strong>sorted()** 函数对所有可迭代的对象进行排序操作。</p><p>sort 与 sorted 区别：</p><p>sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作；list 的 sort 方法返回的是对已经存在的列表进行操作，无返回值，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。</p><p><strong>语法：</strong>sorted(iterable,  key=None, reverse=False)#cmp 3.x已经没有了</p><p><strong>参数：</strong></p><ul><li>iterable – 可迭代对象。</li><li>key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li>reverse – 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>b <span class="token operator">=</span> sorted<span class="token punctuation">(</span>a<span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 保留原列表</span>a <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#利用key</span>L<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>sorted<span class="token punctuation">(</span>L<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#按年龄排序</span>students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'jane'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'dave'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>sorted<span class="token punctuation">(</span>students<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'dave'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'jane'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#按降序</span>sorted<span class="token punctuation">(</span>students<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'john'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'jane'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'dave'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#降序排列</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>sorted<span class="token punctuation">(</span>a<span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></code></pre><h2 id="57、staticmethod"><a href="#57、staticmethod" class="headerlink" title="57、staticmethod"></a><strong>57、staticmethod</strong></h2><blockquote><p><strong>描述：</strong>staticmethod 返回函数的静态方法。该方法不强制要求传递参数，如下声明一个静态方法：</p><p><strong>语法：</strong></p><p>class C(object):</p><p>  @staticmethod</p><p>  def f(arg1, arg2, …):</p><p>​    …</p><p>以上实例声明了静态方法 <strong>f</strong>，从而可以实现实例化使用 <strong>C().f()</strong>，当然也可以不实例化调用该方法 <strong>C.f()</strong>。</p><p><strong>参数：</strong>无</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'runoob'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>C<span class="token punctuation">.</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true"># 静态方法无需实例化</span>cobj <span class="token operator">=</span> C<span class="token punctuation">(</span><span class="token punctuation">)</span>cobj<span class="token punctuation">.</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 也可以实例化后调用</span></code></pre><h2 id="58-、str"><a href="#58-、str" class="headerlink" title="58 、str()"></a><strong>58 、str()</strong></h2><blockquote><p><strong>描述：</strong>返回一个 str版本的 object，str 是内置字符串 class</p><p><strong>语法：</strong>class str(object=’’)</p><p><strong>参数：</strong>object – 对象。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'runoob'</span><span class="token punctuation">:</span> <span class="token string">'runoob.com'</span><span class="token punctuation">,</span> <span class="token string">'google'</span><span class="token punctuation">:</span> <span class="token string">'google.com'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>str<span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token string">"{'google': 'google.com', 'runoob': 'runoob.com'}"</span></code></pre><h2 id="59、sum"><a href="#59、sum" class="headerlink" title="59、sum()"></a><strong>59、sum()</strong></h2><blockquote><p><strong>描述：**</strong>sum()** 方法对系列进行求和计算。</p><p><strong>语法：</strong>sum(iterable[, start])</p><p><strong>参数：</strong></p><ul><li>iterable – 可迭代对象，如：列表、元组、集合。</li><li>start – 指定相加的参数，如果没有设置这个值，默认为0。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>sum<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token number">11</span>sum<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#求和的初始值为10</span><span class="token number">21</span></code></pre><h2 id="60、super（）"><a href="#60、super（）" class="headerlink" title="60、super（）"></a><strong>60、super（）</strong></h2><blockquote><p><strong>描述：**</strong>super()** 函数是用于调用父类(超类)的一个方法。</p><p>super 是用来解决多重继承问题的，直接用类名调用父类方法在使用单继承的时候没问题，但是如果使用多继承，会涉及到查找顺序（MRO）、重复调用（钻石继承）等种种问题。</p><p>MRO 就是类的方法解析顺序表, 其实也就是继承父类方法时的顺序表。</p><p> <strong>语法：</strong>super(type[, object-or-type])</p><p> <strong>参数：</strong></p><ul><li><p>type – 类。</p></li><li><p>object-or-type – 类，一般是 self</p><p><strong>案例：</strong></p></li></ul></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>         y <span class="token operator">=</span> x<span class="token operator">+</span><span class="token number">1</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>x<span class="token punctuation">)</span>b <span class="token operator">=</span> B<span class="token punctuation">(</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span><span class="token number">3</span></code></pre><h2 id="61、tuple"><a href="#61、tuple" class="headerlink" title="61、tuple()"></a><strong>61、tuple()</strong></h2><blockquote><p><strong>描述：</strong> 元组 tuple() 函数将列表转换为元组。</p><p><strong>语法：</strong>tuple( iterable )</p><p><strong>参数：</strong>iterable – 要转换为元组的可迭代序列。</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">tuple<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>tuple<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#针对字典 会返回字典的key组成的tuple</span> <span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span></code></pre><h2 id="62、type"><a href="#62、type" class="headerlink" title="62、type()"></a><strong>62、type()</strong></h2><blockquote><p><strong>描述：</strong>type() 函数如果你只有第一个参数则返回对象的类型，三个参数返回新的类型对象。</p><p>isinstance() 与 type() 区别：</p><ul><li>type() 不会认为子类是一种父类类型，不考虑继承关系。</li><li>isinstance() 会认为子类是一种父类类型，考虑继承关系。</li></ul><p>如果要判断两个类型是否相同推荐使用 isinstance()。</p><p> <strong>语法：</strong></p><p>type(object)</p><p>type(name, bases, dict)</p><p> <strong>参数：</strong></p><ul><li>name – 类的名称。</li><li>bases – 基类的元组。</li><li>dict – 字典，类内定义的命名空间变量。</li></ul><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">type<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>listtype<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token string">'zero'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>dictx <span class="token operator">=</span> <span class="token number">1</span>          type<span class="token punctuation">(</span> x <span class="token punctuation">)</span> <span class="token operator">==</span> int    <span class="token comment" spellcheck="true"># 判断类型是否相等</span><span class="token boolean">True</span><span class="token comment" spellcheck="true"># 三个参数</span><span class="token keyword">class</span> <span class="token class-name">X</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">1</span>X <span class="token operator">=</span> type<span class="token punctuation">(</span><span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dict<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 产生一个新的类型 X</span>X __main_</code></pre><h2 id="63、zip"><a href="#63、zip" class="headerlink" title="63、zip()"></a><strong>63、zip()</strong></h2><blockquote><p><strong>描述：**</strong>zip()** 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。</p><p>我们可以使用 list() 转换来输出列表。</p><p>如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 ***** 号操作符，可以将元组解压为列表。</p><p><strong>语法：</strong>zip([iterable, …])</p><p><strong>参数：</strong>iterable 一个或多个迭代器</p><p><strong>案例：</strong></p></blockquote><pre class=" language-python"><code class="language-python">创建一个聚合了来自每个可迭代对象中的元素的迭代器：x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#搭配for循环，数字与字符串组合 </span>a <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>b <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token string">'abcde'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>str<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'a0'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'c2'</span><span class="token punctuation">,</span> <span class="token string">'d3'</span><span class="token punctuation">,</span> <span class="token string">'e4'</span><span class="token punctuation">]</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> zip<span class="token punctuation">(</span>list1<span class="token punctuation">,</span>list2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'--'</span><span class="token punctuation">,</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token number">2</span> <span class="token number">5</span> <span class="token operator">-</span><span class="token operator">-</span> <span class="token number">10</span><span class="token number">3</span> <span class="token number">6</span> <span class="token operator">-</span><span class="token operator">-</span> <span class="token number">18</span><span class="token number">4</span> <span class="token number">7</span> <span class="token operator">-</span><span class="token operator">-</span> <span class="token number">28</span><span class="token comment" spellcheck="true">#元素个数与最短的列表一致</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>x<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#与 zip 相反，zip(* ) 可理解为解压，返回二维矩阵式</span>a1<span class="token punctuation">,</span> a2 <span class="token operator">=</span> zip<span class="token punctuation">(</span><span class="token operator">*</span>zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>          a1<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>a2<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python知识 </tag>
            
            <tag> python函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浪淘沙·把酒祝东风</title>
      <link href="/posts/c1bc.html"/>
      <url>/posts/c1bc.html</url>
      
        <content type="html"><![CDATA[<h1 id="浪淘沙·把酒祝东风"><a href="#浪淘沙·把酒祝东风" class="headerlink" title="浪淘沙·把酒祝东风"></a>浪淘沙·把酒祝东风</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​            浪淘沙·把酒祝东风</p><p>​                                                                宋·欧阳修</p><p>把酒祝东风，且共从容。垂杨紫陌洛城东。总是当时携手处，游遍芳丛。<br>聚散苦匆匆，此恨无穷。今年花胜去年红。可惜明年花更好，知与谁同？    </p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><ul><li>端起酒杯向东风祈祷，请你再留些时日不要匆匆离去。洛阳城东郊外的小道已是柳枝满垂。大多是我们去年携手同游的地方，我们游遍了姹紫嫣红的花丛。</li><li>人生的欢聚与别离总是如此短暂，离别的怨恨久久激荡在我的心田。今年的花红胜过去年，明年的花儿肯定会更加美好，可惜不知那时将和谁一起游览？</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li><p>把酒：端着酒杯。</p></li><li><p>从容：留恋，不舍。</p></li><li><p>紫陌：紫路。洛阳曾是东周、东汉的都城，据说当时曾用紫色土</p><p>铺路，故名。此指洛阳的道路。洛城：指洛阳。</p></li><li><p>总是：大多是，都是。</p></li><li><p>匆匆：形容时间匆促。</p></li><li><p>“可惜”两句：杜甫《九日蓝田崔氏庄》诗：“明年此会知谁健，醉把茱萸仔细看。</p></li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><p>​        词作首先写道：“把酒祝东风，且共从容”。这两句源于司空图《酒泉子》中的“黄昏把酒祝东风，且从容”。然而，欧阳修在词中增加了一个“共”字，便有了新意。也就是说，“共从容”如果联系“把酒祝东风”来说，就是风与人而言的。首先，对东风（春风）来说，就是爱惜好东风，以此暗示了要留住美好的光景，以便游赏之意。其次，对人而来说，希望人们慢慢游赏，感受这难得的相聚，珍惜着美好的时光。词人接着写道：“垂杨紫陌洛城东。”“洛城东”指出了游览的地点。“紫陌”指京城郊外的道路。这里，词人描绘的景象是多么的温暖，词人走在京城郊外，暖风吹拂，翠柳飞舞，宜人的天气让人惬意。上片最后写道：“总是当时携手处，游遍芳丛。”</p><p>　　这两句中，特别要注意的是“当时”的含义。也就是说，它不仅暗示了词人对过去的回忆，也照应了下片说的“去年”，使“去年”有了落脚处。“芳丛”说明此游主要是赏花。意思是说，都是过去携手同游过的“芳丛”，今天仍要全都重游一遍。词人通过旧地重游来表现了对朋友的情感的深厚和珍惜。</p><p>　　下片是抒情。头两句就是重重的感叹。“聚散苦匆匆”，是说本来就很难聚会，而刚刚会面，又要匆匆作别，这怎么不给人带来无穷的怅恨呢！“此恨无穷”并不仅仅指作者本人而言，也就是说，在亲人朋友之间聚散匆匆这种怅恨，从古到今，以至今后，永远都没有穷尽，都给人带来莫大的痛苦。“黯然销魂者唯别而己矣！”（南朝梁江淹《别赋》）好友相逢，不能久聚，心情自然是非常难受的。这感叹就是对友人深情厚意的表现。下面三句是从眼前所见之景来抒写别情，也可以说是对上面的感叹的具体说明。</p><p>　　“今年花胜去年红”有两层意思。一是说今年的花比去年开得更加繁盛，看去更加鲜艳，当然希望同友人尽情观赏。说“花胜去年红”，足见作者去年曾同友人来观赏过此花，此与上片“当时”相呼应，这里包含着对过去的美好回忆；也说明此别已经一年，这次是久别重逢。聚会这么不容易，花又开得这么好，本来应当多多观赏，然而友人就要离去，怎能不使人痛惜？这句写的是鲜艳繁盛的景色，表现的却是感伤的心情，正是清代王夫之所说的“以乐景写哀”。</p><p>　　末两句更进一层：明年这花还将比今年开得更加繁盛，可惜的是，自己和友人分居两地，天各一方，明年此时，不知同谁再来共赏此花啊！再进一步说，明年自己也可能离开此地，更不知是谁来此赏花了。杜甫《九日蓝田崔氏庄》“明年此会知谁健，醉把茱萸仔细看”，立意与此词相近，可以合看，不过，杜诗意在伤老，此词则意在惜别。把别情熔铸于赏花中，将三年的花加以比较，层层推进，以惜花写惜别，构思新颖，富有诗意，是篇中的绝妙之笔。而别情之重，亦说明同友人的情宜之深。</p><p>　　清人冯煦谓欧阳修词“疏隽开子瞻（苏轼），深婉开少游（秦观）”（《宋六十家词选例言》）。此词笔致疏放，婉丽隽永，近人俞陛云的评价正说明它兼具这两方面的特色</p><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>此词为春日与友人在洛阳城东旧地同游有感而作。据词意，在写作此词的前一年春，友人亦曾同作者在洛城东同游。欧阳修在西京留守幕前后共三年，其间仅公元1032年（明道元年）春在洛阳，此词当即此年所作。词中同游之人或即梅尧臣。</p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>​       欧阳修（1007－1072），字永叔，号醉翁，晚号“六一居士”。汉族，吉州永丰（今江西省永丰县）人，因吉州原属庐陵郡，以“庐陵欧阳修”自居。谥号文忠，世称欧阳文忠公。北宋政治家、文学家、史学家，与韩愈、柳宗元、王安石、苏洵、苏轼、苏辙、曾巩合称“唐宋八大家”。后人又将其与韩愈、柳宗元和苏轼合称“千古文章四大家”</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPU，内核，寄存器，缓存，RAM，ROM的知识</title>
      <link href="/posts/f0d7.html"/>
      <url>/posts/f0d7.html</url>
      
        <content type="html"><![CDATA[<h1 id="CPU，内核，寄存器，缓存，RAM，ROM的知识"><a href="#CPU，内核，寄存器，缓存，RAM，ROM的知识" class="headerlink" title="CPU，内核，寄存器，缓存，RAM，ROM的知识"></a>CPU，内核，寄存器，缓存，RAM，ROM的知识</h1><h2 id="CPU："><a href="#CPU：" class="headerlink" title="CPU："></a>CPU：</h2><p>中央处理器（CPU，Central Processing Unit）是一块超大规模的集成电路，是一台计算机的运算核心（Core）和控制核心（ Control Unit）。它的功能主要是解释计算机指令以及处理计算机软件中的数据。</p><p>中央处理器主要包括运算器（算术逻辑运算单元，ALU，Arithmetic Logic Unit）和<strong>高速缓冲存储器</strong>（Cache）及实现它们之间联系的数据（Data）、控制及状态的总线（Bus）。它与<strong>内部存储器</strong>（Memory）和输入/输出（I/O）设备合称为电子计算机三大核心部件。</p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>CPU 是皇帝，那寄存器可以说是皇帝身边的小太监了，随叫随到，在所有人里面速度是最快的。</p><p>寄存器是中央处理器内的组成部份。它跟CPU有关。寄存器是有限存贮容量的高速存贮部件，它们可用来暂存指令、数据和位址。在中央处理器的控制部件中，包含的寄存器有指令寄存器(IR)和程序计数器(PC)。在中央处理器的算术及逻辑部件中，包含的寄存器有累加器(ACC)。</p><h2 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h2><p>存储器范围最大，它几乎涵盖了所有关于存储的范畴。你所说的寄存器，内存，都是存储器里面的一种。凡是有存储能力的硬件，都可以称之为存储器，这是自然，硬盘更加明显了，它归入外存储器行列，由此可见——。</p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>内存既专业名上的内存储器，它不是个什么神秘的东西，它也只是存储器中的沧海一粟，它包涵的范围也很大，一般分为<strong>只读存储器（ROM）</strong>和<strong>随机存储器（RAM）</strong>，以及最强悍的<strong>高速缓冲存储器（CACHE）</strong>，只读存储器应用广泛，它通常是一块在硬件上集成的可读芯片，作用是识别与控制硬件，它的特点是只可读取，不能写入。RAM <strong>随机存储器的特点是可读可写，断电后一切数据都消失，我们所说的内存条就是指它了。</strong></p><h2 id="缓存CACHE"><a href="#缓存CACHE" class="headerlink" title="缓存CACHE"></a>缓存CACHE</h2><p>皇帝想拿东西，如果太监没有，那从哪里拿最快？那就是丞相了，缓存还分一级缓存，二级缓存，三级缓存，你买电脑，这个参数可以用来比较一下。</p><p>缓存就是数据交换的缓冲区（称作Cache），当某一硬件要读取数据时，会首先从缓存中查找需要的数据，如果找到了则直接执行，找不到的话则从内存中找。由于缓存的运行速度比内存快得多，故缓存的作用就是帮助硬件更快地运行。</p><p>因为缓存往往使用的是RAM（断电即掉的非永久储存），所以在用完后还是会把文件送到硬盘等存储器里永久存储。电脑里最大的缓存就是内存条了，最快的是CPU上镶的 L1 和 L2 缓存，显卡的显存是给显卡运算芯片用的缓存，硬盘上也有16M或者32M的缓存。</p><p>CACHE 是在 CPU 中速度非常块，而容量却很小的一种存储器，它是计算机存储器中最强悍的存储器。由于技术限制，容量很难提升。</p><h2 id="ROM、RAM的区别："><a href="#ROM、RAM的区别：" class="headerlink" title="ROM、RAM的区别："></a>ROM、RAM的区别：</h2><p>ROM（只读存储器或者固化存储器）</p><p>RAM（随机存取存储器）</p><p>ROM和RAM指的都是半导体存储器，ROM是Read Only Memory的缩写，RAM是Random Access Memory的缩写。ROM在系统停止供电的时候仍然可以保持数据，而RAM通常都是在掉电之后就丢失数据，典型的</p><p>RAM就是计算机的内存。.</p><p>RAM有两大类，一种称为静态 RAM（Static RAM/SRAM），当数据被存入其中后不会消失。SRAM速度非常快，是目前读写最快的存储设备了。当这个SRAM 单元被赋予0 或者1 的状态之后，它会保持这个状态直到下次被赋予新的状态或者断电之后才会更改或者消失。但是存储1bit 的信息需要4-6 只晶体管。因此它也非常昂贵，所以只在要求很苛刻的地方使用，譬如CPU的一级缓冲，二级缓冲。另一种称为动态RAM（Dynamic RAM/DRAM），DRAM 必须在一定的时间内不停的刷新才能保持其中存储的数据。DRAM 只要1 只晶体管就可以实现。DRAM保留数据的时间很短，速度也比SRAM慢，不过它还是比任何的ROM都要快，但从价格上来说DRAM相比SRAM要便宜很 多，计算机内存就是DRAM的。</p><p>DRAM分为很多种，常见的主要有FPRAM/FastPage、EDORAM、SDRAM、DDR RAM、RDRAM、SGRAM以及WRAM等，这里介绍其中的一种DDR RAM。DDR RAM（Date-Rate RAM）也称作DDR SDRAM，这种改进型的RAM和SDRAM是基本一样的，不同之处在于它可以在一个时钟读写两次数据，这样就使得数据传输速度加倍了。这是目前电脑中用 得最多的内存，而且它有着成本优势，事实上击败了Intel的另外一种内存标准－Rambus DRAM。在很多高端的显卡上，也配备了高速DDR RAM来提高带宽，这可以大幅度提高3D加速卡的像素渲染能力。</p><p>ROM也有很多种，PROM是可编程的ROM，PROM和EPROM（可擦除可编程ROM）两者区别是，PROM是一次性的，也就是软件灌入后，就无法修 改了，这种是早期的产品，现在已经不可能使用了，而EPROM是通过紫外光的照射擦出原先的程序，是一种通用的存储器。另外一种EEPROM是通过电子擦出，价格很高，写入时间很长，写入很慢。</p><p>最初,把只能读的存储器叫做ROM(Read Only Memory),并且掉电后数据不会丢失。由于不能改写，因而使用起来很不方便。随着技术的进步，在ROM中使用一些新技术，就可以使它具有可以编程的功能。比较早的是熔丝型的可编程ROM，由于是通过熔断熔丝来编程的，所以这类ROM编程后，就不能再写了，是一次性的(OTP)。后来又出现了EPROM，是通过紫外线来擦除的，并且通过高压来编程，这类ROM上面一般有一个透明的石英玻璃窗，看上去挺漂亮的，它就是用来给紫外线照射的。后来又出现了EEPROM，不用紫外线照射就可以擦除，因而可以直接在电路中编程。另外还有FLASH ROM，又可分为NOR FLASH和NAND FLASH。FLASH ROM一般有一个特点，就是写数据时，可以将1改为0，而不能将0改为1，因而写数据前需要擦除，擦除时将所有数据置1。</p><p>之所以依然叫做ROM，归纳一下，大概有几个原因:</p><p>①不能像RAM那样快速的写；</p><p>②可能需要特殊的擦写电压；</p><p>③可能需要特殊的擦写时序；</p><p>④可能需要在写之前进行擦除操作；</p><p>⑤擦写次数有限,不像RAM那样可以随意写而不损坏；</p><p>⑥掉电后数据不会丢失；</p><p>⑦有些可写的存储器只能写一次(OTP)。</p><p>举个例子，手机软件一般放在EEPROM中，我们打电话，有些最后拨打的号码，暂时是存在SRAM中的，不是马上写入通过记录（通话记录保存在EEPROM中），因为当时有很重要工作（通话）要做，如果写入，漫长的等待是让用户忍无可忍的。</p><p>FLASH存储器又称闪存，它结合了ROM和RAM的长处，不仅具备电子可擦出可编程（EEPROM）的性能，还不会断电丢失数据同时可以快速读取数据 （NVRAM的优势），U盘和MP3里用的就是这种存储器。在过去的20年里，嵌入式系统一直使用ROM（EPROM）作为它们的存储设备，然而近年来 Flash全面代替了ROM（EPROM）在嵌入式系统中的地位，用作存储Bootloader以及操作系统或者程序代码或者直接当硬盘使用（U盘）。</p><p>目前 Flash 主要有两种 NOR Flash 和 NADN Flash。NOR Flash 的读取和我们常见的 SDRAM 的读取是一样，用户可以直接运行装载在NOR FLASH 里面的代码，这样可以减少 SRAM 的容量从而节约了成本。NAND Flash 没有采取内存的随机读取技术，它的读取是以一次读取一快的形式来进行的，通常是一次读取 512 个字节，采用这种技术的Flash比较廉价。用户 不能直接运行 NAND Flash 上的代码，因此好多使用NAND Flash 的开发板除了使用 NAND Flah 以外，还作上了一块小的NOR Flash 来运行启动代码。</p><p>一般小容量的用 NOR Flash，因为其读取速度快，多用来存储操作系统等重要信息，而大容量的用NAND FLASH，最常见的 NAND FLASH 应用是嵌入式系统采用的 DOC（Disk On Chip）和我们通常用的“闪盘”，可以在线擦除。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>游庐山宿栖贤寺</title>
      <link href="/posts/1467.html"/>
      <url>/posts/1467.html</url>
      
        <content type="html"><![CDATA[<h1 id="游庐山宿栖贤寺"><a href="#游庐山宿栖贤寺" class="headerlink" title="游庐山宿栖贤寺"></a>游庐山宿栖贤寺</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​            游庐山宿栖贤寺</p><p>​                                                                宋·王安国</p><p>古屋萧萧卧不周，弊裘起坐兴绸缪。<br>千山月午乾坤昼，一壑泉鸣风雨秋。<br>迹入尘中惭有累，心期物外欲何求！<br>明朝松路须惆怅，忍更无诗向此留。    </p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><ul><li>山风吹入，萧萧作响，卧寝不得周严，寒气就会侵入，坐起来披着破皮袄真想修补门窗。</li><li>午夜皓月当空，皎洁的月光照得世界恍如白昼，山谷中的泉水淅沥作响，仿佛秋天的风雨声。</li><li>很惭愧自己为尘世所累，心虽超然物外，又想干什么呢？</li><li>明天走在松荫路里，我肯定会惆怅的，怎么能没有诗作为留念呢。</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>萧萧：形容风声。</li><li>弊裘：破败的毛皮衣服。</li><li>月午：此指时至午夜。</li><li>乾坤：此指世界。</li><li>壑：山涧溪泉。</li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><blockquote><p>该篇是王安国游庐山夜宿栖贤寺感怀所作。庐山佛寺颇多，有五大丛林，栖贤寺是其中之一，为南齐参军张希之首建，屡经兴废，遗址在今三峡涧玉渊潭北。当时诗人踯躅庐山，独宿佛寺，古屋萧索，四顾寥落，顿起遗世独立之想。这首诗就抒写了作者登览庐山的洒脱襟怀和情趣。</p></blockquote><p>　　首联紧扣“宿栖贤寺”，以直叙入题，由于寺殿年久失修，故山风吹入，萧萧作响，而卧寝不得周严，寒气就会侵入。“弊裘”句由上文生出。因寝卧不宁，故而“弊裘起坐”，由“古屋萧萧”，而生“绸缪牖户”之想。“绸缪牖户”出自《诗经·豳风·鸱鸮》，意思是缠绕柴木，修补门窗。这一联切题叙事，且渲染出一种夜宿深山古寺的萧索阒静气氛。</p><p>　　由于中夜不眠，得以目睹深山夜景。次联集中笔力摹写庐山之夜。层峦叠嶂中，皓月当空，皎洁的清光，把整个大千世界变成了朗朗白昼；山谷间，泉水淙淙，仿佛为寂净的人间带来了风雨交加的萧瑟秋声。一句写山中月色，主要诉诸视觉；一句写山谷泉声，主要诉诸听觉。这里静景和动景互相配合，出色地构造了一个明净、透彻、幽寂、清寒的尘外世界，为人排解尘念、唤起遐思，布设了一种适宜的氛围。方虚谷说王安国诗“佳者不可胜算，而富于风月，此诗三四壮浪而清洒”（《瀛奎律髓》卷一），正指出这两句的独特气韵。</p><p>　　沉浸于如此境界中，诗人忘却俗念，烦恼顿消，于是脱口咏出“迹入尘中惭有累，心期物外欲何求”两句。“尘中”，犹言尘世、尘网，包括世俗社会和市井闹区。踪迹进入尘世，则会有俗务牵累、世事羁绊，着一“惭”字，表示了对世俗桎梏的不甘和不满。由此生出了“期”字，只消“心期物外”，就会无求无欲，身心恬然。物外即世外，《唐书·元德秀传》记载，元德秀“陶然遗身物外”，元氏以置身物外，求得精神超拔。诗人则是虽“迹入尘中”，却能“心期物外”，而达到泊然无求的境界，显得更为通达。两句一写形迹，一写心神，结构相对，内容相反，而意义上又有递进，连贯而下，对仗中具有气韵流动之美。</p><p>　　虽然“心期物外”，却也可“迹入尘中”，离开这宁静高洁的环境，诗人还是会有感慨，因而尾联有“须惆怅”之语。庐山长松林立，到后世仍然有“松树路”之名。天明登途，穿越松柏蔽空的山路，诗人更会惆怅不已。正是由于这个缘故，此时诗人留驻片刻，他才会写诗记叙此行。这两句，“须惆怅”一转，“忍更”再转，而以题诗留念收尾，很符合登览游记诗的旨趣，十分得体。“忍更”二字强调必须有诗，表达出对庐山清境的低徊依恋，颇有余音袅袅之致</p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>​       王安国（1028年-1074年）字平甫，王安石大弟。熙宁进士。北宋临川（今江西省东乡县上池村）人。北宋著名诗人。世称王安礼、王安国、王雱为“临川三王”。王安国器识磊落，文思敏捷，曾巩谓其“于书无所不通，其明于是非得失之理为尤详，其文闳富典重，其诗博而深。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一段python程序引发的问题</title>
      <link href="/posts/f007.html"/>
      <url>/posts/f007.html</url>
      
        <content type="html"><![CDATA[<h1 id="一段python程序引发的问题"><a href="#一段python程序引发的问题" class="headerlink" title="一段python程序引发的问题"></a>一段python程序引发的问题</h1><blockquote><p>先放代码。</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> randomplayer_list <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">'【狂血战士】'</span><span class="token punctuation">,</span><span class="token string">'【森林箭手】'</span><span class="token punctuation">,</span><span class="token string">'【光明骑士】'</span><span class="token punctuation">,</span><span class="token string">'【独行剑客】'</span><span class="token punctuation">,</span><span class="token string">'【格斗大师】'</span><span class="token punctuation">,</span><span class="token string">'【枪弹专家】'</span><span class="token punctuation">]</span>enemy_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'【暗黑战士】'</span><span class="token punctuation">,</span><span class="token string">'【黑暗弩手】'</span><span class="token punctuation">,</span><span class="token string">'【骷髅骑士】'</span><span class="token punctuation">,</span><span class="token string">'【嗜血刀客】'</span><span class="token punctuation">,</span><span class="token string">'【首席刺客】'</span><span class="token punctuation">,</span><span class="token string">'【陷阱之王】'</span><span class="token punctuation">]</span>players <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>player_list<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>enemies <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>enemy_list<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>player_info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>enemy_info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">born_role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        life <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">)</span>        attack <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> life<span class="token punctuation">,</span>attack <span class="token comment" spellcheck="true"># 返回一个元组</span><span class="token keyword">def</span> <span class="token function">show_role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        player_info<span class="token punctuation">[</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> born_role<span class="token punctuation">(</span><span class="token punctuation">)</span>        enemy_info<span class="token punctuation">[</span>enemies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> born_role<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----------------- 角色信息 -----------------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你的人物：'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{}  \n 血量：{}  \n 攻击：{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>player_info<span class="token punctuation">[</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>player_info<span class="token punctuation">[</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># time.sleep(2)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'----------------- 角色信息 -----------------'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'电脑敌方：'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'{} \n 血量：{}  \n 攻击：{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>enemies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>enemy_info<span class="token punctuation">[</span>enemies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemy_info<span class="token punctuation">[</span>enemies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># time.sleep(2)</span><span class="token keyword">def</span> <span class="token function">order_role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> players    order_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 新建字典，存储顺序</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        order <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'你想将 {} 放在第几个上场？(输入数字1~3)'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        order_dict<span class="token punctuation">[</span>order<span class="token punctuation">]</span> <span class="token operator">=</span> players<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        players<span class="token punctuation">.</span>append<span class="token punctuation">(</span>order_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n我方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'敌方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>enemies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    show_role<span class="token punctuation">(</span><span class="token punctuation">)</span>    order_role<span class="token punctuation">(</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>运行结果如下：</p></blockquote><p><img src="/medias/loading.gif" data-original="https://cdn.jsdelivr.net/gh/BATdalao/YING-imgs/articles/ty2.png" alt="ty2"></p><blockquote><p>主要分析这段代码：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">order_role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> players    order_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 新建字典，存储顺序</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        order <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'你想将 {} 放在第几个上场？(输入数字1~3)'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        order_dict<span class="token punctuation">[</span>order<span class="token punctuation">]</span> <span class="token operator">=</span> players<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        players<span class="token punctuation">.</span>append<span class="token punctuation">(</span>order_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n我方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'敌方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>enemies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="问题一：global的位置"><a href="#问题一：global的位置" class="headerlink" title="问题一：global的位置"></a>问题一：global的位置</h2><h3 id="1-问题阐述"><a href="#1-问题阐述" class="headerlink" title="1.问题阐述"></a>1.问题阐述</h3><blockquote><p>global players放到第一个循环后为什么会报错：SyntaxError: name ‘players’ is used prior to global declaration</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">order_role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    order_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 新建字典，存储顺序</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        order <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'你想将 {} 放在第几个上场？(输入数字1~3)'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        order_dict<span class="token punctuation">[</span>order<span class="token punctuation">]</span> <span class="token operator">=</span> players<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">global</span> players  <span class="token comment" spellcheck="true">#将global players放到第一个循环后</span>    players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        players<span class="token punctuation">.</span>append<span class="token punctuation">(</span>order_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n我方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'敌方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>enemies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2-知识点复查"><a href="#2-知识点复查" class="headerlink" title="2.知识点复查"></a>2.知识点复查</h3><blockquote><ul><li><p>在Python中，当引用一个变量的时候，对这个变量的搜索是按找本地作用域(Local)、嵌套作用域(Enclosing function locals)、全局作用域(Global)、内置作用域(builtins模块)的顺序来进行的，即所谓的LEGB规则。即python引用变量的顺序： 当前作用域局部变量-&gt;外层作用域变量-&gt;当前模块中的全局变量-&gt;python内置变量。最终在全局变量中找这个变量，如果找不到则抛出  UnboundLocalError 异常。</p></li><li><p>然而当在一个函数内部为一个变量赋值时，并不是按照上面所说LEGB规则来首先找到变量，之后为该变量赋值。在Python中，在函数中为一个变量赋值时，有下面这样一条规则:“当在函数中给一个变量名赋值是(而不是在一个表达式中对其进行引用)，<strong>Python总是创建或改变本地作用域的变量名，除非它已经在那个函数中被声明为全局变量.</strong> ”</p></li><li><p>Python 是弱类型语言，弱类型语言有两个典型特征。 1.<strong>变量无须声明即可直接赋值</strong>： 对一个不存在的变量赋值就相当于定义了一个新变量。 2.变量的数据类型可以动态改变：同一个变量可以一会儿被赋值为整数值， 一会儿被赋值为 字符串。Python 使用等号（＝）作为赋值运算符，例如 a = 20 就是一条赋值语句，这条语句用于将 20 装入变量 a 中一一这个过程就被称为赋值：将 20 赋值给变量 a。</p></li><li><p>在函数体中多条可执行语句之间有严格的执行顺序，排在函数体前面的语句总是先执行，排在 函数体后面的语句总是后执行。 </p></li><li><p>global关键字用来在函数或其他局部作用域中使用全局变量。</p><ul><li><p>如果不修改全局变量,只是引用全局变量，也可以不使用global关键字。</p></li><li><p>如果在局部要对全局变量修改，需要在局部也要先声明该全局变量。</p></li></ul></li></ul></blockquote><p><strong>下面探讨global修饰符的用法：</strong></p><h4 id="示例1："><a href="#示例1：" class="headerlink" title="示例1："></a>示例1：</h4><h5 id="第一种情况："><a href="#第一种情况：" class="headerlink" title="第一种情况："></a>第一种情况：</h5><ul><li>在模块层面定义的变量（无需global修饰），如果在函数中没有再定义同名变量，可以在函数中当做全局变量使用：</li></ul><pre class=" language-python"><code class="language-python">  a<span class="token operator">=</span><span class="token number">1</span>  <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  f<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#输出1和1</span></code></pre><h5 id="第二种情况："><a href="#第二种情况：" class="headerlink" title="第二种情况："></a>第二种情况：</h5><ul><li>但如果在函数中有再赋值/定义（因为python是弱类型语言，赋值语句和其定义变量的语句一样），则会产生引用了未定义变量的错误：</li></ul><pre class=" language-python"><code class="language-python">  a<span class="token operator">=</span><span class="token number">1</span>  <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>      a<span class="token operator">=</span><span class="token number">2</span>  f<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#输出错误：UnboundLocalError: local variable 'a' referenced before assignment</span></code></pre><ul><li>抛出的错误信息为：UnboundLocalError: local variable ‘a’ referenced before assignment。如果内部函数有引用外部函数的同名变量或者全局变量,并且对这个变量有修改.那么python会认为它是一个局部变量。</li></ul><h5 id="第三种情况："><a href="#第三种情况：" class="headerlink" title="第三种情况："></a>第三种情况：</h5><ul><li>而如果在函数中的定义在引用前使用，那么会正常运行但函数中的变量和模块中定义的全局变量不为同一个</li></ul><pre class=" language-python"><code class="language-python">  a<span class="token operator">=</span><span class="token number">1</span>  <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      a<span class="token operator">=</span><span class="token number">2</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  f<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#输出2和1</span></code></pre><ul><li>上述输出是2和1，也即f函数中print使用的是局部变量a，而最后一个print语句使用的全局a。</li></ul><h5 id="第四种情况："><a href="#第四种情况：" class="headerlink" title="第四种情况："></a>第四种情况：</h5><ul><li>那么我们会有疑问，如果我可能在函数使用某一变量后又对其进行修改（也即再赋值），怎么让函数里面使用的变量是模块层定义的那个全局变量而不是函数内部的局部变量呢？这时候global修饰符就派上用场了。</li></ul><pre class=" language-python"><code class="language-python">  a<span class="token operator">=</span><span class="token number">1</span>  <span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">global</span> a      <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>      a<span class="token operator">=</span><span class="token number">3</span>  f<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#输出1和3</span></code></pre><ul><li>在用global修饰符声明a是全局变量的a后（注意，global语句不允许同时进行赋值如global a=3是不允许的），输出是1和3，得到了我们想要的效果。<strong>此时使用global关键字对全局变量进行了重新赋值。</strong></li></ul><h5 id="第五种情况："><a href="#第五种情况：" class="headerlink" title="第五种情况："></a>第五种情况：</h5><pre class=" language-python"><code class="language-python">a<span class="token operator">=</span><span class="token number">1</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">global</span> a    a<span class="token operator">=</span><span class="token number">3</span>f<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#输出异常 SyntaxError: name 'a' is used prior to global declaration</span></code></pre><ul><li>变量a在全局声明之前就被使用。</li></ul><h4 id="示例2："><a href="#示例2：" class="headerlink" title="示例2："></a>示例2：</h4><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment" spellcheck="true">#定义了一个全局变量，（可以省略global关键字）</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#不修改，只是引用全局变量，不使用global关键字</span><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a        a <span class="token operator">+=</span><span class="token number">1</span>         <span class="token comment" spellcheck="true"># a +=1 即a=a+1 属于先调用后赋值</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#修改全局变量，需要使用global关键字</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>输出为0 1</li></ul><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">0</span>   <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># global a    #如果注释掉global</span>    a <span class="token operator">+=</span><span class="token number">1</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>输出为0  UnboundLocalError: local variable ‘a’ referenced before assignment，错误代码为 a +=1</p><p>在这个例子中设置的 a=0属于全局变量,而在函数内部中没有对 a 的定义。</p><p>根据 Python 访问局部变量和全局变量的规则：当搜索一个变量的时候，Python 先从局部作用域开始搜索，如果在局部作用域没有找到那个变量，那样 Python 就会在作用域范围逐层寻找。最终在全局变量中找这个变量，如果找不到则抛出  UnboundLocalError 异常。</p><p>但是，明明已经在全局变量中找到同名变量了，怎么还是报错？</p><p><strong>因为内部函数有引用外部函数的同名变量或者全局变量，并且对这个变量有修改的时候，此时 Python 会认为它是一个局部变量，而函数中并没有 a 的定义和赋值，所以报错。</strong></p></blockquote><h4 id="知识点归纳："><a href="#知识点归纳：" class="headerlink" title="知识点归纳："></a>知识点归纳：</h4><table><thead><tr><th align="center">变量在函数中使用情况</th><th>输出结果及处理方式</th><th>对应示例</th></tr></thead><tbody><tr><td align="center">只调用不赋值</td><td>函数内外均输出全局变量</td><td>示例1第一种情况</td></tr><tr><td align="center">只赋值不调用</td><td>一般不会这样做</td><td></td></tr><tr><td align="center">先赋值后调用</td><td>函数内输出局部变量，外输出全局变量</td><td>示例1第三种情况</td></tr><tr><td align="center">先调用后赋值</td><td>调用前加global，不加报错</td><td>示例1第二、四种情况；示例2</td></tr></tbody></table><h3 id="3-问题解决"><a href="#3-问题解决" class="headerlink" title="3.问题解决"></a>3.问题解决</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">order_role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> players  <span class="token comment" spellcheck="true">#global players放在第一处</span>    order_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 新建字典，存储顺序</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        order <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'你想将 {} 放在第几个上场？(输入数字1~3)'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        order_dict<span class="token punctuation">[</span>order<span class="token punctuation">]</span> <span class="token operator">=</span> players<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#global players放在第二处    </span>    players <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        players<span class="token punctuation">.</span>append<span class="token punctuation">(</span>order_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n我方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'敌方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>enemies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><p>与示例1的第四种情况类似。属于先调用后赋值，即在函数使用某一变量后又对其进行修改（也即再赋值）。第五行的players[i]调用的变量players,第七行给变量players再赋值。</p></li><li><p>global players放在第一处，正确。</p></li><li><p>global players放在第二处，这种情况下，程序会报 SyntaxError ，理由是 “name ‘players’ is used prior to global declaration”，即变量在全局声明之前就被使用。（同示例1的第五种情况）</p></li><li><p>如果一二两处均无global players。报错UnboundLocalError: local variable ‘players’ referenced before assignment。即局部变量在分配空间前被引用。（同示例1的第二种情况）这种就相当于在变量定义前就调用，当然会出错。</p><blockquote><p>综上：在函数内的变量(已在函数外有全局变量)：</p><ul><li>如果函数内没有对其进行再赋值，则采用全局变量；</li><li>如果函数内有对其进行再赋值，则采用局部变量。且再赋值一定要位于调用之前。否则会报错：UnboundLocalError: local variable ‘a’ referenced before assignment</li><li>如果函数内有全局变量的声明（global）,则在global之后、再赋值之前采用全局变量。global一定要位于调用之前，否则会报错：name ‘players’ is used prior to global declaration。</li></ul></blockquote></li></ul><h3 id="4-解决方案"><a href="#4-解决方案" class="headerlink" title="4.解决方案"></a>4.解决方案</h3><blockquote><p>这类问题基本上两个解决方案：</p><ul><li>一是添加或者改变global的位置</li><li>二是改变变量名称。使局部变量与全局变量不同。</li></ul></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">order_role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> players    order_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 新建字典，存储顺序</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        order <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'你想将 {} 放在第几个上场？(输入数字1~3)'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        order_dict<span class="token punctuation">[</span>order<span class="token punctuation">]</span> <span class="token operator">=</span> players<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    player <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#改局部变量players为player</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        player<span class="token punctuation">.</span>append<span class="token punctuation">(</span>order_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n我方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'敌方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>enemies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#可以正确运行</span></code></pre><h3 id="5-遗留问题"><a href="#5-遗留问题" class="headerlink" title="5.遗留问题"></a>5.遗留问题</h3><blockquote><p>还有没有解释的是两处：</p><ul><li><p>两种报错涉及的深层执行原理（数据结构和微机原理的层次）</p></li><li><p>下面这种改法里合并了局部变量和全局变量，列表内的元素发生了改变，却仍然可以不使用global,相当于示例1的第二种情况。这个问题还需要再从列表在内存里的存储等方面来思考下。</p></li></ul></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">order_role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#global players</span>    order_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 新建字典，存储顺序</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        order <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'你想将 {} 放在第几个上场？(输入数字1~3)'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>players<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        order_dict<span class="token punctuation">[</span>order<span class="token punctuation">]</span> <span class="token operator">=</span> players<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># global players</span>    <span class="token comment" spellcheck="true"># players = []</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># players.append(order_dict[i]) </span>        players<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> order_dict<span class="token punctuation">[</span>i<span class="token punctuation">]</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n我方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>players<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>players<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'敌方角色的出场顺序是：%s、%s、%s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>enemies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>enemies<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#可以正确运行</span></code></pre><h2 id="问题二：input"><a href="#问题二：input" class="headerlink" title="问题二：input"></a>问题二：input</h2><blockquote><ul><li>在 Python3.x 中 raw_input() 和 input() 进行了整合，去除了 raw_input( )，仅保留了input( )函数，其接收任意任性输入，将所有输入默认为字符串处理，并返回字符串类型。</li></ul></blockquote><p>input()以字符串的方式获取用户输入：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">4.5</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span>a <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"input:"</span><span class="token punctuation">)</span>input<span class="token punctuation">:</span><span class="token number">123</span>                  <span class="token comment" spellcheck="true"># 输入整数</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span>              <span class="token comment" spellcheck="true"># 字符串</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>Do you love python?<span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"input:"</span><span class="token punctuation">)</span>    input<span class="token punctuation">:</span>runoob              <span class="token comment" spellcheck="true"># 正确，字符串表达式</span><span class="token operator">>></span><span class="token operator">></span> type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span>             <span class="token comment" spellcheck="true"># 字符串</span></code></pre><p>输入的字符串可以通过运算符进行连接、复制等操作：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>abc<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">*</span> <span class="token number">3</span><span class="token string">'abcabcabc'</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">123</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">+</span> y<span class="token string">'abc123'</span></code></pre><p>但无法直接参与算术运算，需要先转换类型。比如使用int转换。如：</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">5</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">+</span> <span class="token number">5</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> must be str<span class="token punctuation">,</span> <span class="token operator">not</span> int<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">*</span> <span class="token number">5</span><span class="token string">'55555'</span><span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">*</span> yTraceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> can<span class="token string">'t multiply sequence by non-int of type '</span>str'</code></pre><h2 id="问题三：range"><a href="#问题三：range" class="headerlink" title="问题三：range"></a>问题三：range</h2><blockquote><p>概要：</p><ul><li><p>range左闭右开，range（5）等价于range（0， 5），range（0， 5）即[0, 1, 2, 3, 4]。</p></li><li><p>python的range() 函数可创建一个整数列表，一般用在 for 循环中。</p></li></ul></blockquote><h3 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h3><pre><code>range(start, stop[, step])</code></pre><p>参数说明：</p><ul><li>start: 计数从 start 开始。默认是从 0 开始。例如range（5）等价于range（0， 5）;</li><li>stop: 计数到 stop 结束，但不包括 stop。例如：range（0， 5） 是[0, 1, 2, 3, 4]没有5</li><li>step：步长，默认为1。例如：range（0， 5） 等价于 range(0, 5, 1)</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 从 0 开始到 10</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 从 1 开始到 11</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 步长为 5</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 步长为 3</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 负数</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#以下是 range 在 for 中的使用，循环出runoob 的每个字母:</span><span class="token operator">>></span><span class="token operator">></span>x <span class="token operator">=</span> <span class="token string">'runoob'</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> runoob<span class="token operator">>></span><span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客静态页面中嵌入Jupyter</title>
      <link href="/posts/ac56.html"/>
      <url>/posts/ac56.html</url>
      
        <content type="html"><![CDATA[<h2 id="个人博客静态页面中嵌入Jupyter"><a href="#个人博客静态页面中嵌入Jupyter" class="headerlink" title="个人博客静态页面中嵌入Jupyter"></a>个人博客静态页面中嵌入Jupyter</h2><blockquote><ul><li>以GPCP降水相关分析。示例代码：</li></ul></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://nbviewer.jupyter.org/github/royalosyin/Python-Practical-Application-on-Climate-Variability-Studies/blob/master/ex12-Analysis%20of%20Monthly%20GPCP%20precipitation.ipynb<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>570<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span></code></pre><blockquote><ul><li>效果如下</li></ul></blockquote><iframe src="https://nbviewer.jupyter.org/github/royalosyin/Python-Practical-Application-on-Climate-Variability-Studies/blob/master/ex12-Analysis%20of%20Monthly%20GPCP%20precipitation.ipynb" width="570" height="2000"></iframe>]]></content>
      
      
      <categories>
          
          <category> 工具安装/使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jupyter notebook </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法概括</title>
      <link href="/posts/2c49.html"/>
      <url>/posts/2c49.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="第一章：数据结构的"><a href="#第一章：数据结构的" class="headerlink" title="第一章：数据结构的"></a>第一章：数据结构的</h2><p>基本概念</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>在任何问题中，数据元素都不是孤立存在的，而是在它们之间存在着某种关系，这种数据元素相互之间的关系称为结构（Structure）。数据结构是相互之间存在一种或多种特定关系的数据元素的集合。数据结构包括三方面的内容：逻辑结构、存储结构和数据的运算。数据的逻辑结构和存储结构是密不可分的两个方面，一个算法的设计取决于所选定的逻辑结构，而算法的实现依赖于所采用的存储结构。<h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3></li><li>逻辑结构是指数据元素之间的逻辑关系，即从逻辑关系上描述数据。它与数据的存储无关，是独立于计算机的</li><li>数据的逻辑结构分为线性结构和非线性结构<ul><li>集合 结构中的数据元素之间除了“同属于一个集合”的关系外，别无其他关系。 类似于数学上的集合</li><li>线性结构 结构中的数据元素之间只存在一对一的关系。比如排队</li><li>树形结构 结构中的数据元素之间存在一对多的关系。比如家族族谱</li><li>图状结构或网状结构 结构中的数据元素之间存在多对多的关系。 比如地图<h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3></li></ul></li><li>存储结构是指数据结构在计算机中的表示（又称映像），也称物理结构。它包括数据元素的表示和关系的表示。数据的存储结构是逻辑结构用计算机语言的实现，它依赖于计算机语言。数据的存储结构主要有：顺序存储、链式存储、索引存储和散列存储。<ul><li>顺序存储：存储的物理位置相邻。（p.s. 物理位置即信息在计算机中的位置。）</li><li>链接存储：存储的物理位置未必相邻，通过记录相邻元素的物理位置来找到相邻元素。</li><li>索引存储：类似于目录，以后可以联系操作系统的文件系统章节来理解。</li><li>散列存储：通过关键字直接计算出元素的物理地址（以后详解）。<h3 id="算法的五个特征"><a href="#算法的五个特征" class="headerlink" title="算法的五个特征"></a>算法的五个特征</h3></li></ul></li><li>1，有穷性：有限步之后结束</li><li>2，确定性：不存在二义性，即没有歧义</li><li>3，可行性：比如受限于计算机的计算能力，有些算法虽然理论上可行，但实际上无法完成。</li><li>4，输入：能被计算机处理的各种类型数据，如数字，音频，图像等等。</li><li>5，输出：一至多个程序输出结果。<h3 id="算法的复杂度"><a href="#算法的复杂度" class="headerlink" title="算法的复杂度"></a>算法的复杂度</h3></li><li>时间复杂度：<ul><li>• 它用来衡量算法随着问题规模增大，算法执行时间增长的快慢；</li><li>• 是问题规模的函数：T(n)是时间规模函数 时间复杂度主要分析T(n)的数量级</li><li>• T(n)=O(f(n)) f(n)是算法中基本运算的频度 一般我们考虑最坏情况下的时间复杂度</li></ul></li><li>空间复杂度：<ul><li>• 它用来衡量算法随着问题规模增大，算法所需空间的快慢；</li><li>• 是问题规模的函数：S(n)=O(g(n)) ；算法所需空间的增长率和g(n)的增长率相同。<h3 id="概要-复杂度计算为重点"><a href="#概要-复杂度计算为重点" class="headerlink" title="概要: 复杂度计算为重点"></a>概要: 复杂度计算为重点</h3></li></ul></li><li>常用的时间复杂度大小关系：</li><li>复杂度如何计算<ul><li>时间复杂度计算（单个循环体）<ul><li>直接关注循环体的执行次数，设为k </li></ul></li><li>时间复杂度计算（多个循环体）<ul><li>两个运算规则：乘法规则，加法规则。<h2 id="第二章：线性表"><a href="#第二章：线性表" class="headerlink" title="第二章：线性表"></a>第二章：线性表</h2><h3 id="线性表的逻辑结构"><a href="#线性表的逻辑结构" class="headerlink" title="线性表的逻辑结构"></a>线性表的逻辑结构</h3></li></ul></li></ul></li><li>定义：线性表是具有相同数据类型的n（n≥0）个数据元素的有限序列。其中n为表长。当n=0时 线性表是一个空表</li><li>特点：线性表中第一个元素称为表头元素；最后一个元素称为表尾元素。<br>除第一个元素外，每个元素有且仅有一个直接前驱。<br>除最后一个元素外，每个元素有且仅有一个直接后继。<h3 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h3></li><li>线性表的顺序存储又称为顺序表。<br>它是用一组地址连续的存储单元（比如C语言里面的数组），依次存储线性表中的数据元素，从而使得逻<br>辑上相邻的两个元素在物理位置上也相邻。</li><li>建立顺序表的三个属性: </li></ul><p>1.存储空间的起始位置（数组名data）<br>2.顺序表最大存储容量（MaxSize）<br>3.顺序表当前的长度（length）</p><ul><li>其实数组还可以动态分配空间，存储数组的空间是在程序执行过程中通过动态存储分配语句分配</li><li>总结：<ul><li>1.顺序表最主要的特点是随机访问（C语言中基于数组），即通过首地址和元素序号可以在O(1)的时间内找到指定的元素。</li><li>2.顺序表的存储密度高，每个结点只存储数据元素。无需给表中元素花费空间建立它们之间的逻辑关系（因为物理位置相邻特性决定）</li><li>3.顺序表逻辑上相邻的元素物理上也相邻，所以插入和删除操作需要移动大量元素。<h3 id="顺序表的操作"><a href="#顺序表的操作" class="headerlink" title="顺序表的操作"></a>顺序表的操作</h3></li></ul></li><li>1.插入<ul><li>算法思路：<ul><li>1.判断i的值是否正确</li><li>2.判断表长是否超过数组长度</li><li>3.从后向前到第i个位置，分别将这些元素都向后移动一位</li><li>4.将该元素插入位置i 并修改表长</li></ul></li><li>代码</li><li>分析：<ul><li>最好情况：在表尾插入（即i=n+1），元素后移语句将不执行，时间复杂度为O(1)。</li><li>最坏情况：在表头插入（即i=1），元素后移语句将执行<br>n次，时间复杂度为O(n)。</li><li>平均情况：假设pi（pi=1/(n+1) ）是在第i个位置上插入<br>一个结点的概率，则在长度为n的线性表中插入一个结<br>点时所需移动结点的平均次数为</li></ul></li></ul></li><li>2.删除<ul><li>算法思路：<ul><li>1.判断i的值是否正确</li><li>2.取删除的元素</li><li>3.将被删元素后面的所有元素都依次向前移动一位</li><li>4.修改表长</li></ul></li><li>代码</li><li>分析<ul><li>最好情况：删除表尾元素（即i=n），无须移动元素，时间复杂度为O(1)。</li><li>最坏情况：删除表头元素（即i=1），需要移动除第一个元素外的所有元素，时间复杂度为O(n)。</li><li>平均情况：假设pi(pi=1/n)是删除第i个位置上结点的概率，则在长度为n的线性表中删除一个结点时所需移动结点的平均次数为<h3 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h3></li></ul></li></ul></li><li>线性表的链式存储是指通过一组任意的存储单元来存储线性表中的数据元素。</li><li>头结点和头指针的区别？<ul><li>不管带不带头结点，头指针始终指向链表的第一个结点，而头结点是带头结点链表中的第一个结点，结点内通常不存储信息</li></ul></li><li>为什么要设置头结点？<ul><li>1.处理操作起来方便 例如：对在第一元素结点前插入结点和删除第一结点起操作与其它结点的操作就统一了</li><li>2.无论链表是否为空，其头指针是指向头结点的非空指针，因此空表和非空表的处理也就统一了。<h3 id="单链表的操作"><a href="#单链表的操作" class="headerlink" title="单链表的操作"></a>单链表的操作</h3></li></ul></li><li>1.头插法建立单链表：<ul><li>建立新的结点分配内存空间，将新结点插入到当前链表的表头</li><li>代码</li></ul></li><li>2.尾插法建立单链表：<ul><li>建立新的结点分配内存空间，将新结点插入到当前链表的表尾</li><li>代码</li></ul></li><li>3.按序号查找结点<ul><li>在单链表中从第一个结点出发，顺指针next域逐个往下搜索，直到找到第i个结点为止,否则返回最后一个结点指针域NULL。</li><li>代码</li></ul></li><li>4.按值查找结点<ul><li>从单链表第一个结点开始，由前往后依次比较表中各结点数据域的值，若某结点数据域的值等于给定值e，则返回该结点的指针；若整个单链表中没有这样的结点，则返回NULL。</li><li>代码</li></ul></li><li>5．插入<ul><li>插入操作是将值为x的新结点插入到单链表的第i个位置上。先检查插入位置的合法性，然后找到待插入位置的前驱结点，即第i−1个结点，再在其后插入新结点。</li><li>算法思路：</li></ul></li></ul><p>1.取指向插入位置的前驱结点的指针<br>① p=GetElem(L,i-1);<br>2.令新结点<em>s的指针域指向</em>p的后继结点<br>② s-&gt;next=p-&gt;next;<br>3.令结点<em>p的指针域指向新插入的结点</em>s<br>③ p-&gt;next=s; </p><ul><li>6．删除<ul><li>删除操作是将单链表的第i个结点删除。先检查删除位置的合法性，然后查找表中第i−1个结点，即被删结点的前驱结点，再将其删除。</li><li>算法思路：</li></ul></li></ul><p>1.取指向删除位置的前驱结点的指针 p=GetElem(L,i-1);<br>2.取指向删除位置的指针 q=p-&gt;next;<br>3.p指向结点的后继指向被删除结点的后继 p-&gt;next=q-&gt;next<br>4.释放删除结点 free(q);</p><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><ul><li>定义</li><li>1.插入：(方法不唯一)<br>① s-&gt;next=p-&gt;next;<br>② p-&gt;next-&gt;prior=s;<br>③ s-&gt;prior=p;<br>④ p-&gt;next=s;</li><li>2.删除：<br>① p-&gt;next=q-&gt;next;<br>② q-&gt;next-&gt;prior=p;<br>③ free(q);</li></ul><h3 id="循环链表-amp-amp-静态链表"><a href="#循环链表-amp-amp-静态链表" class="headerlink" title="循环链表&amp;&amp;静态链表"></a>循环链表&amp;&amp;静态链表</h3><ul><li>循环单链表：循环单链表和单链表的区别在于，表中最后一个结点的指针不是NULL，而改为指向头结点，从而整个链表形成一个环</li><li>循环双链表：类比循环单链表，循环双链表链表区别于双链表就是首尾结点构成环<ul><li>当循环双链表为空表时，其头结点的prior域和next域都等于Head。</li></ul></li><li>静态链表：静态链表是用数组来描述线性表的链式存储结构。<ul><li>数组第一个元素不存储数据，它的指针域存储第一个元素所在的数组下标。链表最后一个元素的指针域值为-1。</li><li>例子<h2 id="第三章：栈和队列"><a href="#第三章：栈和队列" class="headerlink" title="第三章：栈和队列"></a>第三章：栈和队列</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3></li></ul></li><li>栈（Stack）：只允许在一端进行插入或删除操作的线性表。</li><li>栈顶（Top）：线性表允许进行插入和删除的那一端。</li><li>栈底（Bottom）：固定的，不允许进行插入和删除的另一端</li><li>特点：</li></ul><p>1.栈是受限的线性表，所以自然具有线性关<br>系。<br>2.栈中元素后进去的必然先出来，即后进先出<br>LIFO（Last In First Out）<br>    * 栈中元素后进<br>去的必然先出<br>来，即后进先<br>出LIFO（Last In<br>First Out）</p><ul><li>顺序栈<ul><li>栈是线性表的特例，那栈的顺序存储也是线性表顺序存储的简化。栈的顺序存储结构也叫作顺序栈。</li><li>顺序栈的操作<ul><li>1.判空：</li><li>2.进栈：</li><li>3.出栈：</li><li>4.读取栈顶元素：</li></ul></li></ul></li><li>共享栈<ul><li>顺序栈的存储空间大小需要事先开辟好，很多时候对每个栈各自单独开辟存储空间的利用率不如将各个栈的存储空间共享</li><li>示意图</li><li>共享栈的结构</li><li>共享栈的操作：（进栈）</li></ul></li><li>链式栈<ul><li>栈是线性表的特例，线性表的存储结构还有链式存储结构，所以也可以用链表的方式来实现栈。栈的链式存储结构也叫作链栈。</li><li>特点</li></ul></li></ul><p>1.链栈一般不存在栈满的情况。<br>2.空栈的判定条件通常定为top==NULL；<br>    * 结构<br>    * 链式栈的操作<br>        * 1.进栈<br>        * 2.出栈</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><ul><li><p>队列是只允许在一端进行插入，而在另一端进行删除的线性表</p></li><li><p>队头（Front）：允许删除的一端，又称为队首。</p></li><li><p>队尾（Rear）： 允许插入的一端。</p></li><li><p>先进入队列的元素必然先离开队列，即先进先出（First In First Out）简称FIFO</p></li><li><p>顺序队列</p><ul><li>用数组来实现队列，可以将队首放在数组下标为0的位置。</li></ul></li><li><p>循环队列</p><ul><li>把数组“掰弯”，形成一个环。Rear指针到了下标为4的位置还能继续指回到下标为0的地方。这样首尾相连的顺序存储的队列就叫循环队列</li><li>入队：rear=(rear+1)%MaxSize</li><li>出队：front=(front+1)%MaxSize</li><li>循环队列的操作<ul><li>1.入队：</li><li>2.出队：</li></ul></li><li>概要: 那如何分辨队列是空还是满呢？<ul><li>方法一：设置标志位flag，当flag=0且rear等于front时为队列空，当flag=1且rear等于front时为队列满。</li><li>方法二：我们把front=rear仅作为队空的判定条件。当队列满的时候，令数组中仍然保留一个空余单元。我们认为这种情况就是队列满了。</li></ul></li></ul></li><li><p>链式队列</p><ul><li><p>队列的链式存储结构，其实就是线性表的单链表，只不过需要加点限制，只能表尾插入元素，表头删除元素。</p></li><li><p>为了方便操作，我们分别设置队头指针和队尾指针，队头指针指向头结点，队尾指针指向尾结点。</p></li><li><p>链式队列的操作</p><ul><li><p>1.入队：我们知道队列只能从队尾插入元素，队头删除元素。于是入队就是在队尾指针进行插入结点操作。链队的插入操作和单链表的插入操作是一致的。</p></li><li><p>2.出队：出队就是头结点的后继结点出队，然后将头结点的后继改为它后面的结点。</p></li></ul></li></ul></li><li><p>双端队列</p><ul><li>双端队列是指允许两端都可以进行入队和出队操作的队列<h3 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h3></li></ul></li><li><p>1、括号匹配：假设有两种括号，一种圆的()，一种方的[]，嵌套的顺序是任意的。</p><ul><li><p>算法思想：若是左括号，入栈；若是右括号，出栈一个左括号判断是否与之匹配；检验到字符串尾，还要检查栈是否为空。只有栈空，整个字符串才是括号匹配的。</p></li><li><p>代码</p></li></ul></li><li><p>2、表达式求值：</p><ul><li></li><li>规则：从左到右扫描表达式的每个数字和符号，遇到数字就进栈，遇到符号就将处于栈顶的两个数字出栈然后跟这个符号进行运算，最后将运算结果进栈，直到最终获得结果。</li></ul></li><li><p>3、递归：</p><ul><li>要理解递归，你要先理解递归，直到你能理解递归。<br>如果在一个函数、过程或数据结构的定义中又应用了它自身，那么这个函数、过程或数据结构称为是递归定义的，简称递归。递归最重要的是递归式和递归边界。</li><li>1.阶乘<ul><li>时间复杂度：O(NlogN)</li></ul></li><li>2.斐波那契数列<ul><li>时间复杂度   O(2^n)</li></ul></li></ul></li><li><p>概要: 如何将中缀表达式转换成后缀表达式？</p><ul><li>1.按运算符优先级对所有运算符和它的运算数加括号。(原本的括号不用加)</li><li>2.把运算符移到对应的括号后。</li><li>3.去掉括号。</li><li>例子<h2 id="第四章：树"><a href="#第四章：树" class="headerlink" title="第四章：树"></a>第四章：树</h2><h3 id="树的基本概念"><a href="#树的基本概念" class="headerlink" title="树的基本概念"></a>树的基本概念</h3></li></ul></li><li><p>树是递归定义的结构</p></li><li><p>结点</p><ul><li>根节点：树只有一个根结点</li><li>结点的度：结点拥有的子树的数量<ul><li>度为0：叶子结点或者终端结点</li><li>度不为0：分支结点或者非终端结点<ul><li>分支结点除去根结点也称为内部结点</li></ul></li></ul></li></ul></li><li><p>树的度：树中所有结点的度数的最大值</p></li><li><p>结点关系</p><ul><li>祖先结点<ul><li>根结点到该结点的唯一路径的任意结点</li></ul></li><li>子孙结点</li><li>双亲结点<ul><li>根结点到该结点的唯一路径上最接近该结点的结点</li></ul></li><li>孩子结点</li><li>兄弟结点<ul><li>有相同双亲结点的结点</li></ul></li></ul></li><li><p>层次，高度，深度，树的高度</p><ul><li>层次：根为第一层，它的孩子为第二层，以此类推</li><li>结点的深度：根结点开始自顶向下累加</li><li>结点的高度：叶节点开始自底向上累加</li><li>树的高度（深度）：树中结点的最大层数</li></ul></li><li><p>树的性质</p><ul><li>1.树中的结点数等于所有结点的度数加1。<ul><li>证明：不难想象，除根结点以外，每个结点有且仅有一个指向它的前驱结点。也就是说每个结点和指向它的分支一一对应。<br>假设树中一共有b个分支，那么除了根结点，整个树就包含有b个结点，所以整个树的结点数就是这b个结点加上根结点，设为n，则n=b+1。而分支数b也就是所有结点的度数，证毕。</li></ul></li><li>2.度为m的树中第i层上至多有m^(i−1)个结点（i≥1）。<ul><li>证明：（数学归纳法）<br>首先考虑i=1的情况：第一层只有根结点，即一个结点，i=1带入式子满足。<br>假设第i-1层满足这个性质，第i-1层最多有m i-2个结点。<br>……… ……….<br>i-1层<br>………<br>又因为树的度为m,所以对于第i-1层的每个结点，最多<br>有m个孩子结点。所以第i层的结点数最多是i-1层的m<br>倍，所以第i层上最多有m ^(i-1)个结点。</li></ul></li><li>3.高度为h的m叉树至多有(m^h-1)/(m-1)个结点</li><li>4.具有n个结点的m叉树的最小高度为logm(n(m-1)+1) <h3 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h3></li></ul></li><li><p>顺序存储结构</p><ul><li>双亲表示法：用一组连续的存储空间存储树的结点，同时在每个结点中，用一个变量存储该结点的双亲结点在数组中的位置。</li></ul></li><li><p>链式存储结构</p><ul><li><p>孩子表示法：把每个结点的孩子结点排列起来存储成一个单链表。所以n个结点就有n个链表；<br>如果是叶子结点，那这个结点的孩子单链表就是空的；<br>然后n个单链表的的头指针又存储在一个顺序表（数组）中。</p></li><li><p>孩子兄弟表示法：顾名思义就是要存储孩子和孩子结点的兄弟，具体来说，就是设置两个指针，分别指向该结<br>点的第一个孩子结点和这个孩子结点的右兄弟结点。</p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3></li></ul></li><li><p>定义</p><ul><li>二叉树是n（n≥0）个结点的有限集合：<br>① 或者为空二叉树，即n=0。<br>② 或者由一个根结点和两个互不相交的被称为根的左子树<br>和右子树组成。左子树和右子树又分别是一棵二叉树。 <ul><li>1.每个结点最多有两棵子树。</li><li>2.左右子树有顺序</li></ul></li></ul></li><li><p>二叉树的五种基本形态：</p><ul><li>1.空树</li><li>2.只有一个根结点</li><li>3.根结点只有左子树</li><li>4.根结点只有右子树</li><li>5.根结点既有左子树又有右子树</li></ul></li><li><p>特殊二叉树</p><ul><li>1.斜树</li><li>2.满二叉树:</li><li>3.完全二叉树</li></ul></li><li><p>二叉树的性质</p><ul><li>1.非空二叉树上叶子结点数等于度为2的结点数加1</li><li>2.非空二叉树上第K层上至多有2^k−1个结点（K≥1）</li><li>3.高度为H的二叉树至多有2^H-1个结点（H≥1）</li><li>4.具有N个（N&gt;0）结点的完全二叉树的高度为 [log2(N+1)]或[log2N] +1。<h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3></li></ul></li><li><p>顺序存储</p><ul><li>二叉树的顺序存储结构就是用一组地址连续的存储单元依次自上而下、自左至右存储完全二叉树上的结点元素。</li></ul></li><li><p>链式存储</p><ul><li>二叉树每个结点最多两个孩子，所以设计二叉树的结点结构时考虑两个指针指向该结点的两个孩子。<h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3></li></ul></li><li><p>先序遍历：<br>1）访问根结点；<br>2）先序遍历左子树；<br>3）先序遍历右子树。</p><ul><li>递归</li><li>非递归</li></ul></li><li><p>中序遍历：<br>1）中序遍历左子树；<br>2）访问根结点；<br>3）中序遍历右子树。</p><ul><li>递归</li><li>非递归</li></ul></li><li><p>后序遍历：<br>1）后序遍历左子树；<br>2）后序遍历右子树；<br>3）访问根结点。</p><ul><li>递归</li><li>非递归</li></ul></li><li><p>层次遍历：<br>若树为空，则什么都不做直接返回。<br>否则从树的第一层开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序对结点逐个访问。</p></li></ul><h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><ul><li><p>N个结点的二叉链表，每个结点都有指向左右孩子的<br>结点指针，所以一共有2N个指针，而N个结点的二叉<br>树一共有N-1条分支，也就是说存在2N-(N-1)=N+1个空指针。比如左图二叉树中有6个结点，那么就有7个空<br>指针。</p></li><li><p>大量的空余指针能否利用起来？</p><ul><li>指向前驱和后继的指针称为线索，加上线索的二叉链表就称为线索链表，相应的二叉树就称为线索二叉树</li><li>对二叉树以某种次序遍历使其变为线索二叉树的过程就叫做线索化<h3 id="哈夫曼树和哈夫曼编码"><a href="#哈夫曼树和哈夫曼编码" class="headerlink" title="哈夫曼树和哈夫曼编码"></a>哈夫曼树和哈夫曼编码</h3></li></ul></li><li><p>算法的描述如下：<br>1）将这N个结点分别作为N棵仅含一个结点的二叉树，构成森林F。<br>2）构造一个新结点，并从F中选取两棵根结点权值最小的树作为新结点的左、右子树，并且将新结点的权值<br>置为左、右子树上根结点的权值之和。<br>3）从F中删除刚才选出的两棵树，同时将新得到的树加入F中。<br>4）重复步骤2）和3），直至F中只剩下一棵树为止。</p></li></ul><h2 id="第五章：图"><a href="#第五章：图" class="headerlink" title="第五章：图"></a>第五章：图</h2><h3 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h3><ul><li>定义：<br>树是N（N≥0）个结点的有限集合，N=0时，称为空树，这是一种特殊情况。在任意一棵非空树中应满足：<br>1）有且仅有一个特定的称为根的结点。<br>2）当N&gt;1时，其余结点可分为m（m&gt;0）个互不相交的有限集合T1，T2，…，Tm，其中每一个集合本身又是一棵树，并且称为根结点的子树。<ul><li>图G由顶点集V和边集E组成，记为G=(V，E)<ul><li>V(G)表示图G中顶点的有限非空集。<br>用|V|表示图G中顶点的个数，也称为图G的阶</li><li>E(G)表示图G中顶点之间的关系（边）集合。<br>用|E|表示图G中边的条数。</li></ul></li></ul></li><li>分类<ul><li>有向图<ul><li>有向边（弧）的有限集合<ul><li>弧是顶点的有序对</li><li>&lt;v,w&gt;</li><li>v是弧尾，w是弧头</li><li>v邻接到w或w邻接自v</li></ul></li></ul></li><li>无向图<ul><li>无向边的有限集合<ul><li>边是顶点的无序对</li><li>（v,w）</li><li>（v,w）=(w,v)</li><li>w，v互为邻接点</li></ul></li></ul></li></ul></li><li>简单图<ul><li>1.不存在顶点到自身的边</li><li>2.同一条边不重复出现</li></ul></li><li>多重图<ul><li>若图G中某两个结点之间的边数多于一条，又允许顶点通过通过同一个边和自己关联</li></ul></li><li>完全图<ul><li>无向完全图<ul><li>如果任意两个顶点之间都存在边</li></ul></li><li>有向完全图<ul><li>如果任意两个顶点之间都存在方向相反的两条弧</li></ul></li></ul></li><li>子图</li><li>连通图：图中任意两个顶点都是连通的</li><li>连通分量：无向图中的极大连通子图<ul><li>连通<ul><li>顶点A到顶点B有路径</li></ul></li><li>极大<ul><li>1.顶点足够多</li><li>2.极大连通子图包含这些依附这些顶点的所有边</li></ul></li><li>结论1:如果一个图有n个顶点，并且有小于n-1条边，则此图必是非连通图。</li><li>概要: 找连通分量的方法：<br>从选取一个顶点开始，以这个顶点作为一个子图，然后逐个添加与这个子图相连的顶点和边直到所有相连的顶点都加入该子图</li></ul></li><li>强连通：顶点V到顶点W和顶点W到顶点V都有路径</li><li>强连通图：图中任一对顶点都是强连通的</li><li>连通图的生成树：包含图中全部n个顶点，但是只有n-1条边的极小连通子图<ul><li>结论2:生成树去掉一条边则变成非连通图，加上一条边就会形成回路。</li></ul></li><li>度：以该顶点为一个端点的边数目<ul><li>无向图中顶点V的度是指依附于该顶点的边的条数，记为TD(v)</li><li>有向图中顶点V的度分为出度和入度<ul><li>入度（ID）是以顶点v为终点的有向边的数目</li><li>出度（OD）是以顶点V为起点的有向边的数目</li></ul></li></ul></li><li>简单路径和简单回路：顶点不重复出现的路径称为简单路径。对于回路，除了第一个和最后一个顶点其余顶点不重复出现的回路称为简单回路</li><li>权和网：图中每条边考研赋予一定意义的数值，这个数值叫做这条边的权，有权值得图称为带权图，也叫做网</li><li>路径和路径长度：顶点p到q之间的路径是指顶点序列怕保存的，p,a,b,c,d,……q。路径上边的数目就是路径长度</li><li>回路（环）：第一个和最后一个顶点相同的路径称为回路或者环</li><li>距离：从顶点u到v的最短路径长度。不存在路径则为无穷<h3 id="图的存储结构"><a href="#图的存储结构" class="headerlink" title="图的存储结构"></a>图的存储结构</h3></li><li>邻接矩阵（顺序存储）</li><li>邻接表（链式存储）<ul><li>十字链表（有向图）</li><li>邻接多重表（无向图）<h3 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h3></li></ul></li><li>深度优先遍历<ul><li>深度优先搜索(DFS:Depth-First-Search):深度优先搜索类似于树的先序遍历算法<ul><li>空间复杂度：由于DFS是一个递归算法，递归是需要一个工作栈来辅助工作，最多需要图中所有顶点进栈，所以时间复杂度为O(|V|)</li><li>时间复杂度：1)邻接表：遍历过程的主要操作是对顶点遍历它的邻接点，由于通过访问边表来查找邻接点，所以时间复杂度为O(|E|),访问顶点时间为O(|V|),所以总的时间复杂度为O(|V|+|E|)<pre><code>        2)邻接矩阵：查找每个顶点的邻接点时间复杂度为O(|V|),对每个顶点都进行查找，所以总的时间复杂度为O(|V|2)</code></pre></li></ul></li></ul></li><li>广度优先遍历<ul><li>广度优先搜索(BFS:Breadth-First-Search):广度优先搜索类似于树的层序遍历算法<ul><li>空间复杂度：BFS需要借助一个队列，n个顶点均需要入队一次，所以最坏情况下n个顶点在队列，那么则需要O(|V|)的空间复杂度。    </li><li>时间复杂度：<br>1)邻接表：每个顶点入队一次，时间复杂度为O(|V|),对于每个顶点，搜索它的邻接点，就需要访问这个顶点的所有边，所以时间复杂度为O(|E|)。所以总的时间复杂度为O(|V|+|E|)<br>2)邻接矩阵：每个顶点入队一次，时间复杂度为O(|V|),对于每个顶点，搜索它的邻接点，需要遍历一遍矩阵的一行，所以时间复杂度为O(|V|),所以总的时间复杂度为O(|V|2)</li></ul></li></ul></li></ul><h3 id="图的应用"><a href="#图的应用" class="headerlink" title="图的应用"></a>图的应用</h3><ul><li>最小生成树<ul><li>普利姆（Prlm）<ul><li>①从图中找第一个起始顶点v0，作为生成树的第一个顶点，然后从这个顶点到其他顶点的所有边中选一条权值最小的边。然后把这条边的另一个顶点v和这条边加入到生成树中。</li><li>②对剩下的其他所有顶点，分别检查这些顶点与顶点v的权值是否比这些顶点在lowcost数组中对应的权值小，如果更小，则用较小的权值更新lowcost数组。</li><li>③从更新后的lowcost数组中继续挑选权值最小而且不在生成树中的边，然后加入到生成树。</li><li>④反复执行②③直到所有所有顶点都加入到生成树中。</li><li>概要:  <ul><li>双重循环，外层循环次数为n-1，内层并列的两个循环次数都是n。故普利姆算法时间复杂度为O(n2)<br>而且时间复杂度只和n有关，所以适合稠密图</li></ul></li></ul></li><li>克鲁斯卡尔（Kruskal）<ul><li>将图中边按照权值从小到大排列，然后从最小的边开始扫描，设置一个边的集合来记录，如果该边并入不构成回路的话，则将该边并入当前生成树。直到所有的边都检测完为止。</li><li>概要:  <ul><li></li><li></li><li>概要: 克鲁斯卡尔算法操作分为对边的权值排序部分和一个单重for循环，它们是并列关系，由于排序耗费时间大于单重循环，所以克鲁斯卡尔算法的主要时间耗费在排序上。排序和图中边的数量有关系，所以适合稀疏图</li></ul></li></ul></li></ul></li><li>最短路径<ul><li>迪杰斯特拉<ul><li>一个源点到其余顶点的最短路径<ul><li>该算法设置一个集合S记录已求得的最短路径的顶点，可用一个数组s[]来实现，初始化为0，当s[vi]=1时表示将顶点vi放入S中，初始时把源点v0放入S中。此外，在构造过程中还设置了两个辅助数组：<br>dist[]：记录了从源点v0到其他各顶点当前的最短路径长度，dist[i]初值为arcs[v0][i]。<br>path[]：path[i]表示从源点到顶点i之间的最短路径的前驱结点，在算法结束时，可根据其值追溯得到源点v0到顶点vi的最短路径。</li></ul></li></ul></li></ul></li></ul><p>假设从顶点0出发，也就是顶点0为源点，集合S最初只包含顶点0，邻接矩阵arcs表示带权有向图，arcs[i][j]表示有向边&lt;i，j&gt;的权值，若不存在有向边&lt;i，j&gt;，则arcs[i][j]为∞。Dijkstra算法的步骤如下：<br>1）初始化：集合S初始为{0}，dist[]的初始值dist[i]=arcs[0][i]，i=1，2，…，n-1。<br>2）找出dist[]中的最小值dist[j]，将顶点j加入集合S，即修改s[vj]=1。<br>3）修改从v0出发到集合V-S上任一顶点vk可达的最短路径长度：如果dist[j] + arcs[j][k]&lt; dist[k]，则令dist[k]=dist[j] + arcs[j][k]。另外更新path[k]=j(也就是顶点j加入集合之后如果有新的路径使得到顶点k路径变短的话就将到顶点k的路径长度修改成较短的)<br>4）重复2）～3）操作共n-1次，直到所有的顶点都包含在S中。<br>    * 弗洛伊德<br>        * 所有顶点到所有顶点的最短路径<br>            * 算法思想：<br>递推产生一个n阶方阵序列A(−1)，A(0)，…，A(k)，…，A(n−1)<br>其中A(k)[i][j]表示从顶点vi到顶点vj的路径长度，k表示绕行第k个顶点的运算步骤。初始时，对于任意两个顶点vi和vj，若它们之间存在边，则以此边上的权值作为它们之间的最短路径长度；若它们之间不存在有向边，则以∞作为它们之间的最短路径长度。以后逐步尝试在原路径中加入顶点k(k=0，1，…，n-1)作为中间顶点。如果增加中间顶点后，得到的路径比原来的路径长度减少了，则以此新路径代替原路径<br>    * 非带权图<br>        * 两点之间经过边数最少的路径<br>    * 带权图<br>        * 两点之间经过的边上权值之和最小的路径</p><ul><li><p>拓扑排序</p><ul><li><p>AOV</p><ul><li>如果我们把每个环节看成图中一个顶点，在这样一个有向图中，用顶点表示活动，用弧表示活动之间的优先关系，那么这样的有向图称为AOV网(Activity On Vertex)</li></ul></li><li><p>拓扑排序就是对一个有向图构造拓扑序列的过程，构造会有两种结果：<br>如果此图全部顶点都被输出了，说明它是不存在回路的AOV网；<br>如果没有输出全部顶点，则说明这个图存在回路，不是AOV网。</p></li><li><p>拓扑排序算法：<br>从AOV网中选择一个入度为0的顶点输出，然后删去此顶点，并删除以此顶点为弧尾的弧。重复这个步骤直到输出图中全部顶点，或者找不到入度为0的顶点为止。</p></li></ul></li><li><p>关键路径</p><ul><li>AOE(Activity On Edge):在一个表示工程的带权有向图中，用顶点表示事件，用有向边表示活动，用边上的权值表示活动的持续时间，这种有向图的边表示活动的网称为AOE网。</li></ul></li></ul><h2 id="第六章：查找"><a href="#第六章：查找" class="headerlink" title="第六章：查找"></a>第六章：查找</h2><h3 id="查找的基本概念和顺序查找"><a href="#查找的基本概念和顺序查找" class="headerlink" title="查找的基本概念和顺序查找"></a>查找的基本概念和顺序查找</h3><ul><li>查找定义：在数据集合中寻找满足某种条件的数据元素的过程称为查找</li><li>关键字：数据元素中某个可以以唯一标识该元素的数据项</li><li>平均查找长度（ASL：Average Search Length）:在查找的过程中，一次查找的长度是指需要比较的关键字次数，而平均查找长度则是所有查找过程中进行关键字的比较次数的平均值</li><li>顺序查找(线性查找)，主要用于在线性表中进行查找。从查找表的一端开始，顺序扫描查找表，依次将扫描到的关键字和待查找的值key进行比较。如果相等，则查找成功。如果扫描结束仍然没有发现相等的数据元素，则查找失败。<ul><li>1</li><li>2</li><li>3 </li><li>4</li><li>时间复杂度为O(n)<h3 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h3></li></ul></li><li>算法思路：<ul><li>首先将给定值key与表中中间位置元素的关键字比较，若相等，则查找成功，返回该元素的存储位置；若不等，则所需查找的元素只能在中间元素以外的前半部分或后半部分中。然后在缩小的范围内继续进行同样的查找，如此重复直到找到为止，或者确定表中没有所需要查找的元素，则查找不成功，返回查找失败的信息。</li></ul></li><li>折半查找分析<ul><li>折半查找判定树<ul><li>对于折半查找，查找的比较次数就是从根结点到该结点经历的结点数</li><li>时间复杂度为O(logn)</li><li>概要: 具有N个（N&gt;0）结点的完全二叉树的高度为 [log2(N+1)] 或 [log2N] +1。</li></ul></li></ul></li></ul><h3 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h3><ul><li>分块查找又称为索引顺序查找</li><li>分块查找思想：<ul><li>①确定待查找值在哪个块（折半查找）</li></ul></li></ul><p>②在确定的块中查找待查找值（顺序查找）</p><ul><li><p>分块查找分析</p><ul><li>由于分块查找实际是进行两次查找，所以整个算法的平均查找长度是两次查找的平均查找长度之和。<br>即ASL分块=ASL折半+ASL顺序<ul><li><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3></li></ul></li></ul></li><li><p>二叉排序树(Binary Search Tree 也叫二叉搜索树)或者是一棵空树，或者是具有以下性质的二叉树<br>①若左子树不空，则左子树上所有结点的值均小于它的根结点的值。<br>②若右子树不空，则右子树上所有结点的值均大于它的根结点的值。<br>③它的左右子树也是一棵二叉排序树。</p></li><li><p>算法思想</p><ul><li>由于二叉排序树的特点(左子树&lt;根结点&lt;右子树),所以每次查找一个关键字，需要先和根结点进行比较：<br>如果这个关键字小于根结点的值，则再到这个根结点的左子树进行同样的比较操作一直进行下去直到找到该关键字，表示查找成功，或者是空指针，表示查找失败。<br>如果这个关键字大于根结点的值，则再到这个根结点的右子树进行同样的比较操作一直进行下去直到找到该关键字，表示查找成功，或者是空指针，表示查找失败。<ul><li>查找关键字代码<ul><li>1 </li><li>2</li></ul></li><li>插入关键字代码<ul><li>1)空树：直接插入新结点返回成功<br>2)树不空：检查是否存在关键字重复的结点：<br>①存在：返回插入失败<br>②不存在：检查根结点的值和待插入关键字值的大小关系递归插入左右子树</li><li></li></ul></li><li>构造代码<ul><li></li></ul></li><li>删除结点<ul><li>①删除的是叶子结点<ul><li>方法：直接删去该结点即可</li></ul></li><li>②删除的是仅有左子树或者右子树的结点<ul><li>方法：“子承父业”</li></ul></li><li>③删除的是左右子树都有的结点<ul><li>仿照②类型，先将一个孩子“继承父业”，另一个孩子“归顺”于这个孩子<br>方法：找到待删除结点的直接前驱或者直接后继结点，用该结点来替换待删除结点，再删除该结点。</li></ul></li></ul></li></ul></li></ul></li><li><p>二叉排序树分析</p><ul><li>查找时间复杂度是O(n)</li></ul></li><li><p>概要: “左小右大”</p><h3 id="平衡二叉树-AVL树"><a href="#平衡二叉树-AVL树" class="headerlink" title="平衡二叉树(AVL树)"></a>平衡二叉树(AVL树)</h3></li><li><p>平衡二叉树(AVL树)是特殊的二叉排序树，特殊的地方在于左右子树的高度之差绝对值不超过1，而且左右子树又是一棵平衡二叉树。</p></li><li><p>平衡因子</p><ul><li>定义结点左子树与右子树的高度差为该结点的平衡因子，则平衡二叉树结点的平衡因子的值只可能是−1、0或1。</li></ul></li><li><p>平衡调整</p><ul><li><p>平衡二叉树的建立过程和二叉排序树的建立过程是相似的，都是从一棵空树开始陆续插入结点。不同的地方在于对于平衡二叉树的建立过程中，由于插入结点可能会破坏结点的平衡性，所以需要进行平衡调整。</p><ul><li>LL调整(左孩子的左子树上插入结点导致)<ul><li>最小不平衡子树根结点的平衡因子为2&gt;0<br>它的左孩子结点平衡因子为1&gt;0<br>两个都大于0，所以直接右旋就可以调整</li><li>概要: “正则右旋”</li></ul></li><li>RR调整(右孩子的右子树上插入结点导致)<ul><li>最小不平衡子树根结点的平衡因子为-2&lt;0<br>它的右孩子结点平衡因子为-1&lt;0<br>两个都小于0，所以直接左旋就可以调整</li><li>概要: “负则左旋”</li></ul></li><li>LR调整(左孩子的右子树上插入结点导致)</li><li>RL调整(右孩子的左子树上插入结点导致)</li><li>概要: 先局部转换为LL或RR，最后进行调整</li></ul></li></ul></li><li><p>分析</p><ul><li>含有n个结点平衡二叉树的最大深度为O(log2n)，因此，平衡二叉树的平均查找长度为O(log2n) <h3 id="B树和B-树"><a href="#B树和B-树" class="headerlink" title="B树和B+树"></a>B树和B+树</h3></li></ul></li><li><p>2-3树</p><ul><li>2-3树是一种多路查找树：2和3的意思就是2-3树包含两种结点<ul><li>1)2结点包含一个元素和两个孩子(或者没有孩子)。<br>①左子树包含的元素小于该结点的元素值，右子树包含的元素大于该结点的元素值<br>②2结点要不有两个孩子，要不就没有孩子，不允许有一个孩子</li><li>2)3结点包含一大一小两个元素和三个孩子(或者没有孩子)。(两个元素按大小顺序排列好)<br>①左子树包含的元素小于该结点较小的元素值，右子树包含的元素大于该结点较大的元素值，中间子树包含的元素介于这两个元素值之间。<br>②3结点要不有三个孩子，要不就没有孩子，不允许有一个或两个孩子</li><li>3)2-3树所有叶子结点都在同一层次</li></ul></li></ul></li><li><p>2-3-4树</p><ul><li>2-3-4树也是一种多路查找树：2和3和4的意思就是2-3-4树包含三种结点<ul><li>1)2结点包含一个元素和两个孩子(或者没有孩子)。<br>①左子树包含的元素小于该结点的元素值，右子树包含的元素大于该结点的元素值<br>②2结点要不有两个孩子，要不就没有孩子，不允许有一个孩子</li><li>2)3结点包含一大一小两个元素和三个孩子(或者没有孩子)。<br>①左子树包含的元素小于该结点较小的元素值，右子树包含的元素大于该结点较大的元素值，中间子树包含的元素介于这两个元素值之间。<br>②3结点要不有三个孩子，要不就没有孩子，不允许有一个或两个孩子</li><li>3)4结点包含小中大三个元素和四个孩子(或者没有孩子)。<br>①左子树包含的元素小于该结点最小的元素值，第二个子树包含大于最小的元素值小于中间元素值的元素，第三个子树包含大于中间元素值小于最大元素值的元素，右子树包含的元素大于该结点最大的元素值。<br>②4结点要不有四个孩子，要不就没有孩子，不允许有一个或两个或三个孩子</li><li>4)2-3-4树所有叶子结点都在同一层次</li></ul></li></ul></li><li><p>B树</p><ul><li><p>B树也是一种平衡的多路查找树，2-3树和2-3-4树都是B树的特例，我们把树中结点最大的孩子数目称为B树的阶。通常记为m。<br>一棵m阶B树或为空树，或为满足如下特性的m叉树：</p><ul><li>1）树中每个结点至多有m棵子树。（即至多含有m-1个关键字) (“两棵子树指针夹着一个关键字”)</li><li>2）若根结点不是终端结点，则至少有两棵子树。(至少一个关键字)</li><li>3）除根结点外的所有非叶结点至少有 ⌈m/2⌉棵子树。（即至少含有⌈m/2⌉-1个关键字）</li><li>4）所有非叶结点的结构如下：</li><li>5）所有的叶子结点出现在同一层次上，不带信息。(就像是折半查找判断树中查找失败的结点)</li></ul></li><li><p>1.B树的查找操作</p><ul><li>查找过程：①先让待查找关键字key和结点的中的关键字比较，如果等于其中某个关键字，则查找成功。<pre><code>    ②如果和所有关键字都不相等，则看key处在哪个范围内，然后去对应的指针所指向的子树中查找。        Eg:如果Key比第一个关键字K1还小，则去P0指针所指向的子树中查找，如果比最后一个关键字Kn还大，则去Pn指针所指向的子树中查找。</code></pre></li></ul></li><li><p>2.B树的插入操作</p><ul><li>分裂的方法：取这个关键字数组中的中间关键字(⌈n/2⌉)作为新的结点，然后其他关键字形成两个结点作为新结点的左右孩子。</li></ul></li><li><p>3.B树的删除操作</p><ul><li><p>B树中的删除操作与插入操作类似，但要稍微复杂些，要使得删除后的结点中的关键字个数≥⌈m/2⌉-1 ，因此将涉及结点的“合并”问题。由于删除的关键字位置不同，可以分为关键字在终端结点和不在终端结点上两种情况。</p><ul><li><p>1）如果删除的关键字在终端结点上（最底层非叶子结点）：<br>①结点内关键字数量大于⌈m/2⌉-1 ，这时删除这个关键字不会破坏B树的定义要求。所以直接删除。<br>②结点内关键字数量等于⌈m/2⌉-1 ，并且其左右兄弟结点中存在关键字数量大于⌈m/2⌉-1 的结点，则去兄弟阶段中借关键字。<br>③结点内关键字数量等于⌈m/2⌉-1 ，并且其左右兄弟结点中不存在关键字数量大于⌈m/2⌉-1 的结点，则需要进行结点合并。</p></li><li><p>2）如果删除的关键字不在终端结点上（最底层非叶子结点）：需要先转换成在终端结点上，再按照在终端结点     上的情况来分别考虑对应的方法。</p><ul><li>相邻关键字：对于不在终端结点上的关键字,它的相邻关键字是其左子树中值最大的关键字或者右子树中值最小的关键字。</li><li>第一种情况：存在关键字数量大于⌈m/2⌉-1 的左子树或者右子树，在对应子树上找到该关键字的相邻关键字，然后将相邻关键字替换待删除的关键字。</li><li>第二种情况：左右子树的关键字数量均等于⌈m/2⌉-1 ，则将这两个左右子树结点合并，然后删除待删除关键字。</li></ul></li></ul></li></ul></li></ul></li><li><p>B+树</p><ul><li>B+树是常用于数据库和操作系统的文件系统中的一种用于查找的数据结构</li><li>m阶的B+树与m阶的B树的主要差异在于：<br>1）在B+树中，具有n个关键字的结点只含有n棵子树，即每个关键字对应一棵子树；而在B树中，具有n个关键字的结点含有(n+1)棵子树。<br>2）在B+树中，每个结点（非根内部结点）关键字个数n的范围是 ⌈m/2⌉≤n≤m（根结点1≤n≤m），在B树中，每个结点（非根内部结点）关键字个数n的范围是⌈m/2⌉ -1≤n≤m-1（根结点：1≤n≤m-1）。<br>3）在B+树中，叶结点包含信息，所有非叶结点仅起到索引作用，非叶结点中的每个索引项只含有对应子树的最大关键字和指向该子树的指针，不含有该关键字对应记录的存储地址。<br>4）在B+树中，叶结点包含了全部关键字，即在非叶结点中出现的关键字也会出现在叶结点中；而在B树中，叶结点包含的关键字和其他结点包含的关键字是不重复的。<h3 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h3></li></ul></li><li><p>散列表：根据给定的关键字来计算出关键字在表中的地址的数据结构。也就是说，散列表建立了关键字和存储地址之间的一种直接映射关系。</p></li><li><p>散列函数：一个把查找表中的关键字映射成该关键字对应的地址的函数，记为Hash(key)=Addr。</p></li><li><p>散列函数可能会把两个或两个以上的不同关键字映射到同一地址，称这种情况为“冲突”，这些发生碰撞的不同关键字称为同义词。</p></li><li><p>构造散列函数的tips：</p><ul><li>1）散列函数的定义域必须包含全部需要存储的关键字，而值域的范围则依赖于散列表的大小或地址范围。</li><li>2）散列函数计算出来的地址应该能等概率、均匀地分布在整个地址空间，从而减少冲突的发生。</li><li>3）散列函数应尽量简单，能够在较短的时间内就计算出任一关键字对应的散列地址。</li></ul></li><li><p>1.常用Hash函数的构造方法：</p><ul><li>1.开放定址法：直接取关键字的某个线性函数值为散列地址，散列函数为H(key)=a×key+b。式中，a和b是常数。这种方法计算最简单，并且不会产生冲突</li><li>2.除留余数法：假定散列表表长为m，取一个不大于m但最接近或等于m的质数p，利用以下公式把关键字转换成散列地址。散列函数为H(key)=key % p<br>除留余数法的关键是选好p，使得每一个关键字通过该函数转换后等概率地映射到散列空间上的任一地址，从而尽可能减少冲突的可能性</li><li>3.数字分析法：设关键字是r进制数（如十进制数），而r个数码在各位上出现的频率不一定相同，可能在某些位上分布均匀些，每种数码出现的机会均等；而在某些位上分布不均匀，只有某几种数码经常出现，则应选取数码分布较为均匀的若干位作为散列地址。这种方法适合于已知的关键字集合</li><li>4.平方取中法：顾名思义，取关键字的平方值的中间几位作为散列地址。具体取多少位要看实际情况而定。这种方法得到的散列地址与关键字的每一位都有关系，使得散列地址分布比较均匀。</li><li>5.折叠法：将关键字分割成位数相同的几部分（最后一部分的位数可以短一些），然后取这几部分的叠加和作为散列地址，这种方法称为折叠法。关键字位数很多，而且关键字中每一位上数字分布大致均匀时，可以采用折叠法得到散列地址。</li></ul></li><li><p>2.常用Hash函数的冲突处理办法：</p><ul><li>1.开放定址法：将产生冲突的Hash地址作为自变量，通过某种冲突解决函数得到一个新的空闲的Hash地址。<ul><li>1）线性探测法：冲突发生时，顺序查看表中下一个单元（当探测到表尾地址m-1时，下一个探测地址是表首地址0），直到找出一个空闲单元（当表未填满时一定能找到一个空闲单元）或查遍全表。</li><li>2）平方探测法：设发生冲突的地址为d,平方探测法得到的新的地址序列为d+12，d-12，d+22，d-22……<br>平方探测法是一种较好的处理冲突的方法，可以避免出现“堆积”问题，它的缺点是不能探测到散列表上的所有单元，但至少能探测到一半单元。</li><li>3）再散列法：又称为双散列法。需要使用两个散列函数，当通过第一个散列函数H(Key)得到的地址发生冲突时，则利用第二个散列函数Hash2(Key)计算该关键字的地址增量。</li><li>4）伪随机序列法：当发生地址冲突时，地址增量为伪随机数序列，称为伪随机序列法。</li></ul></li><li>2.拉链法：对于不同的关键字可能会通过散列函数映射到同一地址，为了避免非同义词发生冲突，可以把所有的同义词存储在一个线性链表中，这个线性链表由其散列地址唯一标识。拉链法适用于经常进行插入和删除的情况。</li><li>3.散列表的查找过程：类似于构造散列表，给定一个关键字Key。<br>先根据散列函数计算出其散列地址。然后检查散列地址位置有没有关键字。<br>   1)如果没有，表明该关键字不存在，返回查找失败。<br>   2)如果有，则检查该记录是否等于关键字。<pre><code>       ①如果等于关键字，返回查找成功。       ②如果不等于，则按照给定的冲突处理办法来计算下一个散列地址，再用该地址去执行上述过程。</code></pre></li><li>4.散列表的查找性能：和装填因子有关。<ul><li></li><li>α越大，表示装填的记录越“满”，发生冲突的可能性就越大，反之发生冲突的可能性越小<h2 id="第七章：排序"><a href="#第七章：排序" class="headerlink" title="第七章：排序"></a>第七章：排序</h2><h3 id="排序的基本知识"><a href="#排序的基本知识" class="headerlink" title="排序的基本知识"></a>排序的基本知识</h3></li></ul></li></ul></li><li><p>定义：排序就是将原本无序的序列重新排列成有序的序列。</p></li><li><p>排序的稳定性</p><ul><li>如果待排序表中有两个元素Ri、Rj，其对应的关键字keyi=keyj，且在排序前Ri在Rj前面，如果使用某一排序算法排序后，Ri仍然在Rj的前面，则称这个排序算法是稳定的，否则称排序算法是不稳定的。<h3 id="插入类排序"><a href="#插入类排序" class="headerlink" title="插入类排序"></a>插入类排序</h3></li></ul></li><li><p>直接插入排序</p><ul><li>直接插入排序：首先以一个元素为有序的序列，然后将后面的元素依次插入到有序的序列中合适的位置直到所有元素都插入有序序列。</li><li>时间复杂度为O(n)</li><li>直接插入排序是稳定性是稳定的。</li></ul></li><li><p>折半插入排序</p><ul><li>折半插入排序将比较和移动这两个操作分离出来，也就是先利用折半查找找到插入的位置，然后一次性移动元素，再插入该元素。</li><li>折半插入排序的时间复杂度为O(n^2)</li><li>稳定性：和直接插入排序稳定性相同，是稳定的。</li></ul></li><li><p>希尔排序</p><ul><li>希尔排序的基本思想：希尔排序本质上还是插入排序，只不过是把待排序序列分成几个子序列，再分别对这几个子序列进行直接插入排序。<ul><li>①先以增量5来分割序列，也就是下标为0,5,10,15…的关键字分成一组，下标为1,6,11,16..分成一组,然后对这些组分别进行直接插入排序，这就完成了一轮希尔排序。</li><li>②缩小增量(d1=n/2，di+1= [di/2]，比如10个数据序列，第一次增量d1=10/2=5,第二次增量d2= [d1/2]= [5/2]=2,并且最后一个增量等于1),所以第二轮以增量为2进行类似的排序过程。</li><li>③接下来的第三轮，第四轮…都是类似的过程，直到最后一轮以增量为1。此时就是前面所说的直接插入排序。</li><li>概要:  </li></ul></li><li>时间复杂度：…  希尔排序的时间复杂度约为O(n^1.3)    在最坏情况下希尔排序的时间复杂度为O(n^2)</li><li>空间复杂度：希尔排序的空间复杂度为O(1)</li><li>稳定性：不稳定，由于不同的增量可能就会把相等的关键字划分到两个直接插入排序中进行排序， 可能就会造成相对顺序变化。<h3 id="交换类排序"><a href="#交换类排序" class="headerlink" title="交换类排序"></a>交换类排序</h3></li></ul></li><li><p>冒泡排序</p><ul><li>假设待排序表长为n，从后往前（或从前往后）两两比较相邻元素的值，若为逆序（即A[i-1]&gt;A[i]），则交换它们，直到序列比较完。我们称它为一趟冒泡，结果将最小的元素交换到待排序列的第一个位置。下一趟冒泡时，前一趟确定的最小元素不再参与比较，待排序列减少一个元素，每趟冒泡的结果把序列中的最小元素放到了序列的最终位置，……，这样最多做n-1趟冒泡就能把所有元素排好序。</li><li>空间复杂度：交换时开辟了存储空间来存储中间变量，所以空间复杂度为O(1)</li><li>时间复杂度</li><li>稳定性：当两个关键字相等，if判断条件不成立，所以不会发生数据移动。所以是稳定的。</li></ul></li><li><p>快速排序</p><ul><li>快速排序是一种基于分治法的排序方法。<br>每一趟快排选择序列中任一个元素作为枢轴(pivot)(通常选第一个元素)，将序列中比枢轴小的元素都移到枢轴前边，比枢轴大的元素都移到枢轴后边。<ul><li>1</li><li>2</li></ul></li><li>时间复杂度：<br>最好情况下时间复杂度为O(nlogn) ,待排序序列越无序，算法效率越高。<br>最坏情况下时间复杂度为O(n^2)，待排序序列越有序，算法效率越低。</li><li>空间复杂度：<br>由于快速排序是递归的，需要借助一个递归工作栈来保存每一层递归调用的必要信息，其容量应与递归调用的最大深度一致。<br>最好情况下为 ⌈log2(n+1)⌉(每次partition都很均匀)递归树的深度O(logn)<br>最坏情况下，因为要进行n-1次递归调用，所以栈的深度为O(n)；</li><li>稳定性：快速排序是不稳定的，是因为存在交换关键字。<h3 id="选择类排序"><a href="#选择类排序" class="headerlink" title="选择类排序"></a>选择类排序</h3></li></ul></li><li><p>简单选择排序</p><ul><li></li><li>空间复杂度：需要额外的存储空间仅为交换元素时借助的中间变量，所以空间复杂度是O(1)</li><li>时间复杂度：<br>关键操作在于交换元素操作，整个算法由双重循环组成，外层循环从0到n-2一共n-2+1=n-1次，<br>对于第i层外层循环，内层循环执行n-1-(i+1)+1=n-i-1次。<pre><code>            当i=0,内层循环执行n-1次，当i=n-2,内层循环执行1次，所以是一个等差数列求和,一共为(1+n-1)(n-1)/2=n(n-1)/2 ,所以时间复杂度为O(n^2)</code></pre></li><li>稳定性：不稳定   原因就在于交换部分会打破相对顺序</li></ul></li><li><p>堆排序</p><ul><li><p>什么是堆？</p><ul><li>堆是一棵完全二叉树，而且满足任何一个非叶结点的值都不大于(或不小于)其左右孩子结点的值。<ul><li>如果是每个结点的值都不小于它的左右孩子结点的值，则称为大顶堆。</li><li>如果是每个结点的值都不大于它的左右孩子结点的值，则称为小顶堆。</li></ul></li></ul></li><li><p>什么是堆排序？</p><ul><li><p>我们知道对于一个堆来说，它的根结点是整个堆中所有结点的值的最大值(大顶堆)或者最小值(小顶堆)。所以堆排序的思想就是每次将无序序列调节成一个堆，然后从堆中选择堆顶元素的值，这个值加入有序序列，无序序列减少一个，再反复调节无序序列，直到所有关键字都加入到有序序列。</p><ul><li></li><li></li></ul></li><li><p>时间复杂度：<br>堆排序的总时间可以分为①建堆部分+②n-1次向下调整堆</p><p>堆排序的时间复杂度为O(n)+O(nlog2n)=O(nlog2n)</p></li><li><p>堆排序不稳定</p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3></li></ul></li></ul></li><li><p>假定待排序表含有n个记录，则可以看成是n个有序的子表，每个子表长度为1，然后两两归并，得到 ⌈n/2⌉个长度为2或1的有序表；再两两归并，……如此重复，直到合并成一个长度为n的有序表为止，这种排序方法称为2-路归并排序。</p><ul><li></li><li></li></ul></li><li><p>例如：49 38 65 97 76 13 27</p><ul><li>①首先将整个序列的每个关键字看成一个单独的有序的子序列</li><li>②两两归并，49和38归并成{38 49} ，65和97归并成{65 97}，76和13归并成{13 76}，27没有归并对象</li><li>③两两归并，{38 49}和{65 97}归并成{38 49 65 97}，{13,76}和27归并成{13 27 76}</li><li>④两两归并，{38 49 65 97}和{13 27 76}归并成{13 27 38 49 65 76 97}</li></ul></li><li><p>时间复杂度：O(nlog2n)</p></li><li><p>空间复杂度:因为需要将这个待排序序列转存到一个数组，所以需要额外开辟大小为n的存储空间，即空间复杂度为O(n)</p></li><li><p>稳定性：稳定</p><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3></li><li><p>基数排序(也叫桶排序)是一种很特别的排序方法，它不是基于比较进行排序的，而是采用多关键字排序思想（即基于关键字各位的大小进行排序的），借助“分配”和“收集”两种操作对单逻辑关键字进行排序。基数排序又分为最高位优先（MSD）排序和最低位优先（LSD）排序。</p></li><li><p>例子：53, 3, 542, 748, 14, 214, 154, 63, 616</p><ul><li>补充位数：053, 003, 542, 748, 014, 214, 154, 063, 616</li><li>桶实际是一个队列，先进先出(从桶的上面进，下面出)</li><li>关键字数量为n,关键字的位数为d,比如748 d=3，r为关键字的基的个数，就是组成关键字的数据的种类，比如十进制数字一共有0至9一共10个数字，即r=10</li></ul></li><li><p>空间复杂度：需要开辟关键字基的个数个队列，所以空间复杂度为O(r)</p></li><li><p>时间复杂度：需要进行关键字位数d次”分配”和”收集”，一次”分配”需要将n个关键字放进各个队列中，一次”收集”需要将r个桶都收集一遍。所以一次”分配”和一次”收集”时间复杂度为O(n+r)。d次就需要O(d(n+r))的时间复杂度。</p></li><li><p>稳定性：由于是队列，先进先出的性质，所以在分配的时候是按照先后顺序分配，也就是稳定的，所以收集的时候也是保持稳定的。即基数排序是稳定的排序算法。</p><h3 id="外部排序"><a href="#外部排序" class="headerlink" title="外部排序"></a>外部排序</h3></li><li><p>需要将待排序的记录存储在外存上，排序时再把数据一部分一部分的调入内存进行排序。在排序过程中需要多次进行内存和外存之间的交换，对外存文件中的记录进行排序后的结果仍然被放到原有文件中。这种排序的方法就叫做外部排序。</p></li><li><p>如何得到初始的归并段</p><ul><li>置换选择排序：解决排序段放入内存的问题</li></ul></li><li><p>如何减少多个归并段的归并次数</p><ul><li>最佳归并树：最少的归并次数（I/O次数）</li></ul></li><li><p>如何每次m路归并快速得到最小的关键字</p><ul><li>败者树：减少比较次数</li></ul></li><li><p>概要: 内存容量无法容纳大量数据</p><h2 id="二叉树与树与森林"><a href="#二叉树与树与森林" class="headerlink" title="二叉树与树与森林"></a>二叉树与树与森林</h2><h3 id="树与二叉树"><a href="#树与二叉树" class="headerlink" title="树与二叉树"></a>树与二叉树</h3></li><li><p>如何将一棵树转化成二叉树？</p><ul><li>树的孩子兄弟表示法与二叉树的二叉链表表示法都是用到两个指针<ul><li>将孩子兄弟表示法理解成二叉链表</li></ul></li><li>树转换成二叉树的手动模拟方法：<ul><li>①将同一结点的各个孩子用线串连起来</li><li>②将每个结点的子树分支，从左往右，除了第一个以外全部删除</li><li>概要: 例子</li></ul></li></ul></li><li><p>如何将一棵二叉树转化成树？</p><ul><li>二叉树转换成树的手动模拟方法：<ul><li>①将二叉树从上到下分层，并调节成水平方向。<br>(分层方法：每遇到左孩子则为一层)</li><li>②找到每一层的双亲结点，方法为它的上一层相连的那个结点就是双亲结点。<br>例如bcd这一层，与它相连的上一层结点即为a,所以bcd这三个结点的双亲结点都是a.</li><li>③将每一层结点和其双亲结点相连，同时删除该双亲结点各个孩子结点之间的联系。</li><li>概要: 例子<h3 id="森林与二叉树"><a href="#森林与二叉树" class="headerlink" title="森林与二叉树"></a>森林与二叉树</h3></li></ul></li></ul></li><li><p>森林：森林是m（m≥0）棵互不相交的树的集合</p></li><li><p>如何将森林转换成二叉树？</p><ul><li>森林转换成树的手动模拟方法：<ul><li>①将森林中每棵树都转换成二叉树</li><li>②将第二棵树作为第一棵树的根结点的右子树，将第三棵树作为第二棵树的根结点的右子树..依次类推</li><li>概要: 例子</li></ul></li></ul></li><li><p>如何将二叉树转换成森林？</p><ul><li>二叉树转换成森林的手动模拟方法：<ul><li>反复断开二叉树根结点的右孩子的右子树指针，直到不存在根结点有右孩子的二叉树为止。</li><li>概要: 例子<h3 id="树与森林的遍历"><a href="#树与森林的遍历" class="headerlink" title="树与森林的遍历"></a>树与森林的遍历</h3></li></ul></li></ul></li><li><p>先序：先访问根结点，再访问根结点的每棵子树。           访问子树也是按照先序的要求</p></li><li><p>后序：先访问根结点的每棵子树，再访问根结点。           访问子树也是按照先序的要求</p></li><li><p>树的先序遍历等于它对应二叉树的先序遍历，后序遍历等于它对应的二叉树的中序遍历</p></li><li><p>概要: 例子</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西江月·阻风山峰下</title>
      <link href="/posts/9c9b.html"/>
      <url>/posts/9c9b.html</url>
      
        <content type="html"><![CDATA[<h1 id="西江月·阻风山峰下"><a href="#西江月·阻风山峰下" class="headerlink" title="西江月·阻风山峰下"></a>西江月·阻风山峰下</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​            西江月·阻风山峰下</p><p>​                                                                宋·张孝祥</p><p>满载一船秋色，平铺十里湖光。波神留我看斜阳，放起鳞鳞细浪。<br>明日风回更好，今宵露宿何妨？水晶宫里奏霓裳，准拟岳阳楼上。        </p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>​        满载着一船的秋色，行驶在广阔平展的江面上。水神有意留住我观看夕阳西下的美丽景色，吹起鳞鳞波浪，泛起波光，让我再不能行往远方。</p><p>​        如果明日风向回转，天气变好，那么今夜露宿于此又有什么关系呢？阵阵波涛声好似龙宫中奏演的《霓裳羽衣曲》，明天准能在岳阳楼上欣赏洞庭湖的美景胜状。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>山峰：指黄陵山。（黄陵山在湖南湘阴县北洞庭湖边。湘水由此入湖。相传山上有舜之二妃娥皇、女英的庙，世称黄陵庙。词题一作“黄陵庙”。词句也稍有差异）</li><li>鳞鳞：形容波纹细微如鱼鳞。</li><li>风回：指风向转为顺风。</li><li>水晶宫：古代传说水中的宫殿。</li><li>霓裳：即《霓裳羽衣曲》，唐代著名乐舞名。</li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><blockquote><p>​       《西江月·阻风山峰下》写航船遇风受阻的情景，写景、抒情，乃至对“明日”的设想，着笔轻松，无半点沮丧之处。全词语言浅易而意境幽雅，读来只觉作者张孝祥对山水无限热爱，却不见船遇逆风受阻的懊恼，这是此词的特色，作者张孝祥构思独到之处。</p></blockquote><p>　　《西江月·阻风山峰下》上片写行船遇风受阻，泊舟山下的所见与感受。</p><p>　　“满载一船秋色，平铺十里湖光。”开头两句，写风尚未起时的风光。“一船秋色”由作者的感受着笔，勾勒出时令特征，引人遐想，可以想见，此时周围的山色浓郁苍翠，万物生机勃勃，开花的花朵艳丽，结果的果实累累；“十里湖光”写出湖面宽广坦荡。这两个对偶句用“满载”和“平铺”相对，将湖光和山色一并画出，前句说美丽的秋景尽收眼底；后句说无风时湖水平稳，远远望去，就象“平铺”在那儿。水光山色，交相辉映，船上人心旷神怡，其乐无穷。此二句纯属写景，而作者张孝祥欣悦之情尽在其中，即所谓景中有情。</p><p>　　“波神”二句说，水神有意留住我观看夕阳西下的美丽景色，放起鱼鳞般的波纹。这是写的天气咋变，微风初起时的湖上景色，也是变天的前兆。有经验的船工势必要抛锚停舟，采取应急措施，因为这霞光辉映，“鳞鳞细浪”过后，将是范仲淹在《岳阳楼记》中描写的“浊浪排空”、“樯倾楫摧”的恶劣天气。这两句以幽默的手法写航船遇风受阻被迫停泊的情景，反衬出作者此时的心境十分安闲自在。用“斜阳”点明时间是傍晚，以“细浪”说明天气变化，要起风，皆是妙笔。</p><p>　　《西江月·阻风山峰下》下片写停船后作者的心里活动。“明日风回更好”，写他期待风向回转，天气变好，及时登程的心情。“今宵露宿何妨？”“何妨”，犹言“有什么关系呢”，实际上是无可奈何的话，但也表现了他在迫不得已的情况下“露宿”时的旷达胸襟。“水晶宫里奏霓裳”，“水晶宫”，俗谓“龙宫”；“霓裳”，即《霓裳羽衣曲》，一支大型歌舞曲的名字。作者听到阵阵波涛声，奇特的想象油然而生，把水声比喻作龙宫的音乐。龙宫既然奏欢庆之乐，明日准是好天气，航船正常前进，“准拟岳阳楼上”，尾句设想，明天准能在岳阳楼上欣赏洞庭湖的美景胜状。　　</p><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>　　公元1167年（在宋孝宗乾道三年）张孝祥当时正在知潭州（今湖南长沙市）。后改官离开湖南，乘舟北上，途经洞庭湖畔的黄陵山时，遇风受阻，于是写了这首词。《宋六十名家词》题作《黄陵庙》，个别语句亦稍有出入。</p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>​        张孝祥（1132年－1169年），字安国，号于湖居士，汉族，简州（今属四川）人，生于明州鄞县。宋朝词人。著有《于湖集》40卷、《于湖词》1卷。其才思敏捷，词豪放爽朗，风格与苏轼相近，孝祥“尝慕东坡，每作为诗文，必问门人曰：‘比东坡如何？’”</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hosts文件</title>
      <link href="/posts/d3bc.html"/>
      <url>/posts/d3bc.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hosts-文件"><a href="#Hosts-文件" class="headerlink" title="Hosts 文件"></a>Hosts 文件</h1><blockquote><p>​    Hosts，C:\Windows\System32\drivers\etc 路径下一个没有扩展名的文件，这个小小的 文件通常不到 1MB，原理也很简单，但应用场景却非常广泛。</p></blockquote><h2 id="1-Hosts-到底干什么"><a href="#1-Hosts-到底干什么" class="headerlink" title="1.Hosts 到底干什么"></a>1.Hosts 到底干什么</h2><p>了解 Hosts 工作原理前要先了解互联网工作原理。</p><p>当我们访问一个网站的时候，<strong>实际上访问的是这个网站所在服务器的 「IP 地址」</strong>，比如通过「220.181.38.148」也能打开百度的首页。</p><p>但是「IP 地址」是数字，不便于记忆，所以我们给不同网站的「IP 地址」取名，也就是网站的「域名」，比如<a href="https://www.baidu.com/。" target="_blank" rel="noopener">https://www.baidu.com/。</a></p><p>在 ARPANET（全球互联网的前生）发展初期是没有 DNS 的，整个网络中服务器数量都非常少，每台电脑只使用 Hosts 来解析不同服务器的「IP 地址」，后来互联网迅速壮大，单靠本地 Hosts 文件已经无法装下如此多信息，这才诞生了 DNS 。</p><p><strong>所以，Hosts 文件相当于网站的「通讯录」，它记录着不同「域名」对应的「IP 地址」。</strong></p><p>在操作系统中 Hosts 文件的优先级高于 DNS 服务器，如果 Hosts 有服务器信息，则直接调用，否则才询问 DNS 服务器。</p><p>正是利用 Hosts 的高优先级，将错误的「IP 地址」与域名绑定，就实现了屏蔽某些服务器的效果。</p><h2 id="2-Hosts-文件格式"><a href="#2-Hosts-文件格式" class="headerlink" title="2.Hosts 文件格式"></a>2.Hosts 文件格式</h2><p>Hosts 格式非常简单，左边为「服务器 IP 地址」，右边是对应域名，中间以最少一个空格隔开。</p><h2 id="3-Hosts-应用场景"><a href="#3-Hosts-应用场景" class="headerlink" title="3.Hosts 应用场景"></a>3.Hosts 应用场景</h2><p>大多数操作系统都有一个与 Hosts 类似功能的文件，工作原理也一样。</p><p>在 Windows 系统中，我们可能无法直接在「etc 文件夹」中修改保存它，可以将它复制到桌面，然后用记事本打开，修改后再复制回去。</p><p><strong>1、屏蔽广告和破解</strong></p><p>现在的网页广告大多是专门的广告投放公司在做，一部分广告屏蔽工具就是替换「无效的IP」来实现屏蔽广告的效果。</p><p>127.0.0.1 就常用来作屏蔽 IP，这是「本机回送地址」，也就是你是用的电脑。</p><p>比如我们在 Hosts 文件中加入 127.0.0.1 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 那就无法打开百度了</p><p>同样利用这个原理，一些破解软件，也通过添加错误的 Hosts 信息来屏蔽激活服务器，避免查询激活状态。</p><p><strong>2、访问 DNS 错误的网站</strong></p><p>现在我们访问网页都是通过 DNS 解析 IP 地址，如果使用本地 Hosts 则可以跳过这一步直接访问服务器 IP，可以提升网页打开速度，不过现在的 DNS 服务器响应速度都很快，大多数时候没必要这样做。</p><p>而有时候，有些网站，因为有些原因，导致 DNS 服务器无法给出正确的 IP 地址，也可以通过 Hosts 来代劳。</p><p><strong>3、建立映射关系</strong></p><p>有些公司的局域网内有自己的服务器，有些人也有自己的 NAS，每次输入 IP 访问有些麻烦，也可以再 Hosts 中将局域网中服务器 IP 与任意网址绑定，这样通过网址也能访问局域网中本没有域名的服务器。</p><p><strong>4、被滥用</strong></p><p>Hosts 简单又强大，自然就免不得被恶意使用，比如使用修改过的镜像，或者流氓PE安装系统，可能你的 Hosts 就已经被人动过手脚，他们将一些常用网站的 IP 换到自己的网站，以赚取浏览，甚至将用户导向一些还原度非常高的山寨网站上，骗取账户密码甚至财产。</p><p>不过还好只是修改 Hosts 并不会造成致命的系统安全故障，大家尽量使用微软提供的官方镜像和安装工具装系统就好了。</p><p><strong>如果你的 Hosts 已经被污染，也可以直接删除这个文件，或者到别的电脑上复制一个过来。</strong></p><p>最后需要注意，因为 Hosts 文件配置的是「静态IP」，如果服务器更新了IP地址，本地Hosts 就会失效，需要及时更新 Hosts 文件才行。</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>临江仙·夜登小阁，忆洛中旧游</title>
      <link href="/posts/2c57.html"/>
      <url>/posts/2c57.html</url>
      
        <content type="html"><![CDATA[<h1 id="临江仙·夜登小阁，忆洛中旧游"><a href="#临江仙·夜登小阁，忆洛中旧游" class="headerlink" title="临江仙·夜登小阁，忆洛中旧游"></a>临江仙·夜登小阁，忆洛中旧游</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​          临江仙·夜登小阁，忆洛中旧游</p><p>​                                                                宋·陈与义</p><p>忆昔午桥桥上饮，坐中多是豪英。长沟流月去无声。杏花疏影里，吹笛到天明。<br>二十余年如一梦，此身虽在堪惊。闲登小阁看新晴。古今多少事，渔唱起三更。        </p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>​        回忆当年在午桥畅饮，在座的都是英雄豪杰。月光映在河面，随水悄悄流逝，在杏花稀疏的花影中，吹起竹笛直到天明。</p><p>​       二十多年的经历好似一场梦，我虽身在，回首往昔却胆战心惊。闲来无事登上小阁楼观看新雨初晴的景致。古往今来多少历史事迹转瞬即逝，只有把它们编成歌的渔夫，还在那半夜三更里低声歌唱。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>临江仙：词牌名，又称《鸳鸯梦》、《雁后归》、《庭院深深》。双调，上片五句，押三平韵，三十字；下片同，共六十字。</li><li>午桥：在洛阳南面。坐中：在一起喝酒的人。</li><li>豪英：出色的人物。这两句说：想从前在午桥桥头饮宴，在一起喝酒的都是英雄好汉。</li><li>长沟流月：月光随着流水悄悄地消逝。去无声：表示月亮西沉，夜深了。</li><li>疏影：稀疏的影子。这两句说，在杏花稀疏的影子里吹起短笛，一直欢乐到天明。</li><li>二十余年：二十多年来的经历（包括北宋亡国的大变乱）。堪惊：总是心战胆跳。</li><li>新晴：新雨初晴。晴，这里指晴夜。渔唱：打鱼人编的歌儿。</li><li>三更：古代漏记时，自黄昏至拂晓分为五刻，即五更，三更正是午夜。</li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><blockquote><p>​        这首词是作者晚年追忆洛中朋友和旧游而作的。上片写对已经沦落敌国之手的家乡以及早年自在快乐生活的回顾。下片宕开笔墨回到现实，概括词人从踏上仕途所经历的颠沛流离和国破家亡的痛苦生活，结句将古今悲慨、国恨家愁，都融入“渔唱”之中，将沉挚的悲感化为旷达的襟怀。此词直抒胸臆，表情达意真切感人，通过上下两片的今昔对比，萌生对家国和人生的惊叹与感慨，韵味深远绵长。</p></blockquote><p>　　上片忆旧。</p><p>　　“忆昔午桥桥上饮，坐中多是豪英。”回想往昔在午桥桥上宴饮，在一起喝酒的人大多是英雄豪杰。用“忆”字开篇，直接了当把往事展开来。“午桥”是唐代白居易、刘禹锡、裴度吟诗唱和、举杯相欢的地方。作者青年时期，追寻遗韵，仰慕前贤，在故乡洛阳，与当时“豪英”一起，也在午桥宴饮聚会，把酒临风。</p><p>　　“长沟流月去无声，杏花疏影里，吹笛到天明。”白天和朋友们在午桥畅饮，晚上围坐在杏树底下尽情地吹着悠扬的笛子，一直玩到天明，竟然不知道碧空的月光随着流水静悄悄地消失了。桥上欢歌笑语，桥下一片宁静，以静衬动。这三句写景叙事，优美自然，它如同明净澄澈的清水一样。特别是“杏花疏影里，吹笛到天明”两句， “杏花”则点明在春天的夜晚，豪杰们抚琴弄笛，那情致高雅的笛声此起彼伏。作者以初春的树林为背景，利用明月的清辉照射在杏花枝上所撒落下来的稀疏花影，与花影下吹奏出来的悠扬笛声，组成一幅富有空间感的恬静、清婉、奇丽的画面，将作者那种充满闲情雅兴的生活情景真实地反映了出来。</p><p>　　下片感怀。</p><p>　　“二十余年如一梦，此身虽在堪惊。”作者在政和三年（1113年）做官后，曾遭谪贬；特别是靖康之变，北宋沦亡，他逃到南方，饱尝了颠沛流离、国破家亡的痛苦。残酷的现实和往昔的一切形成鲜明的对照，很自然会有一场恶梦的感触。这两句概括了这段时间里国家和个人的激剧变化的情况。这里，作者以饱蘸着久历艰难和劫后余生的血泪的笔触，写下这感慨深沉的诗句，发人深思，启人遐想。经历了国破家亡，战事连连之后，曾在一起吟诗饮酒的豪杰们如今散落各方，九死一生，身世之感和家国之痛油然而生。</p><p>　　接着写道：“闲登小阁看新晴。古今多少事，渔唱起三更。”“闲登”句是说：我闲散无聊地登上小阁，观看这雨后新晴的月色。这旬点题，写明作此词的时间、地点和心境。“新晴”与“长沟流月”照应，巧妙地将忆中之事与目前的处境联系起来，作者今昔不同的精神状况从中得以再现。“古今多少事，渔唱起三更。”把国家兴亡和人生的感慨都托之于渔唱，进一步表达作者内心寂寞悲凉的心情。古往今来的大事已经转瞬即逝了，只有把它们编成歌儿的渔夫，还在那半夜三更里低声歌唱。这是低沉的感叹，软弱的呻吟，无能为力的自我表白。这种看破世情、回避现实的消极态度，从侧面显示诗人对现实的极度不满，这是乱世怀古伤今的主题。</p><p>　　这首词通过回忆在洛阳的游乐来抒发作者对国家沦陷的悲痛和漂泊四方的寂寞。以对比的手法，明快的笔调，通过对旧游生活的回忆，抒发了北宋亡国后深沉的感慨。寥寥几笔，勾画出来的自我形象相当丰满。</p><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>　　这首词大概是在公元1135年（宋高宗绍兴五年）或六年陈与义退居青墩镇僧舍时所作，时年四十六或四十七岁。北宋灭亡，陈与义流离逃难，艰苦备尝，而南宋朝廷在播迁之后，仅能自立，他回忆二十多年的往事，百感交集，不禁感叹今昔巨变，写下了这首词。</p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>​        陈与义(1090-1138)，字去非，号简斋，汉族，其先祖居京兆，自曾祖陈希亮迁居洛阳，故为宋代河南洛阳人（现在属河南）。他生于宋哲宗元祐五年(1090年)，卒于南宋宋高宗绍兴八年(1138年)。北宋末，南宋初年的杰出诗人，同时也工于填词。其词存于今者虽仅十余首，却别具风格，尤近于苏东坡，语意超绝，笔力横空，疏朗明快，自然浑成，著有《简斋集》。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登快阁</title>
      <link href="/posts/6774.html"/>
      <url>/posts/6774.html</url>
      
        <content type="html"><![CDATA[<h1 id="登快阁"><a href="#登快阁" class="headerlink" title="登快阁"></a>登快阁</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​                        登快阁</p><p>​                                    宋·黄庭坚</p><p>痴儿了却公家事，快阁东西倚晚晴。<br>落木千山天远大，澄江一道月分明。<br>朱弦已为佳人绝，青眼聊因美酒横。<br>万里归船弄长笛，此心吾与白鸥盟。</p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>我这个呆子办完公事，登上了快阁，在这晚晴的余辉里倚栏远眺。<br>远望秋山无数，落叶飘零，天地更加辽远阔大。朗朗明月下澄江淙淙流过，月光下显得更加空明澄澈。<br>友人远离，早已没有弄弦吹箫的兴致了，只好清樽美酒，聊以解忧了。<br>我从万里之外的远地乘船归来，在船上吹起长笛；我的这颗心，将愿与白鸥结为朋友。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>快阁：在吉州泰和县(今属江西)东澄江（赣江）之上，以江山广远、景物清华著称。此诗作于元丰五年(1082)作者任泰和令时。</li><li>痴儿了却公家事：意思是说，自己并非大器，只会敷衍官事。痴儿，作者自指。了却：完成。</li><li>东西：东边和西边 。指在阁中四处周览。</li><li>倚：倚靠</li><li>落木：落叶</li><li>澄江：指赣江。澄，澄澈，清澈。</li><li>朱弦：这里指琴。佳人：美人，引申为知己、知音。</li><li>青眼：黑色的眼珠在眼眶中间,青眼看人则是表示对人的喜爱或重视、尊重，指正眼看人 。 白眼指露出眼白，表示轻蔑。 聊：姑且。</li><li>弄：演奏</li><li>与白鸥盟：这里是指无利禄之心，借指归隐。</li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><p>​        这是黄庭坚在太和知县任上登快阁时所作的抒情小诗。</p><p>　　一般说来，文章或诗歌开头往往较难，以致有的文学家常将其开头处砍去，这是因为开头处，作者还没有和作品的情境融为一体，因而容易作态。黄山谷此诗起首，用通俗口语娓娓道来，但又能构思奇妙，引人入境。诗人说，我这个呆子办完公事，登上了快阁，在这晚晴余辉里，倚栏远眺。这二句，看似通俗浅近，却包涵着极为丰富的内容：前句是用《晋书·傅咸传》所载夏侯济之语，“生子痴，了官事，官事未易了也。了事正坐痴，复为快耳！”后句用杜甫”注目寒江倚山阁“及李商隐”万古贞魂倚暮霞”之典，还多有翻新出奇之妙。“痴儿”二字翻前人之意，直认自己是“痴儿”，此为谐趣之一；“了却”二字，渲染出了诗人如释重负的欢快心情，与“快阁”之“快”暗相呼应，从而增加了一气呵成之感此为妙用二；“倚晚晴”三字，更是超脱了前人的窠臼。杜诗之“倚”，倚于山阁，乃实境平叙；李诗之“倚”，主语为“万古贞魂”，乃虚境幻生而成；黄诗之“倚”，可谓虚实相兼；诗人之“倚”，乃是实景，但却倚在无际无垠的暮色晴空。读此三家，宛如一幅艺术摄影，在晚霞的逆光里，诗人与亭阁的背影。</p><p>　　不仅如此，“倚晚晴”三字，还为下句的描写，作了铺垫渲染，使诗人顺势迸出了“落木千山天远大，澄江一道月分明“的绝唱。远望无数秋山，山上的落叶飘零了，浩渺的天空此时显得更加辽远阔大，澄净如玉的澄江在快阁亭下淙淙流过，一弯新月，映照在江水中，显得更加空明澄澈。这是诗人初登快阁亭时所览胜景的描绘，也是诗人胸襟怀抱的写照。读这样的诗句，不禁使人想起杜甫“无边落木萧萧下，不尽长江滚滚来”和谢眺“余霞散成绮，澄江净如练”的名句。但黄山谷之句，既汲取了前辈的养料加以锻炼熔造，又是新的境界再现。所以前人曾评此二句道：“其意境天开，则实能劈古今未泄之奥妙。”（张宗泰《鲁斋所学集》）</p><p>　　五、六二句，是诗人巧用典故的中句。前句用伯牙捧琴谢知音的故事。《吕氏春秋·本味篇》载：“钟子期死，伯牙破琴绝弦，终身不复鼓琴，以为世无足复为鼓琴者。”后句用阮籍青白眼事。史载阮籍善为青白眼，“见礼俗之士，以白眼对之”，见所悦之人，“乃见青眼”（《晋书·阮籍传》）。诗人这二句大意是说，因为知音不在，我弄断了琴上的朱弦，不再弹奏，于是只好清樽美酒，聊以解忧了。此处“横“字用得很生动，把诗人无可奈何、孤独无聊的形象神情托了出来。</p><p>　　结句诗人说自己希望能坐上归船，吹弄着悠扬的长笛，回到那遥远的故乡——我的这颗心呵，早已和白鸥订好盟约了。从全诗的结构看，这个结尾是相当精彩的：起首处诗人从“痴儿了却官家事”说起，透露了对官场生涯的厌倦和对登快阁亭欣赏自然景色的渴望；然后，渐入佳境，诗人陶醉在落木千山，澄江月明的美景之中，与起首处对“公家事”之“了却”形成鲜明对照；五、六句诗人作一迭宕：在良辰美景中，诗人心内的忧烦无端而来，诗人感受到自己的抱负无法实现、自己的胸怀无人理解的痛苦。那么，解脱的出路何在呢？这就很自然地引出了诗人的“归船”、“白鸥”之想。这一结尾，不但呼应了起首，顺势作结，给人以“一气盘旋而下之感”（潘伯鹰评语）。而且意味隽永，让人想象无穷。</p><p>　　全诗明白如话，因景抒情寄慨，字字紧扣，层层关联，用典贴切，无一字无来处，体现了江西诗派用字新奇、笔力雄健的特点。</p><p>　　此诗极受后人称赏。姚鼐称此诗“豪而有韵，此移太白歌行于七律内者”；方东树评析说：“起四句且叙且写，一往浩然，五、六句对意流行。收尤豪放。此所谓寓单行之气于排偶之中者。”这些评析都是十分切中肯綮的。翁方纲评黄山谷诗云：“坡公之外又出此一种绝高之风骨，绝大之境界，造化元气发泄透矣。”细吟此诗，当知无愧。</p><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>　　此诗作于公元1082年（宋神宗元丰五年），时黄庭坚在吉州泰和县（今属江西）任知县，公事之余，诗人常到“澄江之上，以江山广远，景物清华得名”（《清一统治·吉安府》）的快阁览胜，有感而发。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中几个有趣的函数</title>
      <link href="/posts/438b.html"/>
      <url>/posts/438b.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python中几个有趣的函数"><a href="#Python中几个有趣的函数" class="headerlink" title="Python中几个有趣的函数"></a><strong>Python中几个有趣的函数</strong></h1><blockquote><p>今天主要是分享5个python内置的小函数。</p></blockquote><h2 id="01-一用而过：lambda"><a href="#01-一用而过：lambda" class="headerlink" title="01 一用而过：lambda"></a>01 一用而过：lambda</h2><blockquote><p>很多语言都有匿名函数，python的匿名函数写作lambda，当需要实现一定功能而又不想“大张旗鼓”的def一个函数时，lambda就是最优的选择。</p></blockquote><p>其语法格式一般是这样的：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token comment" spellcheck="true"># &lt;function __main__.&lt;lambda>(x)></span></code></pre><p>也可以将它赋值给一个变量，由于python中一切皆对象，所以后续程序中就可以用该变量调用这个匿名函数。</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">**</span><span class="token number">2</span>f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4</span></code></pre><p>当然，这里其实没必要应用lambda来实现，因为既然要显式调用，还不如干脆直接写个明确的函数罢了。lambda函数更广泛的应用场景在于该匿名函数作为另一个函数的参数传递时，应用就比较合适了，例如，将lambda作为sort()函数的key参数，就可以实现特定功能的排序。</p><pre class=" language-python"><code class="language-python">dyct <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span>sorted<span class="token punctuation">(</span>dyct<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [('b', 1), ('a', 2), ('c', 5)]</span></code></pre><h2 id="02-智能解压：zip"><a href="#02-智能解压：zip" class="headerlink" title="02 智能解压：zip"></a>02 智能解压：zip</h2><blockquote><p>zip函数人如其名，是打包或者解包的函数，接受2个以上可迭代变量，输出对应位置组成元组后的迭代类型。例如：</p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;zip at 0x1da016d15c8></span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [('a', 4), ('b', 5), ('c', 6)]</span>tuple<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># (('a', 4), ('b', 5), ('c', 6))</span></code></pre><p>也可以接受多于2个输入可迭代变量，而且如果各迭代变量长度不一致也不会报错，只是此时返回迭代变量取决于输入总长度最短的一个。例如：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># (('a', 4, True), ('b', 5, False), ('c', 6, True))</span></code></pre><p>与zip打包相对应的用法是解包，即对一个打包形式的元素进行依次解包，并返回多个新的列表。例如：</p><pre class=" language-python"><code class="language-python">aZip <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> zip<span class="token punctuation">(</span><span class="token operator">*</span>aZip<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a:('a', 'b', 'c')</span><span class="token comment" spellcheck="true"># b:(4, 5, 6)</span><span class="token comment" spellcheck="true"># c:(True, False, True)</span></code></pre><h2 id="03-一一映射：map"><a href="#03-一一映射：map" class="headerlink" title="03 一一映射：map"></a>03 一一映射：map</h2><blockquote><p>map函数也正如其取名一样，是一个将接受的迭代变量依次经过某种映射，并输出映射后的迭代变量。例如，如果对列表中的某个变量依次完成求值，并返回一个新的列表，则可以应用map：</p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;map at 0x1da017136d8></span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['1', '2', '3', '4']</span></code></pre><p>这是map函数的一个典型用法：接受2个参数，第一个参数(上例中是str()函数）是一个要作用的函数，第二个参数是可迭代变量。</p><p>当第一个函数的参数是是一个多变量函数时，map也可以接受更多的参数。例如：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span>x<span class="token operator">**</span>y<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [1, 4, 27, 64]</span></code></pre><p>与zip函数中类似，当map里的函数参数长度不匹配时并不会报错，只是输出结果将由最短的决定：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span>x<span class="token operator">**</span>y<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [1, 4]</span></code></pre><h2 id="04-一夫当关：filter"><a href="#04-一夫当关：filter" class="headerlink" title="04 一夫当关：filter"></a>04 一夫当关：filter</h2><blockquote><p>与map函数类似，filter函数也接受一个函数及其变量作为参数，只是要求这个函数的返回结果是bool型，并用这个bool的结果决定输出的取舍问题。例如需要对一个输入列表过滤，要求保留3的倍数：</p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;filter at 0x1da0171c0f0></span>list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [0, 3, 6, 9]</span></code></pre><p>这里需注意，当filter的第一个函数返回值不是bool型时不会报错，只是它会转化为bool型判断，如果判断结果不是False（python中会判为False的变量包括0、None、[]等等），则会将其输出，否则过滤掉：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [1, 2, 4, 5, 7, 8]</span></code></pre><h2 id="05-万剑归宗：reduce"><a href="#05-万剑归宗：reduce" class="headerlink" title="05 万剑归宗：reduce"></a>05 万剑归宗：reduce</h2><blockquote><p>map和filter函数都是多入多出型，实质上是完成了特定的变换或筛选。reduce则是归约函数，将一系列输入变量经过特定的函数后转化为一个结果输出。不过可能是由于应用场景有限的原因，reduce在python3中已不再是全局调用函数，必须要从functools包中导入方可使用：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> reducea <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 10</span></code></pre><p>reduce函数还可以接受一个可选的初始值作为参数。应用reduce函数可以实现很多小trick，就看能不能想的到用的出：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> reduces <span class="token operator">=</span> <span class="token string">'abcdefg'</span>reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token operator">+</span>x<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token string">'AA'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 'gfedcbaAA'</span></code></pre><h2 id="06-最后"><a href="#06-最后" class="headerlink" title="06 最后"></a>06 最后</h2><p>当然，尽管几个函数用法不可谓不优美、功能不可谓不强大，但都不是必须的，甚至某种程度上都可以用其他形式加以替代，例如map和filter函数都可以用列表推导式来简单实现，reduce函数功能也顶多用一个for循环迭代就能解决。</p><p>但在致力于使python程序变得更加简洁优雅乃至装B耍秀的路上，这些函数也确有其用武之地，未尝不值得一试！</p>]]></content>
      
      
      <categories>
          
          <category> python知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python知识 </tag>
            
            <tag> python函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python读写数据文件</title>
      <link href="/posts/22b9.html"/>
      <url>/posts/22b9.html</url>
      
        <content type="html"><![CDATA[<p>Python处理数据文件的途径有很多种，可以操作的文件类型主要包括文本文件（csv、txt、json等）、excel文件、数据库文件、api等其他数据文件。其中，Python连接各种数据库,包括关系数据库：<strong>sqlite,mysql,mssql</strong><br>非关系数据库：<strong>MongoDB,Redis</strong>。</p><p>下面整理下python有哪些方式可以读写数据文件。</p><h2 id="1-read、readline、readlines"><a href="#1-read、readline、readlines" class="headerlink" title="1. read、readline、readlines"></a>1. read、readline、readlines</h2><ul><li>read()  ：一次性读取整个文件内容。推荐使用read(size)方法，size越大运行时间越长</li><li>readline()  ：每次读取一行内容。内存不够时使用，一般不太用</li><li>readlines()  ：一次性读取整个文件内容，并按行返回到list，方便我们遍历</li></ul><h2 id="2-内置模块csv"><a href="#2-内置模块csv" class="headerlink" title="2. 内置模块csv"></a>2. 内置模块csv</h2><p>python内置了csv模块用于读写csv文件，csv是一种逗号分隔符文件，是数据科学中最常见的数据存储格式之一。csv模块能轻松完成各种体量数据的读写操作，当然大数据量需要代码层面的优化。</p><ul><li>csv模块读取文件</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 读取csv文件</span><span class="token keyword">import</span> csv<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> myFile<span class="token punctuation">:</span>    lines<span class="token operator">=</span>csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>myFile<span class="token punctuation">)</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span></code></pre><ul><li>csv模块写入文件</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> myFile<span class="token punctuation">:</span>    myWriter<span class="token operator">=</span>csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>myFile<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># writerrow一行一行写入</span>    myWriter<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    myWriter<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># writerow多行写入</span>    myList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    myWriter<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span>myList<span class="token punctuation">)</span></code></pre><h2 id="3-numpy库"><a href="#3-numpy库" class="headerlink" title="3. numpy库"></a>3. numpy库</h2><ul><li><strong>loadtxt方法</strong></li></ul><p>loadtxt用来读取文本文件（包含txt、csv等）以及.gz 或.bz2格式压缩文件，前提是文件数据每一行必须要有数量相同的值。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># loadtxt()中的dtype参数默认设置为float</span><span class="token comment" spellcheck="true"># 这里设置为str字符串便于显示</span>np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>str<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># out：array(['1,2,3', '4,5,6', '7,8,9'], dtype='&lt;U5')</span></code></pre><ul><li><strong>load方法</strong></li></ul><p>load用来读取numpy专用的<code>.npy</code>, <code>.npz</code> 或者<code>pickled</code>持久化文件。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># 先生成npy文件</span>np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test.npy'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用load加载npy文件</span>np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'test.npy'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''out:array([[1, 2, 3],       [4, 5, 6]])'''</span></code></pre><ul><li><strong>fromfile方法</strong></li></ul><p>fromfile方法可以读取简单的文本数据或二进制数据，数据来源于tofile方法保存的二进制数据。读取数据时需要用户指定元素类型，并对数组的形状进行适当的修改。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>tofile<span class="token punctuation">(</span><span class="token string">'test.bin'</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>fromfile<span class="token punctuation">(</span><span class="token string">'test.bin'</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># out:array([0, 1, 2, 3, 4, 5, 6, 7, 8])</span></code></pre><h2 id="4-pandas库"><a href="#4-pandas库" class="headerlink" title="4. pandas库"></a>4. pandas库</h2><p>pandas是数据处理最常用的分析库之一，可以读取各种各样格式的数据文件，一般输出dataframe格式。如：txt、csv、excel、json、剪切板、数据库、html、hdf、parquet、pickled文件、sas、stata等等</p><ul><li><strong>read_csv方法</strong>read_csv方法用来读取csv格式文件，输出dataframe格式。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdpd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span></code></pre><ul><li><strong>read_excel方法</strong></li></ul><p>读取excel文件，包括xlsx、xls、xlsm格式</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdpd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'test.xlsx'</span><span class="token punctuation">)</span></code></pre><ul><li><strong>read_table方法</strong></li></ul><p>通过对sep参数（分隔符）的控制来对任何文本文件读取</p><ul><li><strong>read_json方法</strong></li></ul><p>读取json格式文件</p><pre class=" language-python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'row 1'</span><span class="token punctuation">,</span> <span class="token string">'row 2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'col 1'</span><span class="token punctuation">,</span> <span class="token string">'col 2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>j <span class="token operator">=</span> df<span class="token punctuation">.</span>to_json<span class="token punctuation">(</span>orient<span class="token operator">=</span><span class="token string">'split'</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>read_json<span class="token punctuation">(</span>j<span class="token punctuation">,</span>orient<span class="token operator">=</span><span class="token string">'split'</span><span class="token punctuation">)</span></code></pre><ul><li><strong>read_html方法</strong></li></ul><p>读取html表格</p><ul><li><strong>read_clipboard方法</strong></li></ul><p>读取剪切板内容</p><ul><li><strong>read_pickle方法</strong></li></ul><p>读取plckled持久化文件</p><ul><li><strong>read_sql方法</strong></li></ul><p>读取数据库数据，连接好数据库后，传入sql语句即可</p><ul><li><strong>read_dhf方法</strong></li></ul><p>读取hdf5文件，适合大文件读取</p><ul><li><strong>read_parquet方法</strong></li></ul><p>读取parquet文件</p><ul><li><strong>read_sas方法</strong></li></ul><p>读取sas文件</p><ul><li><strong>read_stata方法</strong></li></ul><p>读取stata文件</p><ul><li><strong>read_gbq方法</strong></li></ul><p>读取google bigquery数据</p><p>pandas学习网站：<a href="https://pandas.pydata.org/" target="_blank" rel="noopener">https://pandas.pydata.org/</a></p><h2 id="5-读写excel文件"><a href="#5-读写excel文件" class="headerlink" title="5.读写excel文件"></a>5.读写excel文件</h2><p>python用于读写excel文件的库有很多，除了前面提到的pandas，还有xlrd、xlwt、openpyxl、xlwings等等。</p><p><strong>主要模块：</strong></p><ul><li><strong>xlrd库</strong></li></ul><p>从excel中读取数据，支持xls、xlsx</p><ul><li><strong>xlwt库</strong></li></ul><p>对excel进行修改操作，不支持对xlsx格式的修改</p><ul><li><strong>xlutils库</strong></li></ul><p>在xlw和xlrd中，对一个已存在的文件进行修改</p><ul><li><strong>openpyxl</strong></li></ul><p>主要针对xlsx格式的excel进行读取和编辑</p><ul><li><strong>xlwings</strong></li></ul><p>对xlsx、xls、xlsm格式文件进行读写、格式修改等操作</p><ul><li><strong>xlsxwriter</strong></li></ul><p>用来生成excel表格，插入数据、插入图标等表格操作，不支持读取</p><ul><li><strong>Microsoft Excel API</strong></li></ul><p>需安装pywin32，直接与Excel进程通信，可以做任何在Excel里可以做的事情，但比较慢</p><h2 id="6-操作数据库"><a href="#6-操作数据库" class="headerlink" title="6. 操作数据库"></a>6. 操作数据库</h2><p>python几乎支持对所有数据库的交互，连接数据库后，可以使用sql语句进行增删改查。</p><p><strong>主要模块：</strong></p><ul><li><strong>pymysql</strong></li></ul><p>用于和mysql数据库的交互</p><ul><li><strong>sqlalchemy</strong></li></ul><p>用于和mysql数据库的交互</p><ul><li><strong>cx_Oracle</strong></li></ul><p>用于和oracle数据库的交互</p><ul><li><strong>pymssql</strong></li></ul><p>用于和sql server数据库的交互</p><ul><li><strong>pymongo</strong></li></ul><p>用于和mongodb非关系型数据库的交互</p><ul><li><strong>redis、pyredis</strong></li></ul><p>用于和redis非关系型数据库的交互</p><h3 id="python连接MySQL数据库"><a href="#python连接MySQL数据库" class="headerlink" title="python连接MySQL数据库"></a>python连接MySQL数据库</h3><blockquote><p>使用MySQLdb，不支持Python3.x<br>pymysql对Python2.x和Python3.x的支持都比较好</p></blockquote><h4 id="1、使用pymysql"><a href="#1、使用pymysql" class="headerlink" title="1、使用pymysql"></a>1、使用pymysql</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># https://github.com/PyMySQL/PyMySQL/</span><span class="token keyword">import</span> pymysql<span class="token keyword">from</span> contextlib <span class="token keyword">import</span> closing<span class="token keyword">import</span> traceback<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取一个数据库连接,with关键字 表示退出时,conn自动关闭</span>    <span class="token comment" spellcheck="true"># with 嵌套上一层的with 要使用closing()</span>    <span class="token keyword">with</span> closing<span class="token punctuation">(</span>pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>                                 charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect database successfully"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取游标,with关键字 表示退出时,cur自动关闭</span>        <span class="token keyword">with</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cur<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 删除表</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS  COMPANY"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 创建表</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                     CREATE TABLE IF NOT EXISTS COMPANY                   (ID INTEGER  PRIMARY KEY NOT NULL  auto_increment,                   NAME           TEXT    NOT NULL,                   AGE            INT     NOT NULL,                   ADDRESS        CHAR(50),                   SALARY         REAL);            """</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"create table successfully"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 添加数据</span>            <span class="token comment" spellcheck="true"># 在一个conn.execute里面里面执行多个sql语句是非法的</span>            cur<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span><span class="token string">"INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES ( %s, %s, %s, %s )"</span><span class="token punctuation">,</span>                            <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Paul'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Allen'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">15000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Teddy'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'Norway'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Mark'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Rich-Mond '</span><span class="token punctuation">,</span> <span class="token number">65000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">85000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Kim'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'South-Hall'</span><span class="token punctuation">,</span> <span class="token number">45000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'James'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'Houston'</span><span class="token punctuation">,</span> <span class="token number">10000.00</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 提交,否则重新运行程序时,表中无数据</span>            conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"insert successfully"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 查询表</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                select id,NAME,AGE,ADDRESS,SALARY FROM COMPANY             """</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token keyword">for</span> row <span class="token keyword">in</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> pymysql<span class="token punctuation">.</span>Error <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Mysql Error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2、使用MySQLdb"><a href="#2、使用MySQLdb" class="headerlink" title="2、使用MySQLdb"></a>2、使用MySQLdb</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/env python2.7</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># mysqldb 只支持python2.7</span><span class="token comment" spellcheck="true"># http://mysql-python.sourceforge.net/</span><span class="token keyword">import</span> MySQLdb<span class="token keyword">from</span> contextlib <span class="token keyword">import</span> closing<span class="token keyword">import</span> traceback<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取一个数据库连接</span>    <span class="token keyword">with</span> closing<span class="token punctuation">(</span>MySQLdb<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect database successfully"</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> closing<span class="token punctuation">(</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cur<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 删除表</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS  COMPANY"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 创建表</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                     CREATE TABLE IF NOT EXISTS COMPANY                   (ID INTEGER  PRIMARY KEY NOT NULL  auto_increment,                   NAME           TEXT    NOT NULL,                   AGE            INT     NOT NULL,                   ADDRESS        CHAR(50),                   SALARY         REAL);            """</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"create table successfully"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 添加数据</span>            <span class="token comment" spellcheck="true"># 在一个conn.execute里面里面执行多个sql语句是非法的</span>            cur<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span><span class="token string">"INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES ( %s, %s, %s, %s )"</span><span class="token punctuation">,</span>                            <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Paul'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Allen'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">15000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Teddy'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'Norway'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Mark'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Rich-Mond '</span><span class="token punctuation">,</span> <span class="token number">65000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">85000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Kim'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'South-Hall'</span><span class="token punctuation">,</span> <span class="token number">45000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'James'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'Houston'</span><span class="token punctuation">,</span> <span class="token number">10000.00</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 提交,否则重新运行程序时,表中无数据</span>            conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"insert successfully"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 查询表</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                select id,NAME,AGE,ADDRESS,SALARY FROM COMPANY             """</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token keyword">for</span> row <span class="token keyword">in</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> MySQLdb<span class="token punctuation">.</span>Error <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Mysql Error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印错误栈信息</span></code></pre><h4 id="3、使用MySQLdb库中的-mysql"><a href="#3、使用MySQLdb库中的-mysql" class="headerlink" title="3、使用MySQLdb库中的_mysql"></a>3、使用MySQLdb库中的_mysql</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/env python2.7</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># mysqldb 只支持python2.7</span><span class="token comment" spellcheck="true"># http://mysql-python.sourceforge.net/</span><span class="token keyword">import</span> MySQLdb<span class="token keyword">from</span> contextlib <span class="token keyword">import</span> closing<span class="token keyword">import</span> traceback<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取一个数据库连接</span>    <span class="token keyword">with</span> closing<span class="token punctuation">(</span>MySQLdb<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect database successfully"</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> closing<span class="token punctuation">(</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cur<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 删除表</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS  COMPANY"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 创建表</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                     CREATE TABLE IF NOT EXISTS COMPANY                   (ID INTEGER  PRIMARY KEY NOT NULL  auto_increment,                   NAME           TEXT    NOT NULL,                   AGE            INT     NOT NULL,                   ADDRESS        CHAR(50),                   SALARY         REAL);            """</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"create table successfully"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 添加数据</span>            <span class="token comment" spellcheck="true"># 在一个conn.execute里面里面执行多个sql语句是非法的</span>            cur<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span><span class="token string">"INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES ( %s, %s, %s, %s )"</span><span class="token punctuation">,</span>                            <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Paul'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Allen'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">15000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Teddy'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'Norway'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Mark'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Rich-Mond '</span><span class="token punctuation">,</span> <span class="token number">65000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">85000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Kim'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'South-Hall'</span><span class="token punctuation">,</span> <span class="token number">45000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'James'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'Houston'</span><span class="token punctuation">,</span> <span class="token number">10000.00</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 提交,否则重新运行程序时,表中无数据</span>            conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"insert successfully"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 查询表</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                select id,NAME,AGE,ADDRESS,SALARY FROM COMPANY             """</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token keyword">for</span> row <span class="token keyword">in</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> MySQLdb<span class="token punctuation">.</span>Error <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Mysql Error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印错误栈信息</span></code></pre><h3 id="python连接MongoDB数据库"><a href="#python连接MongoDB数据库" class="headerlink" title="python连接MongoDB数据库"></a>python连接MongoDB数据库</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># https://docs.mongodb.com/ecosystem/drivers/python/</span><span class="token comment" spellcheck="true"># https://pypi.python.org/pypi/pymongo/</span><span class="token keyword">import</span> pymongo<span class="token keyword">from</span> pymongo<span class="token punctuation">.</span>mongo_client <span class="token keyword">import</span> MongoClient<span class="token keyword">import</span> pymongo<span class="token punctuation">.</span>errors<span class="token keyword">import</span> traceback<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 连接到 mongodb 服务</span>    mongoClient <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">27017</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 连接到数据库</span>    mongoDatabase <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span>test    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect database successfully"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取集合</span>    mongoCollection <span class="token operator">=</span> mongoDatabase<span class="token punctuation">.</span>COMPANY    <span class="token comment" spellcheck="true"># 移除所有数据</span>    mongoCollection<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 添加数据</span>    mongoCollection<span class="token punctuation">.</span>insert_many<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Paul"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"32"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"California"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"20000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                 <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Allen"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"15000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                 <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Teddy"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"23"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Norway"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"20000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                 <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Mark"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Rich-Mond"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"65000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                 <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"David"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"27"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"85000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                 <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Kim"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"22"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"South-Hall"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"45000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                 <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"24"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Houston"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"10000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取集合中的值</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> mongoCollection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Salary'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n\n\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使id自增</span>    mongoCollection<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建计数表</span>    mongoDatabase<span class="token punctuation">.</span>counters<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token string">"people_id"</span><span class="token punctuation">,</span> <span class="token string">"sequence_value"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建存储过程</span>    mongoDatabase<span class="token punctuation">.</span>system_js<span class="token punctuation">.</span>getSequenceValue <span class="token operator">=</span> <span class="token triple-quoted-string string">'''function getSequenceValue(sequenceName){            var sequenceDocument = db.counters.findAndModify({                query: {_id: sequenceName},                update: {$inc:{sequence_value: 1}},                new:true            });            return sequenceDocument.sequence_value;        }'''</span>    mongoCollection<span class="token punctuation">.</span>insert_many<span class="token punctuation">(</span>            <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Paul"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"32"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"California"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"20000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Allen"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"15000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Teddy"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"23"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Norway"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"20000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Mark"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Rich-Mond"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"65000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"David"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"27"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"85000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Kim"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"22"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"South-Hall"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"45000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"24"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Houston"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"10000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> mongoCollection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Salary'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> pymongo<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>PyMongoError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"mongo Error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="python连接Redis数据库"><a href="#python连接Redis数据库" class="headerlink" title="python连接Redis数据库"></a>python连接Redis数据库</h3><h4 id="1、使用redis"><a href="#1、使用redis" class="headerlink" title="1、使用redis"></a>1、使用redis</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># https://pypi.python.org/pypi/redis/2.10.5</span><span class="token comment" spellcheck="true"># http://redis-py.readthedocs.io/en/latest/#</span><span class="token keyword">import</span> redisr <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>ping<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 看信息</span>info <span class="token operator">=</span> r<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># or 查看部分信息</span><span class="token comment" spellcheck="true"># info = r.info("Server")</span><span class="token comment" spellcheck="true"># 输出信息</span>items <span class="token operator">=</span> info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"item %s----%s:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除键和对应的值</span>r<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 可以一次性push一条或多条数据</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Paul"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"32"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"California"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"20000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Allen"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"15000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Teddy"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"23"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Norway"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"20000.00"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Mark"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Rich-Mond"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"65000.00"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"David"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"27"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"85000.00"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Kim"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"22"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"South-Hall"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"45000.00"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"24"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Houston"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"10000.00"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># eval用来将dict格式的字符串转换成dict</span><span class="token keyword">for</span> row <span class="token keyword">in</span> map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> eval<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>llen<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Salary'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭当前连接</span><span class="token comment" spellcheck="true"># r.shutdown() #这个是关闭redis服务端</span></code></pre><h4 id="2、使用pyredis"><a href="#2、使用pyredis" class="headerlink" title="2、使用pyredis"></a>2、使用pyredis</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># http://pyredis.readthedocs.io/en/latest/</span><span class="token keyword">import</span> pyredisr <span class="token operator">=</span> pyredis<span class="token punctuation">.</span>Client<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>ping<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 看信息</span><span class="token comment" spellcheck="true"># info = r.execute("info").decode()</span><span class="token comment" spellcheck="true"># or 查看部分信息</span>info <span class="token operator">=</span> r<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token string">"Server"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除键和对应的值</span>r<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 可以一次性push一条或多条数据</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token triple-quoted-string string">'''{"id": 1, "Name": "Paul", "Age": "32", "Address": "California", "Salary": "20000.00"}'''</span><span class="token punctuation">,</span>        <span class="token triple-quoted-string string">'''{"id": 2, "Name": "Allen", "Age": "25", "Address": "Texas", "Salary": "15000.00"}'''</span><span class="token punctuation">,</span>        <span class="token triple-quoted-string string">'''{"id": 3, "Name": "Teddy", "Age": "23", "Address": "Norway", "Salary": "20000.00"}'''</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token triple-quoted-string string">'''{"id": 4, "Name": "Mark", "Age": "25", "Address": "Rich-Mond", "Salary": "65000.00"}'''</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token triple-quoted-string string">'''{"id": 5, "Name": "David", "Age": "27", "Address": "Texas", "Salary": "85000.00"}'''</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token triple-quoted-string string">'''{"id": 6, "Name": "Kim", "Age": "22", "Address": "South-Hall", "Salary": "45000.00"}'''</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token triple-quoted-string string">'''{"id": 7, "Name": "James", "Age": "24", "Address": "Houston", "Salary": "10000.00"}'''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># eval用来将dict格式的字符串转换成dict</span><span class="token keyword">for</span> row <span class="token keyword">in</span> map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> eval<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>llen<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Salary'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭当前连接</span>r<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="python连接sqlite数据库"><a href="#python连接sqlite数据库" class="headerlink" title="python连接sqlite数据库"></a>python连接sqlite数据库</h3><p>sqlite3——内置库，用于和sqlite数据库的交互</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># http://www.runoob.com/sqlite/sqlite-python.html</span><span class="token keyword">import</span> sqlite3<span class="token keyword">import</span> traceback<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果表不存在,就创建</span>    <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'test.db'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Opened database successfully"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 删除表</span>        conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS  COMPANY"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建表</span>        sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                 CREATE TABLE IF NOT EXISTS COMPANY               (ID INTEGER  PRIMARY KEY       AUTOINCREMENT,               NAME           TEXT    NOT NULL,               AGE            INT     NOT NULL,               ADDRESS        CHAR(50),               SALARY         REAL);        """</span>        conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"create table successfully"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 添加数据</span>        conn<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span><span class="token string">"INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES (?, ?, ?, ? )"</span><span class="token punctuation">,</span>                         <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Paul'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token string">'Allen'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">15000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token string">'Teddy'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'Norway'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token string">'Mark'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Rich-Mond '</span><span class="token punctuation">,</span> <span class="token number">65000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">85000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token string">'Kim'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'South-Hall'</span><span class="token punctuation">,</span> <span class="token number">45000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token string">'James'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'Houston'</span><span class="token punctuation">,</span> <span class="token number">10000.00</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ( 'Paul', 32, 'California', 20000.00 )")</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ('Allen', 25, 'Texas', 15000.00 )")</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ('Teddy', 23, 'Norway', 20000.00 )")</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ( 'Mark', 25, 'Rich-Mond ', 65000.00 )")</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ( 'David', 27, 'Texas', 85000.00 )");</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ( 'Kim', 22, 'South-Hall', 45000.00 )")</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ( 'James', 24, 'Houston', 10000.00 )")</span>        <span class="token comment" spellcheck="true"># 提交,否则重新运行程序时,表中无数据</span>        conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"insert successfully"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 查询表</span>        sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""            select id,NAME,AGE,ADDRESS,SALARY FROM COMPANY         """</span>        result <span class="token operator">=</span> conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> result<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %.2f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># or</span>            <span class="token comment" spellcheck="true"># print('{:10s} {:.2f}'.format("salary", row[4]))</span><span class="token keyword">except</span> sqlite3<span class="token punctuation">.</span>Error <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sqlite3 Error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python交互 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python交互 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水调歌头·黄州快哉亭赠张偓佺</title>
      <link href="/posts/ec53.html"/>
      <url>/posts/ec53.html</url>
      
        <content type="html"><![CDATA[<h1 id="水调歌头·黄州快哉亭赠张偓佺"><a href="#水调歌头·黄州快哉亭赠张偓佺" class="headerlink" title="水调歌头·黄州快哉亭赠张偓佺"></a>水调歌头·黄州快哉亭赠张偓佺</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​                                                                水调歌头·黄州快哉亭赠张偓佺</p><p>​                                                                                                                                        宋·苏轼</p><p>​        落日绣帘卷，亭下水连空。知君为我新作，窗户湿青红。长记平山堂上，欹(qī)枕江南烟雨，杳(yǎo)杳没孤鸿。认得醉翁语，山色有无中。</p><p>​        一千顷，都镜净，倒碧峰。忽然浪起，掀舞一叶白头翁。堪笑兰台公子，未解庄生天籁(lài)，刚道有雌雄。一点浩然气，千里快哉风。</p><p>​        </p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>​        落日中卷起绣帘眺望，亭下江水与碧空相接，远处的夕阳与亭台相映，空阔无际。为了我的来到，你特意在窗户上涂上了清油的朱漆，色彩犹新。这让我想起当年在平山堂的时候，靠着枕席，欣赏江南的烟雨，遥望远方天际孤鸿出没的情景。今天看到眼前的景象，我方体会到欧阳醉翁词句中所描绘的，山色若隐若现的景致。</p><p>​        广阔的水面十分明净，山峰翠绿的影子倒映其中。忽然江面波涛汹涌，一个渔翁驾着小舟在风浪中掀舞。见此不由得想起了宋玉的《风赋》，像宋玉这样可笑的人，是不可能理解庄子的风是天籁之说的，硬说什么风有雄雌。其实，一个人只要具备至大至刚的浩然之气，就能在任何境遇中都处之泰然，享受到无穷快意的千里雄风。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>湿青红：谓漆色鲜润。</li><li>平山堂：宋仁宗庆历八年（1048年）欧阳修在扬州所建。</li><li>欹枕：谓卧着可以看望。</li><li>醉翁：欧阳修别号。</li><li>“山色”句：出自欧阳修《朝中措·平山栏槛倚晴空》。</li><li>倒碧峰：碧峰倒影水中。</li><li>一叶：指小舟。</li><li>白头翁：指老船夫。</li><li>兰台公子：指战国楚辞赋家宋玉，相传曾作兰台令。</li><li>庄生：战国时道家学者庄周。</li><li>天籁：是发于自然的音响，即指风吹声。</li><li>刚道：“硬说”的意思。</li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><p>​        这首词又名《快哉亭作》，是苏轼豪放词的代表作之一。全词通过描绘快哉亭周围壮阔的山光水色，抒发了作者旷达豪迈的处世精神。</p><p>　　此词描写的对象，主要是“快哉亭”周围的广阔景象。开头四句，先用实笔，描绘亭下江水与碧空相接、远处夕阳与亭台相映的优美图景，展现出一片空阔无际的境界，充满了苍茫阔远的情致。“知君为我新作”两句，交待新亭的创建，点明亭主和自己的密切关系，反客为主、诙谐风趣地把张偓佺所建的快哉亭说成特意为自己而造，又写亭台窗户涂抹上青红两色油漆，色彩犹新。“湿”字形容油漆未干，颇为传神。</p><p>　　“长记平山堂上”五句，是记忆中情景，又是对眼前景象的一种以虚托实的想象式侧面描写。作者用“长记”二字，唤起他曾在扬州平山堂所领略的“江南烟雨”“杳杳没孤鸿”那种若隐若现、若有若无、高远空蒙的江南山色的美好回忆。他又以此比拟他在“快哉亭”上所目睹的景致，将“快哉亭”与“平山堂”融为一体，构成一种优美独特的意境。这种以忆景写景的笔法，不但平添了曲折蕴藉的情致，而且加强了词境的空灵飞动。以上五句新颖别致，引人入胜，通过作者昔日的淋漓兴致，传达出当日快哉亭前览胜的欣喜之情。</p><p>　　上片是用虚实结合的笔法，描写快哉亭下及其远处的胜景。下片换头以下五句，又用高超的艺术手法展现亭前广阔江面倏忽变化、涛澜汹涌、风云开阖、动心骇目的壮观场面。词人并由此生发开来，抒发其江湖豪兴和人生追求。“一千顷，都镜净，倒碧峰”三句，写眼前广阔明净的江面，清澈见底，碧绿的山峰，倒映江水中，形成了一幅优美动人的平静的山水画卷，这是对水色山光的静态描写。“忽然”两句，写一阵巨风，江面倏忽变化，涛澜汹涌，风云开阖，一个渔翁驾着一叶小舟，在狂风巨浪中掀舞。至此，作者的描写奇峰突起，由静境忽变动境，从而自自然然地过渡到全词着意表现的着重点——一位奋力搏击风涛的白发老翁。这位白头翁的形象，其实是东坡自身人格风貌的一种象征。以下几句，作者由风波浪尖上弄舟的老人，自然引出他对战国时楚国兰台令宋玉所作《风赋》的议论。作者看来，宋玉将风分为“大王之雄风”和“庶人之雌风”是十分可笑的，是未解自然之理的生硬说教，白头翁搏击风浪的壮伟风神即是明证。其实，庄子所言天籁本身绝无贵贱之分，关键于人的精神境界的高下。他以“一点浩然气，千里快哉风”这一豪气干云的惊世骇俗之语昭告世人：一个人只要具备了至大至刚的浩然之气，就能超凡脱俗，刚直不阿，坦然自适，任何境遇中，都能处之泰然，享受使人感到无穷快意的千里雄风。苏轼这种逆境中仍保持浩然之气的坦荡的人生态度，显然具有积极的社会意义。</p><p>　　这首词在艺术构思和结构上，具有波澜起伏、跌宕多姿、大开大合、大起大落的特点。下片的描写和议论，豪纵酣畅，气势磅礴，词中出没风涛的白头翁形象，犹如百川汇海，含蓄地点明全篇主旨，有强烈的震撼力。全词熔写景、抒情、议论于一炉，既描写了浩阔雄壮、水天一色的自然风光，又其中灌注了一种坦荡旷达的浩然之气，展现出词人身处逆境却泰然处之、大气凛然的精神风貌，充分体现了苏词雄奇奔放的特色。</p><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>　　这首词是作者贬官在黄州（今湖北黄冈）时作的。快哉亭，在黄州的江边，张怀民修建。怀民名梦得，又字偓佺，当时也贬官在黄州，与苏轼的心境相同，二人交往密切。作者不仅欣赏江边的优美风景，而更加钦佩张的气度。所以他为张所建的亭起名为“快哉亭”。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>100个网络基础知识</title>
      <link href="/posts/7d46.html"/>
      <url>/posts/7d46.html</url>
      
        <content type="html"><![CDATA[<h1 id="100个网络基础知识"><a href="#100个网络基础知识" class="headerlink" title="100个网络基础知识"></a>100个网络基础知识</h1><h3 id="1）什么是链接？"><a href="#1）什么是链接？" class="headerlink" title="1）什么是链接？"></a>1）什么是链接？</h3><p>链接是指两个设备之间的连接。它包括用于一个设备能够与另一个设备通信的电缆类型和协议。</p><h3 id="2）OSI-参考模型的层次是什么？"><a href="#2）OSI-参考模型的层次是什么？" class="headerlink" title="2）OSI 参考模型的层次是什么？"></a>2）OSI 参考模型的层次是什么？</h3><p>有 7 个 OSI 层：物理层，数据链路层，网络层，传输层，会话层，表示层和应用层。</p><h3 id="3）什么是骨干网？"><a href="#3）什么是骨干网？" class="headerlink" title="3）什么是骨干网？"></a>3）什么是骨干网？</h3><p>骨干网络是集中的基础设施，旨在将不同的路由和数据分发到各种网络。它还处理带宽管理和各种通道。</p><h3 id="4）什么是-LAN？"><a href="#4）什么是-LAN？" class="headerlink" title="4）什么是 LAN？"></a>4）什么是 LAN？</h3><p>LAN 是局域网的缩写。它是指计算机与位于小物理位置的其他网络设备之间的连接。</p><h3 id="5）什么是节点？"><a href="#5）什么是节点？" class="headerlink" title="5）什么是节点？"></a>5）什么是节点？</h3><p>节点是指连接发生的点。它可以是作为网络一部分的计算机或设备。为了形成网络连接，需要两个或更多个节点。</p><h3 id="6）什么是路由器？"><a href="#6）什么是路由器？" class="headerlink" title="6）什么是路由器？"></a>6）什么是路由器？</h3><p>路由器可以连接两个或更多网段。这些是在其路由表中存储信息的智能网络设备，例如路径，跳数等。有了这个信息，他们就可以确定数据传输的最佳路径。路由器在 OSI 网络层运行。</p><h3 id="7）什么是点对点链接？"><a href="#7）什么是点对点链接？" class="headerlink" title="7）什么是点对点链接？"></a>7）什么是点对点链接？</h3><p>它是指网络上两台计算机之间的直接连接。除了将电缆连接到两台计算机的 NIC卡之外，点对点连接不需要任何其他网络设备。</p><h3 id="8）什么是匿名-FTP？"><a href="#8）什么是匿名-FTP？" class="headerlink" title="8）什么是匿名 FTP？"></a>8）什么是匿名 FTP？</h3><p>匿名 FTP 是授予用户访问公共服务器中的文件的一种方式。允许访问这些服务器中的数据的用户不需要识别自己，而是以匿名访客身份登录。</p><h3 id="9）什么是子网掩码？"><a href="#9）什么是子网掩码？" class="headerlink" title="9）什么是子网掩码？"></a>9）什么是子网掩码？</h3><p>子网掩码与 IP 地址组合，以识别两个部分：扩展网络地址和主机地址。像 IP 地址一样，子网掩码由 32 位组成。</p><h3 id="10）UTP-电缆允许的最大长度是多少？"><a href="#10）UTP-电缆允许的最大长度是多少？" class="headerlink" title="10）UTP 电缆允许的最大长度是多少？"></a>10）UTP 电缆允许的最大长度是多少？</h3><p>UTP 电缆的单段具有 90 到 100 米的允许长度。这种限制可以通过使用中继器和开关来克服</p><h3 id="11）什么是数据封装？"><a href="#11）什么是数据封装？" class="headerlink" title="11）什么是数据封装？"></a>11）什么是数据封装？</h3><p>数据封装是在通过网络传输信息之前将信息分解成更小的可管理块的过程。在这个过程中，源和目标地址与奇偶校验一起附加到标题中。</p><h3 id="12）描述网络拓扑"><a href="#12）描述网络拓扑" class="headerlink" title="12）描述网络拓扑"></a>12）描述网络拓扑</h3><p>网络拓扑是指计算机网络的布局。它显示了设备和电缆的物理布局，以及它们如何连接到彼此。</p><h3 id="13）什么是-VPN？"><a href="#13）什么是-VPN？" class="headerlink" title="13）什么是 VPN？"></a>13）什么是 VPN？</h3><p>VPN 意味着虚拟专用网络，这种技术允许通过网络（如 Internet）创建安全通道。</p><p>例如，VPN 允许您建立到远程服务器的安全拨号连接。</p><h3 id="14）简要描述-NAT。"><a href="#14）简要描述-NAT。" class="headerlink" title="14）简要描述 NAT。"></a>14）简要描述 NAT。</h3><p>NAT 是网络地址转换。这是一种协议，为公共网络上的多台计算机提供一种方式来共享到 Internet 的单一连接。</p><h3 id="15）OSI-参考模型下网络层的工作是什么？"><a href="#15）OSI-参考模型下网络层的工作是什么？" class="headerlink" title="15）OSI 参考模型下网络层的工作是什么？"></a>15）OSI 参考模型下网络层的工作是什么？</h3><p>网络层负责数据路由，分组交换和网络拥塞控制。路由器在此层下运行。</p><h3 id="16）网络拓扑如何影响您在建立网络时的决策？"><a href="#16）网络拓扑如何影响您在建立网络时的决策？" class="headerlink" title="16）网络拓扑如何影响您在建立网络时的决策？"></a>16）网络拓扑如何影响您在建立网络时的决策？</h3><p>网络拓扑决定了互连设备必须使用什么媒介。它还作为适用于设置的材料，连接器和终端的基础。</p><h3 id="17）什么是-RIP？"><a href="#17）什么是-RIP？" class="headerlink" title="17）什么是 RIP？"></a>17）什么是 RIP？</h3><p>RIP，路由信息协议的简称由路由器用于将数据从一个网络发送到另一个网络。</p><p>它通过将其路由表广播到网络中的所有其他路由器来有效地管理路由数据。它以跳数为单位确定网络距离。</p><h3 id="18）什么是不同的方式来保护计算机网络？"><a href="#18）什么是不同的方式来保护计算机网络？" class="headerlink" title="18）什么是不同的方式来保护计算机网络？"></a>18）什么是不同的方式来保护计算机网络？</h3><p>有几种方法可以做到这一点。在所有计算机上安装可靠和更新的防病毒程序。确保防火墙的设置和配置正确。用户认证也将有很大的帮助。所有这些组合将构成一个高度安全的网络。</p><h3 id="19）什么是-NIC？"><a href="#19）什么是-NIC？" class="headerlink" title="19）什么是 NIC？"></a>19）什么是 NIC？</h3><p>NIC 是网络接口卡（网卡）的缩写。这是连接到 PC 以连接到网络沈北。每个 NIC都有自己的 MAC 地址，用于标识网络上的 PC。</p><h3 id="20）什么是-WAN？"><a href="#20）什么是-WAN？" class="headerlink" title="20）什么是 WAN？"></a>20）什么是 WAN？</h3><p>WAN 代表广域网。它是地理上分散的计算机和设备的互连。它连接位于不同地区和国家/地区的网络。</p><h3 id="21）OSI-物理层的重要性是什么？"><a href="#21）OSI-物理层的重要性是什么？" class="headerlink" title="21）OSI 物理层的重要性是什么？"></a>21）OSI 物理层的重要性是什么？</h3><p>物理层进行从数据位到电信号的转换，反之亦然。这是网络设备和电缆类型的考虑和设置。</p><h3 id="22）TCP-IP-下有多少层？"><a href="#22）TCP-IP-下有多少层？" class="headerlink" title="22）TCP/IP 下有多少层？"></a>22）TCP/IP 下有多少层？</h3><p>有四层：网络层，互联网层，传输层和应用层。</p><h3 id="23）什么是代理服务器，它们如何保护计算机网络？"><a href="#23）什么是代理服务器，它们如何保护计算机网络？" class="headerlink" title="23）什么是代理服务器，它们如何保护计算机网络？"></a>23）什么是代理服务器，它们如何保护计算机网络？</h3><p>代理服务器主要防止外部用户识别内部网络的 IP 地址。不知道正确的 IP 地址，甚至无法识别网络的物理位置。代理服务器可以使外部用户几乎看不到网络。</p><h3 id="24）OSI-会话层的功能是什么？"><a href="#24）OSI-会话层的功能是什么？" class="headerlink" title="24）OSI 会话层的功能是什么？"></a>24）OSI 会话层的功能是什么？</h3><p>该层为网络上的两个设备提供协议和方法，通过举行会话来相互通信。这包括设置会话，管理会话期间的信息交换以及终止会话时的解除过程。</p><h3 id="25）实施容错系统的重要性是什么？有限吗？"><a href="#25）实施容错系统的重要性是什么？有限吗？" class="headerlink" title="25）实施容错系统的重要性是什么？有限吗？"></a>25）实施容错系统的重要性是什么？有限吗？</h3><p>容错系统确保持续的数据可用性。这是通过消除单点故障来实现的。但是，在某些情况下，这种类型的系统将无法保护数据，例如意外删除。</p><h3 id="26）10Base-T-是什么意思？"><a href="#26）10Base-T-是什么意思？" class="headerlink" title="26）10Base-T 是什么意思？"></a>26）10Base-T 是什么意思？</h3><p>10 是指数据传输速率，在这种情况下是 10Mbps。“Base”是指基带。T 表示双绞线，这是用于该网络的电缆。</p><h3 id="27）什么是私有-IP-地址？"><a href="#27）什么是私有-IP-地址？" class="headerlink" title="27）什么是私有 IP 地址？"></a>27）什么是私有 IP 地址？</h3><p>专用 IP 地址被分配用于内部网。这些地址用于内部网络，不能在外部公共网络上路由。这些确保内部网络之间不存在任何冲突，同时私有 IP 地址的范围同样可重复使用于多个内部网络，因为它们不会“看到”彼此。</p><h3 id="28）什么是-NOS？"><a href="#28）什么是-NOS？" class="headerlink" title="28）什么是 NOS？"></a>28）什么是 NOS？</h3><p>NOS 或网络操作系统是专门的软件，其主要任务是向计算机提供网络连接，以便能够与其他计算机和连接的设备进行通信。</p><h3 id="29）什么是-DoS？"><a href="#29）什么是-DoS？" class="headerlink" title="29）什么是 DoS？"></a>29）什么是 DoS？</h3><p>DoS 或拒绝服务攻击是试图阻止用户访问互联网或任何其他网络服务。这种攻击可能有不同的形式，由一群永久者组成。这样做的一个常见方法是使系统服务器过载，使其无法再处理合法流量，并将被强制重置。</p><h3 id="30）什么是-OSI，它在电脑网络中扮演什么角色？"><a href="#30）什么是-OSI，它在电脑网络中扮演什么角色？" class="headerlink" title="30）什么是 OSI，它在电脑网络中扮演什么角色？"></a>30）什么是 OSI，它在电脑网络中扮演什么角色？</h3><p>OSI（开放系统互连）作为数据通信的参考模型。它由 7 层组成，每层定义了网络设备如何相互连接和通信的特定方面。一层可以处理所使用的物理介质，而另一层则指示如何通过网络实际传输数据。</p><h3 id="31）电缆被屏蔽并具有双绞线的目的是什么？"><a href="#31）电缆被屏蔽并具有双绞线的目的是什么？" class="headerlink" title="31）电缆被屏蔽并具有双绞线的目的是什么？"></a>31）电缆被屏蔽并具有双绞线的目的是什么？</h3><p>其主要目的是防止串扰。串扰是电磁干扰或噪声，可能影响通过电缆传输的数据。</p><h3 id="32）地址共享的优点是什么？"><a href="#32）地址共享的优点是什么？" class="headerlink" title="32）地址共享的优点是什么？"></a>32）地址共享的优点是什么？</h3><p>通过使用地址转换而不是路由，地址共享提供了固有的安全性优势。这是因为互联网上的主机只能看到提供地址转换的计算机上的外部接口的公共 IP 地址，而不是内部网络上的私有 IP 地址。</p><h3 id="33）什么是-MAC-地址？"><a href="#33）什么是-MAC-地址？" class="headerlink" title="33）什么是 MAC 地址？"></a>33）什么是 MAC 地址？</h3><p>MAC 或媒介访问控制，可以唯一地标识网络上的设备。它也被称为物理地址或以太网地址。MAC 地址由 6 个字节组成。</p><h3 id="34）在-OSI-参考模型方面，TCP-IP-应用层的等同层或多层是什么？"><a href="#34）在-OSI-参考模型方面，TCP-IP-应用层的等同层或多层是什么？" class="headerlink" title="34）在 OSI 参考模型方面，TCP/IP 应用层的等同层或多层是什么？"></a>34）在 OSI 参考模型方面，TCP/IP 应用层的等同层或多层是什么？</h3><h3 id="TCP-IP-应用层实际上在-OSI-模型上具有三个对等体：会话层，表示层和应用层。"><a href="#TCP-IP-应用层实际上在-OSI-模型上具有三个对等体：会话层，表示层和应用层。" class="headerlink" title="TCP/IP 应用层实际上在 OSI 模型上具有三个对等体：会话层，表示层和应用层。"></a>TCP/IP 应用层实际上在 OSI 模型上具有三个对等体：会话层，表示层和应用层。</h3><h3 id="35）如何识别给定-IP-地址的-IP-类？"><a href="#35）如何识别给定-IP-地址的-IP-类？" class="headerlink" title="35）如何识别给定 IP 地址的 IP 类？"></a>35）如何识别给定 IP 地址的 IP 类？</h3><p>通过查看任何给定 IP 地址的第一个八位字节，您可以识别它是 A 类，B 类还是 C类。如果第一个八位字节以 0 位开头，则该地址为 Class A.如果以位 10 开头，则该地址为 B 类地址。如果从 110 开始，那么它是 C 类网络。</p><h3 id="36）OSPF-的主要目的是什么？"><a href="#36）OSPF-的主要目的是什么？" class="headerlink" title="36）OSPF 的主要目的是什么？"></a>36）OSPF 的主要目的是什么？</h3><p>OSPF 或开放最短路径优先，是使用路由表确定数据交换的最佳路径的链路状态路由协议。</p><h3 id="37）什么是防火墙？"><a href="#37）什么是防火墙？" class="headerlink" title="37）什么是防火墙？"></a>37）什么是防火墙？</h3><p>防火墙用于保护内部网络免受外部攻击。这些外部威胁可能是黑客谁想要窃取数据或计算机病毒，可以立即消除数据。它还可以防止来自外部网络的其他用户访问专用网络。</p><h3 id="38）描述星形拓扑"><a href="#38）描述星形拓扑" class="headerlink" title="38）描述星形拓扑"></a>38）描述星形拓扑</h3><p>星形拓扑由连接到节点的中央集线器组成。这是最简单的设置和维护之一。</p><h3 id="39）什么是网关？"><a href="#39）什么是网关？" class="headerlink" title="39）什么是网关？"></a>39）什么是网关？</h3><p>网关提供两个或多个网段之间的连接。它通常是运行网关软件并提供翻译服务的计算机。该翻译是允许不同系统在网络上通信的关键。</p><h3 id="40）星型拓扑的缺点是什么？"><a href="#40）星型拓扑的缺点是什么？" class="headerlink" title="40）星型拓扑的缺点是什么？"></a>40）星型拓扑的缺点是什么？</h3><p>星形拓扑的一个主要缺点是，一旦中央集线器或交换机被损坏，整个网络就变得不可用了。</p><h3 id="41）什么是-SLIP？"><a href="#41）什么是-SLIP？" class="headerlink" title="41）什么是 SLIP？"></a>41）什么是 SLIP？</h3><p>SLIP 或串行线路接口协议实际上是在 UNIX 早期开发的旧协议。这是用于远程访问的协议之一。</p><h3 id="42）给出一些私有网络地址的例子。"><a href="#42）给出一些私有网络地址的例子。" class="headerlink" title="42）给出一些私有网络地址的例子。"></a>42）给出一些私有网络地址的例子。</h3><p>10.0.0.0，子网掩码为 255.0.0.0</p><p>172.16.0.0，子网掩码为 255.240.0.0</p><p>千人ccie认证交流群463904693</p><p>领取最新CCIE考试题库</p><p>CCIE 认证经验分享千人群：463904693</p><p>192.168.0.0，子网掩码为 255.255.0.0</p><h3 id="43）什么是-tracert？"><a href="#43）什么是-tracert？" class="headerlink" title="43）什么是 tracert？"></a>43）什么是 tracert？</h3><p>Tracert 是一个 Windows 实用程序，可用于跟踪从路由器到目标网络的数据采集的路由。它还显示了在整个传输路由期间采用的跳数。</p><h3 id="44）网络管理员的功能是什么？"><a href="#44）网络管理员的功能是什么？" class="headerlink" title="44）网络管理员的功能是什么？"></a>44）网络管理员的功能是什么？</h3><p>网络管理员有许多责任，可以总结为 3 个关键功能：安装网络，配置网络设置以及网络的维护/故障排除。</p><h3 id="45）描述对等网络的一个缺点。"><a href="#45）描述对等网络的一个缺点。" class="headerlink" title="45）描述对等网络的一个缺点。"></a>45）描述对等网络的一个缺点。</h3><p>当您正在访问由网络上的某个工作站共享的资源时，该工作站的性能会降低。</p><h3 id="46）什么是混合网络？"><a href="#46）什么是混合网络？" class="headerlink" title="46）什么是混合网络？"></a>46）什么是混合网络？</h3><p>混合网络是利用客户端 - 服务器和对等体系结构的网络设置。</p><h3 id="47）什么是-DHCP？"><a href="#47）什么是-DHCP？" class="headerlink" title="47）什么是 DHCP？"></a>47）什么是 DHCP？</h3><p>DHCP 是动态主机配置协议的缩写。其主要任务是自动为网络上的设备分配 IP 地址。它首先检查任何设备尚未占用的下一个可用地址，然后将其分配给网络设备。</p><h3 id="48）ARP-的主要工作是什么？"><a href="#48）ARP-的主要工作是什么？" class="headerlink" title="48）ARP 的主要工作是什么？"></a>48）ARP 的主要工作是什么？</h3><p>ARP 或地址解析协议的主要任务是将已知的 IP 地址映射到 MAC 层地址。</p><h3 id="49）什么是-TCP-IP？"><a href="#49）什么是-TCP-IP？" class="headerlink" title="49）什么是 TCP/IP？"></a>49）什么是 TCP/IP？</h3><p>TCP/IP 是传输控制协议/互联网协议的缩写。这是一组协议层，旨在在不同类型的计算机网络（也称为异构网络）上进行数据交换。</p><h3 id="50）如何使用路由器管理网络？"><a href="#50）如何使用路由器管理网络？" class="headerlink" title="50）如何使用路由器管理网络？"></a>50）如何使用路由器管理网络？</h3><p>路由器内置了控制台，可让您配置不同的设置，如安全和数据记录。您可以为计算机分配限制，例如允许访问的资源，或者可以浏览互联网的某一天的特定时间。</p><p>您甚至可以对整个网络中看不到的网站施加限制。</p><h3 id="51）当您希望在不同平台（如-UNIX-系统和-Windows-服务器之间）传输文件时，可以应用什么协议？"><a href="#51）当您希望在不同平台（如-UNIX-系统和-Windows-服务器之间）传输文件时，可以应用什么协议？" class="headerlink" title="51）当您希望在不同平台（如 UNIX 系统和 Windows 服务器之间）传输文件时，可以应用什么协议？"></a>51）当您希望在不同平台（如 UNIX 系统和 Windows 服务器之间）传输文件时，可以应用什么协议？</h3><p>使用 FTP（文件传输协议）在这些不同的服务器之间进行文件传输。这是可能的，因为 FTP 是平台无关的。</p><h3 id="52）默认网关的使用是什么？"><a href="#52）默认网关的使用是什么？" class="headerlink" title="52）默认网关的使用是什么？"></a>52）默认网关的使用是什么？</h3><p>默认网关提供了本地网络连接到外部网络的方法。用于连接外部网络的默认网关通常是外部路由器端口的地址。</p><h3 id="53）保护网络的一种方法是使用密码。什么可以被认为是好的密码？"><a href="#53）保护网络的一种方法是使用密码。什么可以被认为是好的密码？" class="headerlink" title="53）保护网络的一种方法是使用密码。什么可以被认为是好的密码？"></a>53）保护网络的一种方法是使用密码。什么可以被认为是好的密码？</h3><p>良好的密码不仅由字母组成，还包括字母和数字的组合。结合大小写字母的密码比使用所有大写字母或全部小写字母的密码有利。密码必须不能被黑客很容易猜到，比如日期，姓名，收藏夹等等。</p><h3 id="54）UTP-电缆的正确终止率是多少？"><a href="#54）UTP-电缆的正确终止率是多少？" class="headerlink" title="54）UTP 电缆的正确终止率是多少？"></a>54）UTP 电缆的正确终止率是多少？</h3><p>非屏蔽双绞线网线的正常终止是 100 欧姆。</p><h3 id="55）什么是-netstat？"><a href="#55）什么是-netstat？" class="headerlink" title="55）什么是 netstat？"></a>55）什么是 netstat？</h3><p>Netstat 是一个命令行实用程序。它提供有关连接当前 TCP/IP 设置的有用信息。</p><h3 id="56）C-类网络中的网络-ID-数量是多少？"><a href="#56）C-类网络中的网络-ID-数量是多少？" class="headerlink" title="56）C 类网络中的网络 ID 数量是多少？"></a>56）C 类网络中的网络 ID 数量是多少？</h3><p>对于 C 类网络，可用的网络 ID 位数为 21。可能的网络 ID 数目为 2，提高到 21或 2,097,152。每个网络 ID 的主机 ID 数量为 2，增加到 8 减去 2，或 254。</p><h3 id="57）使用长于规定长度的电缆时会发生什么？"><a href="#57）使用长于规定长度的电缆时会发生什么？" class="headerlink" title="57）使用长于规定长度的电缆时会发生什么？"></a>57）使用长于规定长度的电缆时会发生什么？</h3><p>电缆太长会导致信号丢失。这意味着数据传输和接收将受到影响，因为信号长度下降。</p><h3 id="58）什么常见的软件问题可能导致网络缺陷？"><a href="#58）什么常见的软件问题可能导致网络缺陷？" class="headerlink" title="58）什么常见的软件问题可能导致网络缺陷？"></a>58）什么常见的软件问题可能导致网络缺陷？</h3><p>软件相关问题可以是以下任何一种或其组合：</p><p>- 客户端服务器问题</p><p>- 应用程序冲突</p><p>- 配置错误</p><p>- 协议不匹配</p><p>- 安全问题</p><p>- 用户政策和权利问题</p><h3 id="59）什么是-ICMP？"><a href="#59）什么是-ICMP？" class="headerlink" title="59）什么是 ICMP？"></a>59）什么是 ICMP？</h3><p>ICMP 是 Internet 控制消息协议。它为 TCP/IP 协议栈内的协议提供消息传递和通信。这也是管理由 PING 等网络工具使用的错误信息的协议。</p><blockquote></blockquote><h3 id="60）什么是-Ping？"><a href="#60）什么是-Ping？" class="headerlink" title="60）什么是 Ping？"></a>60）什么是 Ping？</h3><p>Ping 是一个实用程序，允许您检查网络上的网络设备之间的连接。您可以使用其IP 地址或设备名称（如计算机名称）ping 设备。</p><h3 id="61）什么是点对点（P2P）？"><a href="#61）什么是点对点（P2P）？" class="headerlink" title="61）什么是点对点（P2P）？"></a>61）什么是点对点（P2P）？</h3><p>对等是不在服务器上回复的网络。该网络上的所有 PC 都是单独的工作站。</p><h3 id="62）什么是-DNS？"><a href="#62）什么是-DNS？" class="headerlink" title="62）什么是 DNS？"></a>62）什么是 DNS？</h3><p>DNS 是域名系统。该网络服务的主要功能是为 TCP/IP 地址解析提供主机名。</p><h3 id="63）光纤与其他介质有什么优势？"><a href="#63）光纤与其他介质有什么优势？" class="headerlink" title="63）光纤与其他介质有什么优势？"></a>63）光纤与其他介质有什么优势？</h3><p>光纤的一个主要优点是不太容易受到电气干扰。它还支持更高的带宽，意味着可以发送和接收更多的数据。长距离信号降级也非常小。</p><h3 id="64）集线器和交换机有什么区别？"><a href="#64）集线器和交换机有什么区别？" class="headerlink" title="64）集线器和交换机有什么区别？"></a>64）集线器和交换机有什么区别？</h3><p>集线器充当多端口中继器。然而，随着越来越多的设备连接到它，它将无法有效地管理通过它的流量。交换机提供了一个更好的替代方案，可以提高性能，特别是在所有端口上预期有高流量时。</p><h3 id="65）Windows-RRAS-服务支持的不同网络协议是什么？"><a href="#65）Windows-RRAS-服务支持的不同网络协议是什么？" class="headerlink" title="65）Windows RRAS 服务支持的不同网络协议是什么？"></a>65）Windows RRAS 服务支持的不同网络协议是什么？</h3><p>支持三种主要的网络协议：NetBEUI，TCP/IP 和 IPX。</p><h3 id="66）A，B-和-C-类网络中的最大网络和主机是什么？"><a href="#66）A，B-和-C-类网络中的最大网络和主机是什么？" class="headerlink" title="66）A，B 和 C 类网络中的最大网络和主机是什么？"></a>66）A，B 和 C 类网络中的最大网络和主机是什么？</h3><p>对于 A 类，有 126 个可能的网络和 16,777,214 个主机</p><p>对于 B 类，有 16,384 个可能的网络和 65,534 个主机</p><p>对于 C 类，有 2,097,152 个可能的网络和 254 个主机</p><h3 id="67）直通电缆的标准颜色顺序是什么？"><a href="#67）直通电缆的标准颜色顺序是什么？" class="headerlink" title="67）直通电缆的标准颜色顺序是什么？"></a>67）直通电缆的标准颜色顺序是什么？</h3><p>橙色/白色，橙色，绿色/白色，蓝色，蓝色/白色，绿色，棕色/白色，棕色。</p><h3 id="68）什么协议落在-TCP-IP-协议栈的应用层之下？"><a href="#68）什么协议落在-TCP-IP-协议栈的应用层之下？" class="headerlink" title="68）什么协议落在 TCP/IP 协议栈的应用层之下？"></a>68）什么协议落在 TCP/IP 协议栈的应用层之下？</h3><p>以下是 TCP/IP 应用层协议：FTP，TFTP，Telnet 和 SMTP。</p><h3 id="69）您需要连接两台电脑进行文件共享。是否可以这样做，而不使用集线器或路由器？"><a href="#69）您需要连接两台电脑进行文件共享。是否可以这样做，而不使用集线器或路由器？" class="headerlink" title="69）您需要连接两台电脑进行文件共享。是否可以这样做，而不使用集线器或路由器？"></a>69）您需要连接两台电脑进行文件共享。是否可以这样做，而不使用集线器或路由器？</h3><p>是的，您可以使用一根电缆将两台计算机连接在一起。在这种情况下可以使用交叉型电缆。在这种设置中，一条电缆的数据传输引脚连接到另一条电缆的数据接收引脚，反之亦然。</p><h3 id="70）什么是-ipconfig？"><a href="#70）什么是-ipconfig？" class="headerlink" title="70）什么是 ipconfig？"></a>70）什么是 ipconfig？</h3><p>Ipconfig 是一个常用于识别网络上计算机的地址信息的实用程序。它可以显示物理地址以及 IP 地址。</p><h3 id="71）直通和交叉电缆有什么区别？"><a href="#71）直通和交叉电缆有什么区别？" class="headerlink" title="71）直通和交叉电缆有什么区别？"></a>71）直通和交叉电缆有什么区别？</h3><p>直通电缆用于将计算机连接到交换机，集线器或路由器。交叉电缆用于将两个类似设备连接在一起，如 PC 到 PC 或集线器到集线器。</p><h3 id="72）什么是客户端-服务器？"><a href="#72）什么是客户端-服务器？" class="headerlink" title="72）什么是客户端/服务器？"></a>72）什么是客户端/服务器？</h3><p>客户端/服务器是一种类型的网络，其中一个或多个计算机充当服务器。服务器提供集中的资源库，如打印机和文件。客户端是指访问服务器的工作站。</p><h3 id="73）描述网络。"><a href="#73）描述网络。" class="headerlink" title="73）描述网络。"></a>73）描述网络。</h3><p>网络是指用于数据通信的计算机和外围设备之间的互连。可以使用有线电缆或通过无线链路进行网络连接。</p><h3 id="74）将-NIC-卡从一台-PC-移动到另一台-PC-时，MAC-地址是否也被转移？"><a href="#74）将-NIC-卡从一台-PC-移动到另一台-PC-时，MAC-地址是否也被转移？" class="headerlink" title="74）将 NIC 卡从一台 PC 移动到另一台 PC 时，MAC 地址是否也被转移？"></a>74）将 NIC 卡从一台 PC 移动到另一台 PC 时，MAC 地址是否也被转移？</h3><p>是的，那是因为 MAC 地址是硬连线到 NIC 电路，而不是 PC。这也意味着当 NIC卡被另一个替换时，PC 可以具有不同的 MAC 地址。</p><h3 id="75）解释聚类支持"><a href="#75）解释聚类支持" class="headerlink" title="75）解释聚类支持"></a>75）解释聚类支持</h3><p>群集支持是指网络操作系统在容错组中连接多台服务器的能力。这样做的主要目的是在一台服务器发生故障的情况下，集群中的下一个服务器将继续进行所有处理。</p><h3 id="76）在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？"><a href="#76）在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？" class="headerlink" title="76）在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？"></a>76）在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？</h3><p>必须在所有服务器和工作站上安装防病毒程序，以确保保护。这是因为个人用户可以访问任何工作站，并在插入可移动硬盘驱动器或闪存驱动器时引入计算机病毒。</p><h3 id="77）描述以太网。"><a href="#77）描述以太网。" class="headerlink" title="77）描述以太网。"></a>77）描述以太网。</h3><p>以太网是当今使用的流行网络技术之一。它是在 20 世纪 70 年代初开发的，并且基于 IEEE 中规定的规范。以太网在局域网中使用。</p><h3 id="78）实现环形拓扑有什么缺点？"><a href="#78）实现环形拓扑有什么缺点？" class="headerlink" title="78）实现环形拓扑有什么缺点？"></a>78）实现环形拓扑有什么缺点？</h3><p>如果网络上的一个工作站发生故障，可能会导致整个网络丢失。另一个缺点是，当需要在网络的特定部分进行调整和重新配置时，整个网络也必须被暂时关闭。</p><h3 id="79）CSMA-CD-和-CSMA-CA-有什么区别？"><a href="#79）CSMA-CD-和-CSMA-CA-有什么区别？" class="headerlink" title="79）CSMA/CD 和 CSMA/CA 有什么区别？"></a>79）CSMA/CD 和 CSMA/CA 有什么区别？</h3><p>CSMA/CD 或碰撞检测，每当碰撞发生时重新发送数据帧。CSMA/CA 或碰撞避免，将首先在数据传输之前广播意图发送。</p><h3 id="80）什么是-SMTP？"><a href="#80）什么是-SMTP？" class="headerlink" title="80）什么是 SMTP？"></a>80）什么是 SMTP？</h3><h3 id="SMTP-是简单邮件传输协议的缩写。该协议处理所有内部邮件，并在-TCP-IP-协议栈上提供必要的邮件传递服务。"><a href="#SMTP-是简单邮件传输协议的缩写。该协议处理所有内部邮件，并在-TCP-IP-协议栈上提供必要的邮件传递服务。" class="headerlink" title="SMTP 是简单邮件传输协议的缩写。该协议处理所有内部邮件，并在 TCP/IP 协议栈上提供必要的邮件传递服务。"></a>SMTP 是简单邮件传输协议的缩写。该协议处理所有内部邮件，并在 TCP/IP 协议栈上提供必要的邮件传递服务。</h3><h3 id="81）什么是组播路由？"><a href="#81）什么是组播路由？" class="headerlink" title="81）什么是组播路由？"></a>81）什么是组播路由？</h3><p>组播路由是一种有针对性的广播形式，将消息发送到所选择的用户组，而不是将其发送到子网上的所有用户。</p><h3 id="82）加密在网络上的重要性是什么？"><a href="#82）加密在网络上的重要性是什么？" class="headerlink" title="82）加密在网络上的重要性是什么？"></a>82）加密在网络上的重要性是什么？</h3><p>加密是将信息转换成用户不可读的代码的过程。然后使用秘密密钥或密码将其翻译或解密回其正常可读格式。加密有助于确保中途截获的信息仍然不可读，因为用户必须具有正确的密码或密钥。</p><h3 id="83）如何安排和显示-IP-地址？"><a href="#83）如何安排和显示-IP-地址？" class="headerlink" title="83）如何安排和显示 IP 地址？"></a>83）如何安排和显示 IP 地址？</h3><p>IP 地址显示为一系列由周期或点分隔的四位十进制数字。这种安排的另一个术语是点分十进制格式。一个例子是 192.168.101.2</p><h3 id="84）解释认证的重要性。"><a href="#84）解释认证的重要性。" class="headerlink" title="84）解释认证的重要性。"></a>84）解释认证的重要性。</h3><p>认证是在用户登录网络之前验证用户凭据的过程。它通常使用用户名和密码进行。这提供了限制来自网络上的有害入侵者的访问的安全手段。</p><h3 id="85）隧道模式是什么意思？"><a href="#85）隧道模式是什么意思？" class="headerlink" title="85）隧道模式是什么意思？"></a>85）隧道模式是什么意思？</h3><p>这是一种数据交换模式，其中两个通信计算机本身不使用 IPSec。相反，将 LAN连接到中转网络的网关创建了一个使用 IPSec 协议来保护通过它的所有通信的虚拟隧道。</p><h3 id="86）建立-WAN-链路涉及的不同技术有哪些？"><a href="#86）建立-WAN-链路涉及的不同技术有哪些？" class="headerlink" title="86）建立 WAN 链路涉及的不同技术有哪些？"></a>86）建立 WAN 链路涉及的不同技术有哪些？</h3><p>模拟连接 - 使用常规电话线；数字连接 - 使用数字电话线；交换连接 - 使用发送方和接收方之间的多组链接来移动数据。</p><h3 id="87）网格拓扑的一个优点是什么？"><a href="#87）网格拓扑的一个优点是什么？" class="headerlink" title="87）网格拓扑的一个优点是什么？"></a>87）网格拓扑的一个优点是什么？</h3><p>在一个链接失败的情况下，总会有另一个链接可用。网状拓扑实际上是最容错的网络拓扑之一。</p><h3 id="88）在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？"><a href="#88）在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？" class="headerlink" title="88）在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？"></a>88）在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？</h3><p>大部分网络由硬件组成。这些领域的问题可能包括硬盘故障，NIC 损坏甚至硬件启动。不正确的硬件配置也是其中一个疑难问题。</p><h3 id="89）可以做什么来修复信号衰减问题？"><a href="#89）可以做什么来修复信号衰减问题？" class="headerlink" title="89）可以做什么来修复信号衰减问题？"></a>89）可以做什么来修复信号衰减问题？</h3><p>处理这种问题的常见方法是使用中继器和集线器，因为它将有助于重新生成信号，从而防止信号丢失。检查电缆是否正确终止也是必须的。</p><h3 id="90）动态主机配置协议如何协助网络管理？"><a href="#90）动态主机配置协议如何协助网络管理？" class="headerlink" title="90）动态主机配置协议如何协助网络管理？"></a>90）动态主机配置协议如何协助网络管理？</h3><p>网络管理员不必访问每台客户端计算机来配置静态 IP 地址，而是可以应用动态主机配置协议来创建称为可以动态分配给客户端的范围的 IP 地址池。</p><h3 id="91）解释网络概念的概况？"><a href="#91）解释网络概念的概况？" class="headerlink" title="91）解释网络概念的概况？"></a>91）解释网络概念的概况？</h3><p>配置文件是为每个用户设置的配置设置。例如，可以创建将用户置于组中的配置文件。</p><h3 id="92）什么是-Sneakernet？"><a href="#92）什么是-Sneakernet？" class="headerlink" title="92）什么是 Sneakernet？"></a>92）什么是 Sneakernet？</h3><p>Sneakernet 被认为是最早的联网形式，其中使用可移动介质（如磁盘，磁带）物理传输数据。</p><h3 id="93）IEEE-在计算机网络中的作用是什么？"><a href="#93）IEEE-在计算机网络中的作用是什么？" class="headerlink" title="93）IEEE 在计算机网络中的作用是什么？"></a>93）IEEE 在计算机网络中的作用是什么？</h3><p>IEEE 或电气和电子工程师学会是由电气和电子设备标准发布和管理的工程师组成的组织。这包括网络设备，网络接口，cablings 和连接器。</p><h3 id="94）TCP-IP-Internet-层下有哪些协议？"><a href="#94）TCP-IP-Internet-层下有哪些协议？" class="headerlink" title="94）TCP/IP Internet 层下有哪些协议？"></a>94）TCP/IP Internet 层下有哪些协议？</h3><p>该层管理的协议有 4 种。这些是 ICMP，IGMP，IP 和 ARP。</p><h3 id="95）谈到网络，什么是权限？"><a href="#95）谈到网络，什么是权限？" class="headerlink" title="95）谈到网络，什么是权限？"></a>95）谈到网络，什么是权限？</h3><p>权限是指在网络上执行特定操作的授权许可。网络上的每个用户可以分配个人权限，具体取决于该用户必须允许的内容。</p><h3 id="96）建立-VLAN-的一个基本要求是什么？"><a href="#96）建立-VLAN-的一个基本要求是什么？" class="headerlink" title="96）建立 VLAN 的一个基本要求是什么？"></a>96）建立 VLAN 的一个基本要求是什么？</h3><p>需要一个 VLAN，因为在交换机级别只有一个广播域，这意味着每当新用户连接时，该信息都会传播到整个网络。交换机上的 VLAN 有助于在交换机级别创建单独的广播域。它用于安全目的。</p><h3 id="97）什么是-IPv6？"><a href="#97）什么是-IPv6？" class="headerlink" title="97）什么是 IPv6？"></a>97）什么是 IPv6？</h3><p>IPv6 或 Internet 协议版本 6 被开发以替代 IPv4。目前，IPv4 正在用于控制互联网流量，但 IPv4 已经饱和。IPv6 能够克服这个限制。</p><h3 id="98）什么是-RSA-算法？"><a href="#98）什么是-RSA-算法？" class="headerlink" title="98）什么是 RSA 算法？"></a>98）什么是 RSA 算法？</h3><p>RSA 是 Rivest-Shamir-Adleman 算法的缩写。它是目前最常用的公钥加密算法。</p><h3 id="99）什么是网格拓扑？"><a href="#99）什么是网格拓扑？" class="headerlink" title="99）什么是网格拓扑？"></a>99）什么是网格拓扑？</h3><p>网格拓扑是一种设置，其中每个设备都直接连接到网络上的每个其他设备。因此，它要求每个设备具有至少两个网络连接。</p><h3 id="100）100Base-FX-网络的最大段长度是多少？"><a href="#100）100Base-FX-网络的最大段长度是多少？" class="headerlink" title="100）100Base-FX 网络的最大段长度是多少？"></a>100）100Base-FX 网络的最大段长度是多少？</h3><p>使用 100Base-FX 的网段的最大允许长度为 412 米。整个网络的最大长度为 5 公里。</p><h1 id="下载网址"><a href="#下载网址" class="headerlink" title="下载网址"></a>下载网址</h1><ul><li><a href="https://batdalao.github.io/2020/04/11/computer-network/100-ge-wang-luo-ji-chu-zhi-shi/article.pdf">https://batdalao.github.io/2020/04/11/computer-network/100-ge-wang-luo-ji-chu-zhi-shi/article.pdf</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>130个实用网站</title>
      <link href="/posts/2c23.html"/>
      <url>/posts/2c23.html</url>
      
        <content type="html"><![CDATA[<h1 id="130个实用网站"><a href="#130个实用网站" class="headerlink" title="130个实用网站"></a>130个实用网站</h1><h4 id="搞学习"><a href="#搞学习" class="headerlink" title="搞学习"></a>搞学习</h4><ul><li>知乎：<a href="http://www.zhihu.com" target="_blank" rel="noopener">www.zhihu.com</a></li><li>TED（最优质的演讲）：<a href="https://www.ted.com/" target="_blank" rel="noopener">https://www.ted.com/</a></li><li>谷粉学术： <a href="https://gfsoso.99lb.net/scholar.html" target="_blank" rel="noopener">https://gfsoso.99lb.net/scholar.html</a></li><li>大学资源网：<a href="http://www.dxzy163.com/" target="_blank" rel="noopener">http://www.dxzy163.com/</a></li><li>简答题：<a href="http://www.jiandati.com/" target="_blank" rel="noopener">http://www.jiandati.com/</a></li><li>网易公开课：<a href="https://open.163.com/ted/" target="_blank" rel="noopener">https://open.163.com/ted/</a></li><li>网易云课堂：<a href="https://study.163.com/" target="_blank" rel="noopener">https://study.163.com/</a></li><li>中国大学MOOC：<a href="http://www.icourse163.org" target="_blank" rel="noopener">www.icourse163.org</a></li><li>网易云课堂：<a href="https://study.163.com/" target="_blank" rel="noopener">https://study.163.com/</a></li><li>哔哩哔哩弹幕网：<a href="http://www.bilibili.com" target="_blank" rel="noopener">www.bilibili.com</a></li><li>我要自学网：<a href="http://www.51zxw.net" target="_blank" rel="noopener">www.51zxw.net</a></li><li>学堂在线：<a href="http://www.xuetangx.com" target="_blank" rel="noopener">www.xuetangx.com</a></li><li>爱课程：<a href="http://www.icourses.cn" target="_blank" rel="noopener">www.icourses.cn</a></li><li>猫咪论文：<a href="https://lunwen.im/" target="_blank" rel="noopener">https://lunwen.im/</a></li><li>iData（论文搜索）：<a href="http://www.cn-ki.net" target="_blank" rel="noopener">www.cn-ki.net</a></li><li>文泉考试：<a href="https://www.wqkaoshi.com" target="_blank" rel="noopener">https://www.wqkaoshi.com</a></li><li>码农之家（计算机电子书下载）：<a href="http://www.xz577.com" target="_blank" rel="noopener">www.xz577.com</a></li><li>鸠摩搜书：<a href="http://www.jiumodiary.com" target="_blank" rel="noopener">www.jiumodiary.com</a></li><li>云海电子图书馆：<a href="http://www.pdfbook.cn" target="_blank" rel="noopener">www.pdfbook.cn</a></li><li>周读（书籍搜索）：ireadweek.com</li><li>知轩藏书：<a href="http://www.zxcs.me/" target="_blank" rel="noopener">http://www.zxcs.me/</a></li><li>脚本之家电子书下载：<a href="https://www.jb51.net/books/" target="_blank" rel="noopener">https://www.jb51.net/books/</a></li><li>搜书VIP-电子书搜索：<a href="http://www.soshuvip.com/all.html" target="_blank" rel="noopener">http://www.soshuvip.com/all.html</a></li><li>书格（在线古籍图书馆）：<a href="https://new.shuge.org/" target="_blank" rel="noopener">https://new.shuge.org/</a></li><li>术语在线：<a href="http://www.termonline.cn/" target="_blank" rel="noopener">http://www.termonline.cn/</a></li><li>必看网（人生必看的书籍）：<a href="https://www.biikan.com/" target="_blank" rel="noopener">https://www.biikan.com/</a></li></ul><h4 id="冷知识-黑科技"><a href="#冷知识-黑科技" class="headerlink" title="冷知识 / 黑科技"></a>冷知识 / 黑科技</h4><ul><li>上班摸鱼必备（假装电脑系统升级）：<a href="http://fakeupdate.net/" target="_blank" rel="noopener">http://fakeupdate.net/</a></li><li>创意光线绘画：<a href="http://weavesilk.com/" target="_blank" rel="noopener">http://weavesilk.com/</a></li><li>星系观察：<a href="https://stellarium-web.org/" target="_blank" rel="noopener">https://stellarium-web.org/</a></li><li>煎蛋：<a href="http://jandan.net/" target="_blank" rel="noopener">http://jandan.net/</a></li><li>渣男-说话的艺术：<a href="https://lovelive.tools/" target="_blank" rel="noopener">https://lovelive.tools/</a></li><li>全历史：<a href="https://www.allhistory.com/" target="_blank" rel="noopener">https://www.allhistory.com/</a></li><li>iData：<a href="https://www.cn-ki.net/" target="_blank" rel="noopener">https://www.cn-ki.net/</a></li><li>caj云阅读：<a href="http://cajviewer.cnki.net/cajcloud/" target="_blank" rel="noopener">http://cajviewer.cnki.net/cajcloud/</a></li></ul><h4 id="资源搜索"><a href="#资源搜索" class="headerlink" title="资源搜索"></a>资源搜索</h4><ul><li>DogeDoge搜索引擎：<a href="http://www.dogedoge.com" target="_blank" rel="noopener">www.dogedoge.com</a></li><li>秘迹搜索：<a href="https://mijisou.com/" target="_blank" rel="noopener">https://mijisou.com/</a></li><li>小白盘：<a href="https://www.xiaobaipan.com/" target="_blank" rel="noopener">https://www.xiaobaipan.com/</a></li><li>云盘精灵（资源搜索）：<a href="http://www.yunpanjingling.com" target="_blank" rel="noopener">www.yunpanjingling.com</a></li><li>虫部落（资源搜索）：<a href="http://www.chongbuluo.com" target="_blank" rel="noopener">www.chongbuluo.com</a></li><li>如风搜（资源搜索）：<a href="http://www.rufengso.net/" target="_blank" rel="noopener">http://www.rufengso.net/</a></li><li>爱扒：<a href="https://www.zyboe.com/" target="_blank" rel="noopener">https://www.zyboe.com/</a></li></ul><h4 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h4><ul><li>云端超级应用空间（PS，PPT，Excel，Ai）：<a href="https://uzer.me/" target="_blank" rel="noopener">https://uzer.me/</a></li><li>在线接口测试（Getman）：<a href="https://getman.cn/" target="_blank" rel="noopener">https://getman.cn/</a></li><li>香当网（年终总结，个人简历，事迹材料，租赁合同，演讲稿）：<a href="https://www.xiangdang.net/" target="_blank" rel="noopener">https://www.xiangdang.net/</a></li><li>二维码生成：<a href="https://cli.im/" target="_blank" rel="noopener">https://cli.im/</a></li><li>搜狗翻译：fanyi.sogou.com</li><li>熵数（图表制作，数据可视化）：<a href="https://dydata.io/appv2/#/pages/index/home" target="_blank" rel="noopener">https://dydata.io/appv2/#/pages/index/home</a></li><li>拷贝兔：<a href="https://cp.anyknew.com/" target="_blank" rel="noopener">https://cp.anyknew.com/</a></li><li>图片无限变放大：<a href="http://bigjpg.com/zh" target="_blank" rel="noopener">http://bigjpg.com/zh</a></li><li>幕布（在线大纲笔记工具）：mubu.com</li><li>奶牛快传（在线传输文件利器）：cowtransfer.com</li><li>在线转换器（在线转换器转换任何测量单位）：<a href="https://zh.justcnw.com/" target="_blank" rel="noopener">https://zh.justcnw.com/</a></li><li>调查问卷制作：<a href="https://www.wenjuan.com/" target="_blank" rel="noopener">https://www.wenjuan.com/</a></li><li>果核剥壳（软件下载）：<a href="https://www.ghpym.com/" target="_blank" rel="noopener">https://www.ghpym.com/</a></li><li>软件下载：<a href="https://www.unyoo.com/" target="_blank" rel="noopener">https://www.unyoo.com/</a></li><li>MSDN我告诉你（windows10系统镜像下载）：<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a></li></ul><h4 id="导航页（工具集）"><a href="#导航页（工具集）" class="headerlink" title="导航页（工具集）"></a>导航页（工具集）</h4><ul><li>NiceTool.net 好工具网：<a href="http://www.nicetool.net/" target="_blank" rel="noopener">http://www.nicetool.net/</a></li><li>现实君工具箱（综合型在线工具集成网站）：<a href="http://tool.uixsj.cn/" target="_blank" rel="noopener">http://tool.uixsj.cn/</a></li><li>蓝调网站：<a href="http://lcoc.top/" target="_blank" rel="noopener">http://lcoc.top/</a></li><li>偷渡鱼：<a href="https://touduyu.com/" target="_blank" rel="noopener">https://touduyu.com/</a></li><li>牛导航：<a href="http://www.ziliao6.com/" target="_blank" rel="noopener">http://www.ziliao6.com/</a></li><li>小呆导航：<a href="https://www.webjike.com/index.html" target="_blank" rel="noopener">https://www.webjike.com/index.html</a></li><li>简法主页：<a href="http://www.jianfast.com/" target="_blank" rel="noopener">http://www.jianfast.com/</a></li><li>KIM主页：<a href="https://kim.plopco.com/" target="_blank" rel="noopener">https://kim.plopco.com/</a></li><li>聚BT：<a href="https://jubt.net/cn/index.html" target="_blank" rel="noopener">https://jubt.net/cn/index.html</a></li><li>精准云工具合集：<a href="https://jingzhunyun.com/" target="_blank" rel="noopener">https://jingzhunyun.com/</a></li><li>兔2工具合集：<a href="https://www.tool2.cn/" target="_blank" rel="noopener">https://www.tool2.cn/</a></li><li>爱资料工具（在线实用工具集合）：<a href="http://www.toolnb.com" target="_blank" rel="noopener">www.toolnb.com</a></li><li>工具导航：<a href="https://hao.logosc.cn/" target="_blank" rel="noopener">https://hao.logosc.cn/</a></li></ul><h4 id="看视频"><a href="#看视频" class="headerlink" title="看视频"></a>看视频</h4><ul><li>电影推荐（分类别致）：<a href="http://www.mvcat.com" target="_blank" rel="noopener">http://www.mvcat.com</a></li><li>去看TV：<a href="https://www.qukantv.net/" target="_blank" rel="noopener">https://www.qukantv.net/</a></li><li>动漫视频网：<a href="http://www.zzzfun.com/" target="_blank" rel="noopener">http://www.zzzfun.com/</a></li><li>94神马电影网：<a href="http://www.9rmb.com/" target="_blank" rel="noopener">http://www.9rmb.com/</a></li><li>NO视频官网：<a href="http://www.novipnoad.com/" target="_blank" rel="noopener">http://www.novipnoad.com/</a></li><li>蓝光画质电影：<a href="http://www.languang.co/" target="_blank" rel="noopener">http://www.languang.co/</a></li><li>在线看剧：<a href="http://dy.27234.cn/" target="_blank" rel="noopener">http://dy.27234.cn/</a></li><li>大数据导航：<a href="http://hao.199it.com/" target="_blank" rel="noopener">http://hao.199it.com/</a></li><li>多功能图片网站：<a href="https://www.logosc.cn/so/" target="_blank" rel="noopener">https://www.logosc.cn/so/</a></li><li>牛牛TV：<a href="http://www.ziliao6.com/tv/" target="_blank" rel="noopener">http://www.ziliao6.com/tv/</a></li><li>VideoFk解析视频：<a href="http://www.videofk.com/" target="_blank" rel="noopener">http://www.videofk.com/</a></li><li>蓝调网站：<a href="http://lcoc.top/vip2.3/" target="_blank" rel="noopener">http://lcoc.top/vip2.3/</a></li></ul><h4 id="学设计"><a href="#学设计" class="headerlink" title="学设计"></a>学设计</h4><ul><li>免费音频素材：<a href="https://icons8.cn/music" target="_blank" rel="noopener">https://icons8.cn/music</a></li><li>新CG儿（视频素材模板，无水印+免费下载）：<a href="https://www.newcger.com/" target="_blank" rel="noopener">https://www.newcger.com/</a></li><li>小图标下载：<a href="https://www.easyicon.net/" target="_blank" rel="noopener">https://www.easyicon.net/</a></li><li>第一字体转换器：<a href="http://www.diyiziti.com/" target="_blank" rel="noopener">http://www.diyiziti.com/</a></li><li>doyoudosh（平面设计）：<a href="http://www.doyoudo.com" target="_blank" rel="noopener">www.doyoudo.com</a></li><li>企业宣传视频在线制作：<a href="https://duomu.tv/" target="_blank" rel="noopener">https://duomu.tv/</a></li><li>MAKE海报设计官网：<a href="http://maka.im/" target="_blank" rel="noopener">http://maka.im/</a></li><li>一键海报神器：<a href="https://www.logosc.cn/photo/?utm_source=hao.logosc.cn&amp;utm_medium=referral" target="_blank" rel="noopener">https://www.logosc.cn/photo/?utm_source=hao.logosc.cn&amp;utm_medium=referral</a></li><li>字由（字体设计）：<a href="http://www.hellofont.cn/" target="_blank" rel="noopener">http://www.hellofont.cn/</a></li><li>查字体网站：<a href="https://fonts.safe.360.cn/" target="_blank" rel="noopener">https://fonts.safe.360.cn/</a></li><li>爱给网（免费素材下载的网站，包括音效、配乐，3D、视频、游戏，平面、教程）：<a href="http://www.aigei.com/" target="_blank" rel="noopener">http://www.aigei.com/</a></li><li>在线视频剪辑：<a href="https://bilibili.clipchamp.com/editor" target="_blank" rel="noopener">https://bilibili.clipchamp.com/editor</a></li></ul><h4 id="搞文档"><a href="#搞文档" class="headerlink" title="搞文档"></a>搞文档</h4><ul><li>即书（在线制作PPT）：<a href="https://www.keysuper.com/" target="_blank" rel="noopener">https://www.keysuper.com/</a></li><li>PDF处理：<a href="https://smallpdf.com/cn" target="_blank" rel="noopener">https://smallpdf.com/cn</a></li><li>PDF处理：<a href="https://www.ilovepdf.com/zh-cn" target="_blank" rel="noopener">https://www.ilovepdf.com/zh-cn</a></li><li>PDF处理：<a href="https://www.pdfpai.com/" target="_blank" rel="noopener">https://www.pdfpai.com/</a></li><li>PDF处理：<a href="https://www.hipdf.cn/" target="_blank" rel="noopener">https://www.hipdf.cn/</a></li><li>腾讯文档（在线协作编辑和管理文档）：<a href="https://docs.qq.com/" target="_blank" rel="noopener">https://docs.qq.com/</a></li><li>ProcessOn（在线协作制作结构图）：<a href="http://www.processon.com" target="_blank" rel="noopener">www.processon.com</a></li><li>iLovePDF（在线转换PDF利器）：<a href="http://www.ilovepdf.com" target="_blank" rel="noopener">www.ilovepdf.com</a></li><li>PPT在线制作：<a href="https://www.woodo.cn/" target="_blank" rel="noopener">https://www.woodo.cn/</a></li><li>PDF24工具（pdf处理工具）：<a href="https://tools.pdf24.org/en" target="_blank" rel="noopener">https://tools.pdf24.org/en</a></li><li>IMGBOT（在线图片处理）：<a href="http://www.imgbot.ai" target="_blank" rel="noopener">www.imgbot.ai</a></li><li>福昕云编辑（在线编辑PDF）：<a href="http://edit.foxitcloud.cn/" target="_blank" rel="noopener">http://edit.foxitcloud.cn/</a></li><li>TinyPNG（在线压缩图片）：<a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/</a></li><li>UZER.ME（在线使用各种大应用，在线使用CAD，MATLAB，Office三件套<br>）：<a href="https://uzer.me/" target="_blank" rel="noopener">https://uzer.me/</a></li><li>优品PPT（模板下载）：<a href="http://www.ypppt.com/" target="_blank" rel="noopener">http://www.ypppt.com/</a></li><li>第一PPT（模板下载）：<a href="http://www.1ppt.com/xiazai/" target="_blank" rel="noopener">http://www.1ppt.com/xiazai/</a></li><li>三顿PPT导航：<a href="https://sandunppt.com/" target="_blank" rel="noopener">https://sandunppt.com/</a></li></ul><h4 id="找图片"><a href="#找图片" class="headerlink" title="找图片"></a>找图片</h4><ul><li>电脑壁纸：<a href="http://lcoc.top/bizhi/" target="_blank" rel="noopener">http://lcoc.top/bizhi/</a></li><li><a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com/</a></li><li><a href="https://pixabay.com/" target="_blank" rel="noopener">https://pixabay.com/</a></li><li><a href="https://www.pexels.com/" target="_blank" rel="noopener">https://www.pexels.com/</a></li><li><a href="https://visualhunt.com/" target="_blank" rel="noopener">https://visualhunt.com/</a></li><li><a href="https://www.ssyer.com/" target="_blank" rel="noopener">https://www.ssyer.com/</a></li><li>彼岸图网：<a href="http://pic.netbian.com/" target="_blank" rel="noopener">http://pic.netbian.com/</a></li><li>极像素（超高清大图）：<a href="https://www.sigoo.com/" target="_blank" rel="noopener">https://www.sigoo.com/</a></li><li>免费版权图片搜索：<a href="https://www.logosc.cn/so/" target="_blank" rel="noopener">https://www.logosc.cn/so/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
