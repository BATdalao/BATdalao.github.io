<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>临江仙·夜登小阁，忆洛中旧游</title>
      <link href="/2020/04/15/daily-poems/daily-poems20200415/"/>
      <url>/2020/04/15/daily-poems/daily-poems20200415/</url>
      
        <content type="html"><![CDATA[<h1 id="临江仙·夜登小阁，忆洛中旧游"><a href="#临江仙·夜登小阁，忆洛中旧游" class="headerlink" title="临江仙·夜登小阁，忆洛中旧游"></a>临江仙·夜登小阁，忆洛中旧游</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​          临江仙·夜登小阁，忆洛中旧游</p><p>​                                                                宋·陈与义</p><p>忆昔午桥桥上饮，坐中多是豪英。长沟流月去无声。杏花疏影里，吹笛到天明。<br>二十余年如一梦，此身虽在堪惊。闲登小阁看新晴。古今多少事，渔唱起三更。        </p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>​        回忆当年在午桥畅饮，在座的都是英雄豪杰。月光映在河面，随水悄悄流逝，在杏花稀疏的花影中，吹起竹笛直到天明。</p><p>​       二十多年的经历好似一场梦，我虽身在，回首往昔却胆战心惊。闲来无事登上小阁楼观看新雨初晴的景致。古往今来多少历史事迹转瞬即逝，只有把它们编成歌的渔夫，还在那半夜三更里低声歌唱。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>临江仙：词牌名，又称《鸳鸯梦》、《雁后归》、《庭院深深》。双调，上片五句，押三平韵，三十字；下片同，共六十字。</li><li>午桥：在洛阳南面。坐中：在一起喝酒的人。</li><li>豪英：出色的人物。这两句说：想从前在午桥桥头饮宴，在一起喝酒的都是英雄好汉。</li><li>长沟流月：月光随着流水悄悄地消逝。去无声：表示月亮西沉，夜深了。</li><li>疏影：稀疏的影子。这两句说，在杏花稀疏的影子里吹起短笛，一直欢乐到天明。</li><li>二十余年：二十多年来的经历（包括北宋亡国的大变乱）。堪惊：总是心战胆跳。</li><li>新晴：新雨初晴。晴，这里指晴夜。渔唱：打鱼人编的歌儿。</li><li>三更：古代漏记时，自黄昏至拂晓分为五刻，即五更，三更正是午夜。</li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><blockquote><p>​        这首词是作者晚年追忆洛中朋友和旧游而作的。上片写对已经沦落敌国之手的家乡以及早年自在快乐生活的回顾。下片宕开笔墨回到现实，概括词人从踏上仕途所经历的颠沛流离和国破家亡的痛苦生活，结句将古今悲慨、国恨家愁，都融入“渔唱”之中，将沉挚的悲感化为旷达的襟怀。此词直抒胸臆，表情达意真切感人，通过上下两片的今昔对比，萌生对家国和人生的惊叹与感慨，韵味深远绵长。</p></blockquote><p>　　上片忆旧。</p><p>　　“忆昔午桥桥上饮，坐中多是豪英。”回想往昔在午桥桥上宴饮，在一起喝酒的人大多是英雄豪杰。用“忆”字开篇，直接了当把往事展开来。“午桥”是唐代白居易、刘禹锡、裴度吟诗唱和、举杯相欢的地方。作者青年时期，追寻遗韵，仰慕前贤，在故乡洛阳，与当时“豪英”一起，也在午桥宴饮聚会，把酒临风。</p><p>　　“长沟流月去无声，杏花疏影里，吹笛到天明。”白天和朋友们在午桥畅饮，晚上围坐在杏树底下尽情地吹着悠扬的笛子，一直玩到天明，竟然不知道碧空的月光随着流水静悄悄地消失了。桥上欢歌笑语，桥下一片宁静，以静衬动。这三句写景叙事，优美自然，它如同明净澄澈的清水一样。特别是“杏花疏影里，吹笛到天明”两句， “杏花”则点明在春天的夜晚，豪杰们抚琴弄笛，那情致高雅的笛声此起彼伏。作者以初春的树林为背景，利用明月的清辉照射在杏花枝上所撒落下来的稀疏花影，与花影下吹奏出来的悠扬笛声，组成一幅富有空间感的恬静、清婉、奇丽的画面，将作者那种充满闲情雅兴的生活情景真实地反映了出来。</p><p>　　下片感怀。</p><p>　　“二十余年如一梦，此身虽在堪惊。”作者在政和三年（1113年）做官后，曾遭谪贬；特别是靖康之变，北宋沦亡，他逃到南方，饱尝了颠沛流离、国破家亡的痛苦。残酷的现实和往昔的一切形成鲜明的对照，很自然会有一场恶梦的感触。这两句概括了这段时间里国家和个人的激剧变化的情况。这里，作者以饱蘸着久历艰难和劫后余生的血泪的笔触，写下这感慨深沉的诗句，发人深思，启人遐想。经历了国破家亡，战事连连之后，曾在一起吟诗饮酒的豪杰们如今散落各方，九死一生，身世之感和家国之痛油然而生。</p><p>　　接着写道：“闲登小阁看新晴。古今多少事，渔唱起三更。”“闲登”句是说：我闲散无聊地登上小阁，观看这雨后新晴的月色。这旬点题，写明作此词的时间、地点和心境。“新晴”与“长沟流月”照应，巧妙地将忆中之事与目前的处境联系起来，作者今昔不同的精神状况从中得以再现。“古今多少事，渔唱起三更。”把国家兴亡和人生的感慨都托之于渔唱，进一步表达作者内心寂寞悲凉的心情。古往今来的大事已经转瞬即逝了，只有把它们编成歌儿的渔夫，还在那半夜三更里低声歌唱。这是低沉的感叹，软弱的呻吟，无能为力的自我表白。这种看破世情、回避现实的消极态度，从侧面显示诗人对现实的极度不满，这是乱世怀古伤今的主题。</p><p>　　这首词通过回忆在洛阳的游乐来抒发作者对国家沦陷的悲痛和漂泊四方的寂寞。以对比的手法，明快的笔调，通过对旧游生活的回忆，抒发了北宋亡国后深沉的感慨。寥寥几笔，勾画出来的自我形象相当丰满。</p><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>　　这首词大概是在公元1135年（宋高宗绍兴五年）或六年陈与义退居青墩镇僧舍时所作，时年四十六或四十七岁。北宋灭亡，陈与义流离逃难，艰苦备尝，而南宋朝廷在播迁之后，仅能自立，他回忆二十多年的往事，百感交集，不禁感叹今昔巨变，写下了这首词。</p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>​        陈与义(1090-1138)，字去非，号简斋，汉族，其先祖居京兆，自曾祖陈希亮迁居洛阳，故为宋代河南洛阳人（现在属河南）。他生于宋哲宗元祐五年(1090年)，卒于南宋宋高宗绍兴八年(1138年)。北宋末，南宋初年的杰出诗人，同时也工于填词。其词存于今者虽仅十余首，却别具风格，尤近于苏东坡，语意超绝，笔力横空，疏朗明快，自然浑成，著有《简斋集》。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
            <tag> 每日诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登快阁</title>
      <link href="/2020/04/13/daily-poems/daily-poems20200413/"/>
      <url>/2020/04/13/daily-poems/daily-poems20200413/</url>
      
        <content type="html"><![CDATA[<h1 id="登快阁"><a href="#登快阁" class="headerlink" title="登快阁"></a>登快阁</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​                        登快阁</p><p>​                                    宋·黄庭坚</p><p>痴儿了却公家事，快阁东西倚晚晴。<br>落木千山天远大，澄江一道月分明。<br>朱弦已为佳人绝，青眼聊因美酒横。<br>万里归船弄长笛，此心吾与白鸥盟。</p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>我这个呆子办完公事，登上了快阁，在这晚晴的余辉里倚栏远眺。<br>远望秋山无数，落叶飘零，天地更加辽远阔大。朗朗明月下澄江淙淙流过，月光下显得更加空明澄澈。<br>友人远离，早已没有弄弦吹箫的兴致了，只好清樽美酒，聊以解忧了。<br>我从万里之外的远地乘船归来，在船上吹起长笛；我的这颗心，将愿与白鸥结为朋友。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>快阁：在吉州泰和县(今属江西)东澄江（赣江）之上，以江山广远、景物清华著称。此诗作于元丰五年(1082)作者任泰和令时。</li><li>痴儿了却公家事：意思是说，自己并非大器，只会敷衍官事。痴儿，作者自指。了却：完成。</li><li>东西：东边和西边 。指在阁中四处周览。</li><li>倚：倚靠</li><li>落木：落叶</li><li>澄江：指赣江。澄，澄澈，清澈。</li><li>朱弦：这里指琴。佳人：美人，引申为知己、知音。</li><li>青眼：黑色的眼珠在眼眶中间,青眼看人则是表示对人的喜爱或重视、尊重，指正眼看人 。 白眼指露出眼白，表示轻蔑。 聊：姑且。</li><li>弄：演奏</li><li>与白鸥盟：这里是指无利禄之心，借指归隐。</li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><p>​        这是黄庭坚在太和知县任上登快阁时所作的抒情小诗。</p><p>　　一般说来，文章或诗歌开头往往较难，以致有的文学家常将其开头处砍去，这是因为开头处，作者还没有和作品的情境融为一体，因而容易作态。黄山谷此诗起首，用通俗口语娓娓道来，但又能构思奇妙，引人入境。诗人说，我这个呆子办完公事，登上了快阁，在这晚晴余辉里，倚栏远眺。这二句，看似通俗浅近，却包涵着极为丰富的内容：前句是用《晋书·傅咸传》所载夏侯济之语，“生子痴，了官事，官事未易了也。了事正坐痴，复为快耳！”后句用杜甫”注目寒江倚山阁“及李商隐”万古贞魂倚暮霞”之典，还多有翻新出奇之妙。“痴儿”二字翻前人之意，直认自己是“痴儿”，此为谐趣之一；“了却”二字，渲染出了诗人如释重负的欢快心情，与“快阁”之“快”暗相呼应，从而增加了一气呵成之感此为妙用二；“倚晚晴”三字，更是超脱了前人的窠臼。杜诗之“倚”，倚于山阁，乃实境平叙；李诗之“倚”，主语为“万古贞魂”，乃虚境幻生而成；黄诗之“倚”，可谓虚实相兼；诗人之“倚”，乃是实景，但却倚在无际无垠的暮色晴空。读此三家，宛如一幅艺术摄影，在晚霞的逆光里，诗人与亭阁的背影。</p><p>　　不仅如此，“倚晚晴”三字，还为下句的描写，作了铺垫渲染，使诗人顺势迸出了“落木千山天远大，澄江一道月分明“的绝唱。远望无数秋山，山上的落叶飘零了，浩渺的天空此时显得更加辽远阔大，澄净如玉的澄江在快阁亭下淙淙流过，一弯新月，映照在江水中，显得更加空明澄澈。这是诗人初登快阁亭时所览胜景的描绘，也是诗人胸襟怀抱的写照。读这样的诗句，不禁使人想起杜甫“无边落木萧萧下，不尽长江滚滚来”和谢眺“余霞散成绮，澄江净如练”的名句。但黄山谷之句，既汲取了前辈的养料加以锻炼熔造，又是新的境界再现。所以前人曾评此二句道：“其意境天开，则实能劈古今未泄之奥妙。”（张宗泰《鲁斋所学集》）</p><p>　　五、六二句，是诗人巧用典故的中句。前句用伯牙捧琴谢知音的故事。《吕氏春秋·本味篇》载：“钟子期死，伯牙破琴绝弦，终身不复鼓琴，以为世无足复为鼓琴者。”后句用阮籍青白眼事。史载阮籍善为青白眼，“见礼俗之士，以白眼对之”，见所悦之人，“乃见青眼”（《晋书·阮籍传》）。诗人这二句大意是说，因为知音不在，我弄断了琴上的朱弦，不再弹奏，于是只好清樽美酒，聊以解忧了。此处“横“字用得很生动，把诗人无可奈何、孤独无聊的形象神情托了出来。</p><p>　　结句诗人说自己希望能坐上归船，吹弄着悠扬的长笛，回到那遥远的故乡——我的这颗心呵，早已和白鸥订好盟约了。从全诗的结构看，这个结尾是相当精彩的：起首处诗人从“痴儿了却官家事”说起，透露了对官场生涯的厌倦和对登快阁亭欣赏自然景色的渴望；然后，渐入佳境，诗人陶醉在落木千山，澄江月明的美景之中，与起首处对“公家事”之“了却”形成鲜明对照；五、六句诗人作一迭宕：在良辰美景中，诗人心内的忧烦无端而来，诗人感受到自己的抱负无法实现、自己的胸怀无人理解的痛苦。那么，解脱的出路何在呢？这就很自然地引出了诗人的“归船”、“白鸥”之想。这一结尾，不但呼应了起首，顺势作结，给人以“一气盘旋而下之感”（潘伯鹰评语）。而且意味隽永，让人想象无穷。</p><p>　　全诗明白如话，因景抒情寄慨，字字紧扣，层层关联，用典贴切，无一字无来处，体现了江西诗派用字新奇、笔力雄健的特点。</p><p>　　此诗极受后人称赏。姚鼐称此诗“豪而有韵，此移太白歌行于七律内者”；方东树评析说：“起四句且叙且写，一往浩然，五、六句对意流行。收尤豪放。此所谓寓单行之气于排偶之中者。”这些评析都是十分切中肯綮的。翁方纲评黄山谷诗云：“坡公之外又出此一种绝高之风骨，绝大之境界，造化元气发泄透矣。”细吟此诗，当知无愧。</p><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>　　此诗作于公元1082年（宋神宗元丰五年），时黄庭坚在吉州泰和县（今属江西）任知县，公事之余，诗人常到“澄江之上，以江山广远，景物清华得名”（《清一统治·吉安府》）的快阁览胜，有感而发。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
            <tag> 每日诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中几个有趣的函数</title>
      <link href="/2020/04/13/python-knowledge/python-function/"/>
      <url>/2020/04/13/python-knowledge/python-function/</url>
      
        <content type="html"><![CDATA[<h1 id="Python中几个有趣的函数"><a href="#Python中几个有趣的函数" class="headerlink" title="Python中几个有趣的函数"></a><strong>Python中几个有趣的函数</strong></h1><blockquote><p>今天主要是分享5个python内置的小函数。</p></blockquote><h2 id="01-一用而过：lambda"><a href="#01-一用而过：lambda" class="headerlink" title="01 一用而过：lambda"></a>01 一用而过：lambda</h2><blockquote><p>很多语言都有匿名函数，python的匿名函数写作lambda，当需要实现一定功能而又不想“大张旗鼓”的def一个函数时，lambda就是最优的选择。</p></blockquote><p>其语法格式一般是这样的：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token comment" spellcheck="true"># &lt;function __main__.&lt;lambda>(x)></span></code></pre><p>也可以将它赋值给一个变量，由于python中一切皆对象，所以后续程序中就可以用该变量调用这个匿名函数。</p><pre class=" language-python"><code class="language-python">f <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">**</span><span class="token number">2</span>f<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4</span></code></pre><p>当然，这里其实没必要应用lambda来实现，因为既然要显式调用，还不如干脆直接写个明确的函数罢了。lambda函数更广泛的应用场景在于该匿名函数作为另一个函数的参数传递时，应用就比较合适了，例如，将lambda作为sort()函数的key参数，就可以实现特定功能的排序。</p><pre class=" language-python"><code class="language-python">dyct <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">}</span>sorted<span class="token punctuation">(</span>dyct<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [('b', 1), ('a', 2), ('c', 5)]</span></code></pre><h2 id="02-智能解压：zip"><a href="#02-智能解压：zip" class="headerlink" title="02 智能解压：zip"></a>02 智能解压：zip</h2><blockquote><p>zip函数人如其名，是打包或者解包的函数，接受2个以上可迭代变量，输出对应位置组成元组后的迭代类型。例如：</p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;zip at 0x1da016d15c8></span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [('a', 4), ('b', 5), ('c', 6)]</span>tuple<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># (('a', 4), ('b', 5), ('c', 6))</span></code></pre><p>也可以接受多于2个输入可迭代变量，而且如果各迭代变量长度不一致也不会报错，只是此时返回迭代变量取决于输入总长度最短的一个。例如：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># (('a', 4, True), ('b', 5, False), ('c', 6, True))</span></code></pre><p>与zip打包相对应的用法是解包，即对一个打包形式的元素进行依次解包，并返回多个新的列表。例如：</p><pre class=" language-python"><code class="language-python">aZip <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> zip<span class="token punctuation">(</span><span class="token operator">*</span>aZip<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a:('a', 'b', 'c')</span><span class="token comment" spellcheck="true"># b:(4, 5, 6)</span><span class="token comment" spellcheck="true"># c:(True, False, True)</span></code></pre><h2 id="03-一一映射：map"><a href="#03-一一映射：map" class="headerlink" title="03 一一映射：map"></a>03 一一映射：map</h2><blockquote><p>map函数也正如其取名一样，是一个将接受的迭代变量依次经过某种映射，并输出映射后的迭代变量。例如，如果对列表中的某个变量依次完成求值，并返回一个新的列表，则可以应用map：</p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;map at 0x1da017136d8></span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['1', '2', '3', '4']</span></code></pre><p>这是map函数的一个典型用法：接受2个参数，第一个参数(上例中是str()函数）是一个要作用的函数，第二个参数是可迭代变量。</p><p>当第一个函数的参数是是一个多变量函数时，map也可以接受更多的参数。例如：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span>x<span class="token operator">**</span>y<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [1, 4, 27, 64]</span></code></pre><p>与zip函数中类似，当map里的函数参数长度不匹配时并不会报错，只是输出结果将由最短的决定：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span>x<span class="token operator">**</span>y<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [1, 4]</span></code></pre><h2 id="04-一夫当关：filter"><a href="#04-一夫当关：filter" class="headerlink" title="04 一夫当关：filter"></a>04 一夫当关：filter</h2><blockquote><p>与map函数类似，filter函数也接受一个函数及其变量作为参数，只是要求这个函数的返回结果是bool型，并用这个bool的结果决定输出的取舍问题。例如需要对一个输入列表过滤，要求保留3的倍数：</p></blockquote><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># &lt;filter at 0x1da0171c0f0></span>list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [0, 3, 6, 9]</span></code></pre><p>这里需注意，当filter的第一个函数返回值不是bool型时不会报错，只是它会转化为bool型判断，如果判断结果不是False（python中会判为False的变量包括0、None、[]等等），则会将其输出，否则过滤掉：</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [1, 2, 4, 5, 7, 8]</span></code></pre><h2 id="05-万剑归宗：reduce"><a href="#05-万剑归宗：reduce" class="headerlink" title="05 万剑归宗：reduce"></a>05 万剑归宗：reduce</h2><blockquote><p>map和filter函数都是多入多出型，实质上是完成了特定的变换或筛选。reduce则是归约函数，将一系列输入变量经过特定的函数后转化为一个结果输出。不过可能是由于应用场景有限的原因，reduce在python3中已不再是全局调用函数，必须要从functools包中导入方可使用：</p></blockquote><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> reducea <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 10</span></code></pre><p>reduce函数还可以接受一个可选的初始值作为参数。应用reduce函数可以实现很多小trick，就看能不能想的到用的出：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> reduces <span class="token operator">=</span> <span class="token string">'abcdefg'</span>reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> y<span class="token operator">+</span>x<span class="token punctuation">,</span> s<span class="token punctuation">,</span> <span class="token string">'AA'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 'gfedcbaAA'</span></code></pre><h2 id="06-最后"><a href="#06-最后" class="headerlink" title="06 最后"></a>06 最后</h2><p>当然，尽管几个函数用法不可谓不优美、功能不可谓不强大，但都不是必须的，甚至某种程度上都可以用其他形式加以替代，例如map和filter函数都可以用列表推导式来简单实现，reduce函数功能也顶多用一个for循环迭代就能解决。</p><p>但在致力于使python程序变得更加简洁优雅乃至装B耍秀的路上，这些函数也确有其用武之地，未尝不值得一试！</p>]]></content>
      
      
      <categories>
          
          <category> python知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python知识 </tag>
            
            <tag> python函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python读写数据文件</title>
      <link href="/2020/04/12/python-interaction/python-datafolder/"/>
      <url>/2020/04/12/python-interaction/python-datafolder/</url>
      
        <content type="html"><![CDATA[<p>Python处理数据文件的途径有很多种，可以操作的文件类型主要包括文本文件（csv、txt、json等）、excel文件、数据库文件、api等其他数据文件。其中，Python连接各种数据库,包括关系数据库：<strong>sqlite,mysql,mssql</strong><br>非关系数据库：<strong>MongoDB,Redis</strong>。</p><p>下面整理下python有哪些方式可以读写数据文件。</p><h2 id="1-read、readline、readlines"><a href="#1-read、readline、readlines" class="headerlink" title="1. read、readline、readlines"></a>1. read、readline、readlines</h2><ul><li>read()  ：一次性读取整个文件内容。推荐使用read(size)方法，size越大运行时间越长</li><li>readline()  ：每次读取一行内容。内存不够时使用，一般不太用</li><li>readlines()  ：一次性读取整个文件内容，并按行返回到list，方便我们遍历</li></ul><h2 id="2-内置模块csv"><a href="#2-内置模块csv" class="headerlink" title="2. 内置模块csv"></a>2. 内置模块csv</h2><p>python内置了csv模块用于读写csv文件，csv是一种逗号分隔符文件，是数据科学中最常见的数据存储格式之一。csv模块能轻松完成各种体量数据的读写操作，当然大数据量需要代码层面的优化。</p><ul><li>csv模块读取文件</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 读取csv文件</span><span class="token keyword">import</span> csv<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> myFile<span class="token punctuation">:</span>    lines<span class="token operator">=</span>csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>myFile<span class="token punctuation">)</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span>line<span class="token punctuation">)</span></code></pre><ul><li>csv模块写入文件</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">,</span><span class="token string">'w+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> myFile<span class="token punctuation">:</span>    myWriter<span class="token operator">=</span>csv<span class="token punctuation">.</span>writer<span class="token punctuation">(</span>myFile<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># writerrow一行一行写入</span>    myWriter<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    myWriter<span class="token punctuation">.</span>writerow<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># writerow多行写入</span>    myList<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    myWriter<span class="token punctuation">.</span>writerows<span class="token punctuation">(</span>myList<span class="token punctuation">)</span></code></pre><h2 id="3-numpy库"><a href="#3-numpy库" class="headerlink" title="3. numpy库"></a>3. numpy库</h2><ul><li><strong>loadtxt方法</strong></li></ul><p>loadtxt用来读取文本文件（包含txt、csv等）以及.gz 或.bz2格式压缩文件，前提是文件数据每一行必须要有数量相同的值。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># loadtxt()中的dtype参数默认设置为float</span><span class="token comment" spellcheck="true"># 这里设置为str字符串便于显示</span>np<span class="token punctuation">.</span>loadtxt<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>str<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># out：array(['1,2,3', '4,5,6', '7,8,9'], dtype='&lt;U5')</span></code></pre><ul><li><strong>load方法</strong></li></ul><p>load用来读取numpy专用的<code>.npy</code>, <code>.npz</code> 或者<code>pickled</code>持久化文件。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># 先生成npy文件</span>np<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'test.npy'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用load加载npy文件</span>np<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'test.npy'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''out:array([[1, 2, 3],       [4, 5, 6]])'''</span></code></pre><ul><li><strong>fromfile方法</strong></li></ul><p>fromfile方法可以读取简单的文本数据或二进制数据，数据来源于tofile方法保存的二进制数据。读取数据时需要用户指定元素类型，并对数组的形状进行适当的修改。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npx <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>x<span class="token punctuation">.</span>tofile<span class="token punctuation">(</span><span class="token string">'test.bin'</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>fromfile<span class="token punctuation">(</span><span class="token string">'test.bin'</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>int<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># out:array([0, 1, 2, 3, 4, 5, 6, 7, 8])</span></code></pre><h2 id="4-pandas库"><a href="#4-pandas库" class="headerlink" title="4. pandas库"></a>4. pandas库</h2><p>pandas是数据处理最常用的分析库之一，可以读取各种各样格式的数据文件，一般输出dataframe格式。如：txt、csv、excel、json、剪切板、数据库、html、hdf、parquet、pickled文件、sas、stata等等</p><ul><li><strong>read_csv方法</strong>read_csv方法用来读取csv格式文件，输出dataframe格式。</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdpd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'test.csv'</span><span class="token punctuation">)</span></code></pre><ul><li><strong>read_excel方法</strong></li></ul><p>读取excel文件，包括xlsx、xls、xlsm格式</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdpd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'test.xlsx'</span><span class="token punctuation">)</span></code></pre><ul><li><strong>read_table方法</strong></li></ul><p>通过对sep参数（分隔符）的控制来对任何文本文件读取</p><ul><li><strong>read_json方法</strong></li></ul><p>读取json格式文件</p><pre class=" language-python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'row 1'</span><span class="token punctuation">,</span> <span class="token string">'row 2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'col 1'</span><span class="token punctuation">,</span> <span class="token string">'col 2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>j <span class="token operator">=</span> df<span class="token punctuation">.</span>to_json<span class="token punctuation">(</span>orient<span class="token operator">=</span><span class="token string">'split'</span><span class="token punctuation">)</span>pd<span class="token punctuation">.</span>read_json<span class="token punctuation">(</span>j<span class="token punctuation">,</span>orient<span class="token operator">=</span><span class="token string">'split'</span><span class="token punctuation">)</span></code></pre><ul><li><strong>read_html方法</strong></li></ul><p>读取html表格</p><ul><li><strong>read_clipboard方法</strong></li></ul><p>读取剪切板内容</p><ul><li><strong>read_pickle方法</strong></li></ul><p>读取plckled持久化文件</p><ul><li><strong>read_sql方法</strong></li></ul><p>读取数据库数据，连接好数据库后，传入sql语句即可</p><ul><li><strong>read_dhf方法</strong></li></ul><p>读取hdf5文件，适合大文件读取</p><ul><li><strong>read_parquet方法</strong></li></ul><p>读取parquet文件</p><ul><li><strong>read_sas方法</strong></li></ul><p>读取sas文件</p><ul><li><strong>read_stata方法</strong></li></ul><p>读取stata文件</p><ul><li><strong>read_gbq方法</strong></li></ul><p>读取google bigquery数据</p><p>pandas学习网站：<a href="https://pandas.pydata.org/" target="_blank" rel="noopener">https://pandas.pydata.org/</a></p><h2 id="5-读写excel文件"><a href="#5-读写excel文件" class="headerlink" title="5.读写excel文件"></a>5.读写excel文件</h2><p>python用于读写excel文件的库有很多，除了前面提到的pandas，还有xlrd、xlwt、openpyxl、xlwings等等。</p><p><strong>主要模块：</strong></p><ul><li><strong>xlrd库</strong></li></ul><p>从excel中读取数据，支持xls、xlsx</p><ul><li><strong>xlwt库</strong></li></ul><p>对excel进行修改操作，不支持对xlsx格式的修改</p><ul><li><strong>xlutils库</strong></li></ul><p>在xlw和xlrd中，对一个已存在的文件进行修改</p><ul><li><strong>openpyxl</strong></li></ul><p>主要针对xlsx格式的excel进行读取和编辑</p><ul><li><strong>xlwings</strong></li></ul><p>对xlsx、xls、xlsm格式文件进行读写、格式修改等操作</p><ul><li><strong>xlsxwriter</strong></li></ul><p>用来生成excel表格，插入数据、插入图标等表格操作，不支持读取</p><ul><li><strong>Microsoft Excel API</strong></li></ul><p>需安装pywin32，直接与Excel进程通信，可以做任何在Excel里可以做的事情，但比较慢</p><h2 id="6-操作数据库"><a href="#6-操作数据库" class="headerlink" title="6. 操作数据库"></a>6. 操作数据库</h2><p>python几乎支持对所有数据库的交互，连接数据库后，可以使用sql语句进行增删改查。</p><p><strong>主要模块：</strong></p><ul><li><strong>pymysql</strong></li></ul><p>用于和mysql数据库的交互</p><ul><li><strong>sqlalchemy</strong></li></ul><p>用于和mysql数据库的交互</p><ul><li><strong>cx_Oracle</strong></li></ul><p>用于和oracle数据库的交互</p><ul><li><strong>pymssql</strong></li></ul><p>用于和sql server数据库的交互</p><ul><li><strong>pymongo</strong></li></ul><p>用于和mongodb非关系型数据库的交互</p><ul><li><strong>redis、pyredis</strong></li></ul><p>用于和redis非关系型数据库的交互</p><h3 id="python连接MySQL数据库"><a href="#python连接MySQL数据库" class="headerlink" title="python连接MySQL数据库"></a>python连接MySQL数据库</h3><blockquote><p>使用MySQLdb，不支持Python3.x<br>pymysql对Python2.x和Python3.x的支持都比较好</p></blockquote><h4 id="1、使用pymysql"><a href="#1、使用pymysql" class="headerlink" title="1、使用pymysql"></a>1、使用pymysql</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># https://github.com/PyMySQL/PyMySQL/</span><span class="token keyword">import</span> pymysql<span class="token keyword">from</span> contextlib <span class="token keyword">import</span> closing<span class="token keyword">import</span> traceback<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取一个数据库连接,with关键字 表示退出时,conn自动关闭</span>    <span class="token comment" spellcheck="true"># with 嵌套上一层的with 要使用closing()</span>    <span class="token keyword">with</span> closing<span class="token punctuation">(</span>pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>                                 charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect database successfully"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取游标,with关键字 表示退出时,cur自动关闭</span>        <span class="token keyword">with</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cur<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 删除表</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS  COMPANY"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 创建表</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                     CREATE TABLE IF NOT EXISTS COMPANY                   (ID INTEGER  PRIMARY KEY NOT NULL  auto_increment,                   NAME           TEXT    NOT NULL,                   AGE            INT     NOT NULL,                   ADDRESS        CHAR(50),                   SALARY         REAL);            """</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"create table successfully"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 添加数据</span>            <span class="token comment" spellcheck="true"># 在一个conn.execute里面里面执行多个sql语句是非法的</span>            cur<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span><span class="token string">"INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES ( %s, %s, %s, %s )"</span><span class="token punctuation">,</span>                            <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Paul'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Allen'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">15000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Teddy'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'Norway'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Mark'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Rich-Mond '</span><span class="token punctuation">,</span> <span class="token number">65000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">85000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Kim'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'South-Hall'</span><span class="token punctuation">,</span> <span class="token number">45000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'James'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'Houston'</span><span class="token punctuation">,</span> <span class="token number">10000.00</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 提交,否则重新运行程序时,表中无数据</span>            conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"insert successfully"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 查询表</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                select id,NAME,AGE,ADDRESS,SALARY FROM COMPANY             """</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token keyword">for</span> row <span class="token keyword">in</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> pymysql<span class="token punctuation">.</span>Error <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Mysql Error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2、使用MySQLdb"><a href="#2、使用MySQLdb" class="headerlink" title="2、使用MySQLdb"></a>2、使用MySQLdb</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/env python2.7</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># mysqldb 只支持python2.7</span><span class="token comment" spellcheck="true"># http://mysql-python.sourceforge.net/</span><span class="token keyword">import</span> MySQLdb<span class="token keyword">from</span> contextlib <span class="token keyword">import</span> closing<span class="token keyword">import</span> traceback<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取一个数据库连接</span>    <span class="token keyword">with</span> closing<span class="token punctuation">(</span>MySQLdb<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect database successfully"</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> closing<span class="token punctuation">(</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cur<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 删除表</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS  COMPANY"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 创建表</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                     CREATE TABLE IF NOT EXISTS COMPANY                   (ID INTEGER  PRIMARY KEY NOT NULL  auto_increment,                   NAME           TEXT    NOT NULL,                   AGE            INT     NOT NULL,                   ADDRESS        CHAR(50),                   SALARY         REAL);            """</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"create table successfully"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 添加数据</span>            <span class="token comment" spellcheck="true"># 在一个conn.execute里面里面执行多个sql语句是非法的</span>            cur<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span><span class="token string">"INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES ( %s, %s, %s, %s )"</span><span class="token punctuation">,</span>                            <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Paul'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Allen'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">15000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Teddy'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'Norway'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Mark'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Rich-Mond '</span><span class="token punctuation">,</span> <span class="token number">65000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">85000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Kim'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'South-Hall'</span><span class="token punctuation">,</span> <span class="token number">45000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'James'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'Houston'</span><span class="token punctuation">,</span> <span class="token number">10000.00</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 提交,否则重新运行程序时,表中无数据</span>            conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"insert successfully"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 查询表</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                select id,NAME,AGE,ADDRESS,SALARY FROM COMPANY             """</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token keyword">for</span> row <span class="token keyword">in</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> MySQLdb<span class="token punctuation">.</span>Error <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Mysql Error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印错误栈信息</span></code></pre><h4 id="3、使用MySQLdb库中的-mysql"><a href="#3、使用MySQLdb库中的-mysql" class="headerlink" title="3、使用MySQLdb库中的_mysql"></a>3、使用MySQLdb库中的_mysql</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/env python2.7</span><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># mysqldb 只支持python2.7</span><span class="token comment" spellcheck="true"># http://mysql-python.sourceforge.net/</span><span class="token keyword">import</span> MySQLdb<span class="token keyword">from</span> contextlib <span class="token keyword">import</span> closing<span class="token keyword">import</span> traceback<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取一个数据库连接</span>    <span class="token keyword">with</span> closing<span class="token punctuation">(</span>MySQLdb<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect database successfully"</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> closing<span class="token punctuation">(</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> cur<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 删除表</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS  COMPANY"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 创建表</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                     CREATE TABLE IF NOT EXISTS COMPANY                   (ID INTEGER  PRIMARY KEY NOT NULL  auto_increment,                   NAME           TEXT    NOT NULL,                   AGE            INT     NOT NULL,                   ADDRESS        CHAR(50),                   SALARY         REAL);            """</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"create table successfully"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 添加数据</span>            <span class="token comment" spellcheck="true"># 在一个conn.execute里面里面执行多个sql语句是非法的</span>            cur<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span><span class="token string">"INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES ( %s, %s, %s, %s )"</span><span class="token punctuation">,</span>                            <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Paul'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Allen'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">15000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Teddy'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'Norway'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Mark'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Rich-Mond '</span><span class="token punctuation">,</span> <span class="token number">65000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">85000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'Kim'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'South-Hall'</span><span class="token punctuation">,</span> <span class="token number">45000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             <span class="token punctuation">(</span><span class="token string">'James'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'Houston'</span><span class="token punctuation">,</span> <span class="token number">10000.00</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 提交,否则重新运行程序时,表中无数据</span>            conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"insert successfully"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 查询表</span>            sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                select id,NAME,AGE,ADDRESS,SALARY FROM COMPANY             """</span>            cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>            <span class="token keyword">for</span> row <span class="token keyword">in</span> cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> MySQLdb<span class="token punctuation">.</span>Error <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Mysql Error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印错误栈信息</span></code></pre><h3 id="python连接MongoDB数据库"><a href="#python连接MongoDB数据库" class="headerlink" title="python连接MongoDB数据库"></a>python连接MongoDB数据库</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># https://docs.mongodb.com/ecosystem/drivers/python/</span><span class="token comment" spellcheck="true"># https://pypi.python.org/pypi/pymongo/</span><span class="token keyword">import</span> pymongo<span class="token keyword">from</span> pymongo<span class="token punctuation">.</span>mongo_client <span class="token keyword">import</span> MongoClient<span class="token keyword">import</span> pymongo<span class="token punctuation">.</span>errors<span class="token keyword">import</span> traceback<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 连接到 mongodb 服务</span>    mongoClient <span class="token operator">=</span> MongoClient<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token number">27017</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 连接到数据库</span>    mongoDatabase <span class="token operator">=</span> mongoClient<span class="token punctuation">.</span>test    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect database successfully"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取集合</span>    mongoCollection <span class="token operator">=</span> mongoDatabase<span class="token punctuation">.</span>COMPANY    <span class="token comment" spellcheck="true"># 移除所有数据</span>    mongoCollection<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 添加数据</span>    mongoCollection<span class="token punctuation">.</span>insert_many<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Paul"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"32"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"California"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"20000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                 <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Allen"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"15000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                 <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Teddy"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"23"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Norway"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"20000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                 <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Mark"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Rich-Mond"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"65000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                 <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"David"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"27"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"85000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                 <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Kim"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"22"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"South-Hall"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"45000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                                 <span class="token punctuation">{</span><span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"24"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Houston"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"10000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取集合中的值</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> mongoCollection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Salary'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n\n\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使id自增</span>    mongoCollection<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建计数表</span>    mongoDatabase<span class="token punctuation">.</span>counters<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token string">"people_id"</span><span class="token punctuation">,</span> <span class="token string">"sequence_value"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建存储过程</span>    mongoDatabase<span class="token punctuation">.</span>system_js<span class="token punctuation">.</span>getSequenceValue <span class="token operator">=</span> <span class="token triple-quoted-string string">'''function getSequenceValue(sequenceName){            var sequenceDocument = db.counters.findAndModify({                query: {_id: sequenceName},                update: {$inc:{sequence_value: 1}},                new:true            });            return sequenceDocument.sequence_value;        }'''</span>    mongoCollection<span class="token punctuation">.</span>insert_many<span class="token punctuation">(</span>            <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Paul"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"32"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"California"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"20000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Allen"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"15000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Teddy"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"23"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Norway"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"20000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Mark"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Rich-Mond"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"65000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"David"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"27"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"85000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Kim"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"22"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"South-Hall"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"45000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> mongoDatabase<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"getSequenceValue('people_id')"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"24"</span><span class="token punctuation">,</span>              <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Houston"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"10000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> mongoCollection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token string">'_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Salary'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> pymongo<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>PyMongoError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"mongo Error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="python连接Redis数据库"><a href="#python连接Redis数据库" class="headerlink" title="python连接Redis数据库"></a>python连接Redis数据库</h3><h4 id="1、使用redis"><a href="#1、使用redis" class="headerlink" title="1、使用redis"></a>1、使用redis</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># https://pypi.python.org/pypi/redis/2.10.5</span><span class="token comment" spellcheck="true"># http://redis-py.readthedocs.io/en/latest/#</span><span class="token keyword">import</span> redisr <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>ping<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 看信息</span>info <span class="token operator">=</span> r<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># or 查看部分信息</span><span class="token comment" spellcheck="true"># info = r.info("Server")</span><span class="token comment" spellcheck="true"># 输出信息</span>items <span class="token operator">=</span> info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"item %s----%s:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除键和对应的值</span>r<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 可以一次性push一条或多条数据</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Paul"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"32"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"California"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"20000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Allen"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"15000.00"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Teddy"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"23"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Norway"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"20000.00"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Mark"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"25"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Rich-Mond"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"65000.00"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"David"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"27"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Texas"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"85000.00"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"Kim"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"22"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"South-Hall"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"45000.00"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">"Name"</span><span class="token punctuation">:</span> <span class="token string">"James"</span><span class="token punctuation">,</span> <span class="token string">"Age"</span><span class="token punctuation">:</span> <span class="token string">"24"</span><span class="token punctuation">,</span> <span class="token string">"Address"</span><span class="token punctuation">:</span> <span class="token string">"Houston"</span><span class="token punctuation">,</span> <span class="token string">"Salary"</span><span class="token punctuation">:</span> <span class="token string">"10000.00"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># eval用来将dict格式的字符串转换成dict</span><span class="token keyword">for</span> row <span class="token keyword">in</span> map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> eval<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>llen<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Salary'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭当前连接</span><span class="token comment" spellcheck="true"># r.shutdown() #这个是关闭redis服务端</span></code></pre><h4 id="2、使用pyredis"><a href="#2、使用pyredis" class="headerlink" title="2、使用pyredis"></a>2、使用pyredis</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># http://pyredis.readthedocs.io/en/latest/</span><span class="token keyword">import</span> pyredisr <span class="token operator">=</span> pyredis<span class="token punctuation">.</span>Client<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"12345"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"connect"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>ping<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 看信息</span><span class="token comment" spellcheck="true"># info = r.execute("info").decode()</span><span class="token comment" spellcheck="true"># or 查看部分信息</span>info <span class="token operator">=</span> r<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span> <span class="token string">"Server"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除键和对应的值</span>r<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 可以一次性push一条或多条数据</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token triple-quoted-string string">'''{"id": 1, "Name": "Paul", "Age": "32", "Address": "California", "Salary": "20000.00"}'''</span><span class="token punctuation">,</span>        <span class="token triple-quoted-string string">'''{"id": 2, "Name": "Allen", "Age": "25", "Address": "Texas", "Salary": "15000.00"}'''</span><span class="token punctuation">,</span>        <span class="token triple-quoted-string string">'''{"id": 3, "Name": "Teddy", "Age": "23", "Address": "Norway", "Salary": "20000.00"}'''</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token triple-quoted-string string">'''{"id": 4, "Name": "Mark", "Age": "25", "Address": "Rich-Mond", "Salary": "65000.00"}'''</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token triple-quoted-string string">'''{"id": 5, "Name": "David", "Age": "27", "Address": "Texas", "Salary": "85000.00"}'''</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token triple-quoted-string string">'''{"id": 6, "Name": "Kim", "Age": "22", "Address": "South-Hall", "Salary": "45000.00"}'''</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token triple-quoted-string string">'''{"id": 7, "Name": "James", "Age": "24", "Address": "Houston", "Salary": "10000.00"}'''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># eval用来将dict格式的字符串转换成dict</span><span class="token keyword">for</span> row <span class="token keyword">in</span> map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> eval<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>llen<span class="token punctuation">(</span><span class="token string">"company"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"_id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Address'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token string">'Salary'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭当前连接</span>r<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="python连接sqlite数据库"><a href="#python连接sqlite数据库" class="headerlink" title="python连接sqlite数据库"></a>python连接sqlite数据库</h3><p>sqlite3——内置库，用于和sqlite数据库的交互</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># http://www.runoob.com/sqlite/sqlite-python.html</span><span class="token keyword">import</span> sqlite3<span class="token keyword">import</span> traceback<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果表不存在,就创建</span>    <span class="token keyword">with</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'test.db'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> conn<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Opened database successfully"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 删除表</span>        conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS  COMPANY"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建表</span>        sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""                 CREATE TABLE IF NOT EXISTS COMPANY               (ID INTEGER  PRIMARY KEY       AUTOINCREMENT,               NAME           TEXT    NOT NULL,               AGE            INT     NOT NULL,               ADDRESS        CHAR(50),               SALARY         REAL);        """</span>        conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"create table successfully"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 添加数据</span>        conn<span class="token punctuation">.</span>executemany<span class="token punctuation">(</span><span class="token string">"INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES (?, ?, ?, ? )"</span><span class="token punctuation">,</span>                         <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Paul'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token string">'California'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token string">'Allen'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">15000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token string">'Teddy'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'Norway'</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token string">'Mark'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">'Rich-Mond '</span><span class="token punctuation">,</span> <span class="token number">65000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token string">'Texas'</span><span class="token punctuation">,</span> <span class="token number">85000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token string">'Kim'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'South-Hall'</span><span class="token punctuation">,</span> <span class="token number">45000.00</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                          <span class="token punctuation">(</span><span class="token string">'James'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'Houston'</span><span class="token punctuation">,</span> <span class="token number">10000.00</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ( 'Paul', 32, 'California', 20000.00 )")</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ('Allen', 25, 'Texas', 15000.00 )")</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ('Teddy', 23, 'Norway', 20000.00 )")</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ( 'Mark', 25, 'Rich-Mond ', 65000.00 )")</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ( 'David', 27, 'Texas', 85000.00 )");</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ( 'Kim', 22, 'South-Hall', 45000.00 )")</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># conn.execute("INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY)\</span>        <span class="token comment" spellcheck="true"># VALUES ( 'James', 24, 'Houston', 10000.00 )")</span>        <span class="token comment" spellcheck="true"># 提交,否则重新运行程序时,表中无数据</span>        conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"insert successfully"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 查询表</span>        sql <span class="token operator">=</span> <span class="token triple-quoted-string string">"""            select id,NAME,AGE,ADDRESS,SALARY FROM COMPANY         """</span>        result <span class="token operator">=</span> conn<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> result<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 输出50个-,作为分界线</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 字段名固定10位宽度,并且左对齐</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%-10s %.2f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span> row<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># or</span>            <span class="token comment" spellcheck="true"># print('{:10s} {:.2f}'.format("salary", row[4]))</span><span class="token keyword">except</span> sqlite3<span class="token punctuation">.</span>Error <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"sqlite3 Error:"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>    traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python交互 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python交互 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>水调歌头·黄州快哉亭赠张偓佺</title>
      <link href="/2020/04/12/daily-poems/daily-poems20200412/"/>
      <url>/2020/04/12/daily-poems/daily-poems20200412/</url>
      
        <content type="html"><![CDATA[<h1 id="水调歌头·黄州快哉亭赠张偓佺"><a href="#水调歌头·黄州快哉亭赠张偓佺" class="headerlink" title="水调歌头·黄州快哉亭赠张偓佺"></a>水调歌头·黄州快哉亭赠张偓佺</h1><h2 id="原文"><a href="#原文" class="headerlink" title="原文"></a>原文</h2><blockquote><p>​                                                                水调歌头·黄州快哉亭赠张偓佺</p><p>​                                                                                                                                        宋·苏轼</p><p>​        落日绣帘卷，亭下水连空。知君为我新作，窗户湿青红。长记平山堂上，欹(qī)枕江南烟雨，杳(yǎo)杳没孤鸿。认得醉翁语，山色有无中。</p><p>​        一千顷，都镜净，倒碧峰。忽然浪起，掀舞一叶白头翁。堪笑兰台公子，未解庄生天籁(lài)，刚道有雌雄。一点浩然气，千里快哉风。</p><p>​        </p></blockquote><h2 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h2><p>​        落日中卷起绣帘眺望，亭下江水与碧空相接，远处的夕阳与亭台相映，空阔无际。为了我的来到，你特意在窗户上涂上了清油的朱漆，色彩犹新。这让我想起当年在平山堂的时候，靠着枕席，欣赏江南的烟雨，遥望远方天际孤鸿出没的情景。今天看到眼前的景象，我方体会到欧阳醉翁词句中所描绘的，山色若隐若现的景致。</p><p>​        广阔的水面十分明净，山峰翠绿的影子倒映其中。忽然江面波涛汹涌，一个渔翁驾着小舟在风浪中掀舞。见此不由得想起了宋玉的《风赋》，像宋玉这样可笑的人，是不可能理解庄子的风是天籁之说的，硬说什么风有雄雌。其实，一个人只要具备至大至刚的浩然之气，就能在任何境遇中都处之泰然，享受到无穷快意的千里雄风。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li>湿青红：谓漆色鲜润。</li><li>平山堂：宋仁宗庆历八年（1048年）欧阳修在扬州所建。</li><li>欹枕：谓卧着可以看望。</li><li>醉翁：欧阳修别号。</li><li>“山色”句：出自欧阳修《朝中措·平山栏槛倚晴空》。</li><li>倒碧峰：碧峰倒影水中。</li><li>一叶：指小舟。</li><li>白头翁：指老船夫。</li><li>兰台公子：指战国楚辞赋家宋玉，相传曾作兰台令。</li><li>庄生：战国时道家学者庄周。</li><li>天籁：是发于自然的音响，即指风吹声。</li><li>刚道：“硬说”的意思。</li></ul><h2 id="赏析"><a href="#赏析" class="headerlink" title="赏析"></a>赏析</h2><p>​        这首词又名《快哉亭作》，是苏轼豪放词的代表作之一。全词通过描绘快哉亭周围壮阔的山光水色，抒发了作者旷达豪迈的处世精神。</p><p>　　此词描写的对象，主要是“快哉亭”周围的广阔景象。开头四句，先用实笔，描绘亭下江水与碧空相接、远处夕阳与亭台相映的优美图景，展现出一片空阔无际的境界，充满了苍茫阔远的情致。“知君为我新作”两句，交待新亭的创建，点明亭主和自己的密切关系，反客为主、诙谐风趣地把张偓佺所建的快哉亭说成特意为自己而造，又写亭台窗户涂抹上青红两色油漆，色彩犹新。“湿”字形容油漆未干，颇为传神。</p><p>　　“长记平山堂上”五句，是记忆中情景，又是对眼前景象的一种以虚托实的想象式侧面描写。作者用“长记”二字，唤起他曾在扬州平山堂所领略的“江南烟雨”“杳杳没孤鸿”那种若隐若现、若有若无、高远空蒙的江南山色的美好回忆。他又以此比拟他在“快哉亭”上所目睹的景致，将“快哉亭”与“平山堂”融为一体，构成一种优美独特的意境。这种以忆景写景的笔法，不但平添了曲折蕴藉的情致，而且加强了词境的空灵飞动。以上五句新颖别致，引人入胜，通过作者昔日的淋漓兴致，传达出当日快哉亭前览胜的欣喜之情。</p><p>　　上片是用虚实结合的笔法，描写快哉亭下及其远处的胜景。下片换头以下五句，又用高超的艺术手法展现亭前广阔江面倏忽变化、涛澜汹涌、风云开阖、动心骇目的壮观场面。词人并由此生发开来，抒发其江湖豪兴和人生追求。“一千顷，都镜净，倒碧峰”三句，写眼前广阔明净的江面，清澈见底，碧绿的山峰，倒映江水中，形成了一幅优美动人的平静的山水画卷，这是对水色山光的静态描写。“忽然”两句，写一阵巨风，江面倏忽变化，涛澜汹涌，风云开阖，一个渔翁驾着一叶小舟，在狂风巨浪中掀舞。至此，作者的描写奇峰突起，由静境忽变动境，从而自自然然地过渡到全词着意表现的着重点——一位奋力搏击风涛的白发老翁。这位白头翁的形象，其实是东坡自身人格风貌的一种象征。以下几句，作者由风波浪尖上弄舟的老人，自然引出他对战国时楚国兰台令宋玉所作《风赋》的议论。作者看来，宋玉将风分为“大王之雄风”和“庶人之雌风”是十分可笑的，是未解自然之理的生硬说教，白头翁搏击风浪的壮伟风神即是明证。其实，庄子所言天籁本身绝无贵贱之分，关键于人的精神境界的高下。他以“一点浩然气，千里快哉风”这一豪气干云的惊世骇俗之语昭告世人：一个人只要具备了至大至刚的浩然之气，就能超凡脱俗，刚直不阿，坦然自适，任何境遇中，都能处之泰然，享受使人感到无穷快意的千里雄风。苏轼这种逆境中仍保持浩然之气的坦荡的人生态度，显然具有积极的社会意义。</p><p>　　这首词在艺术构思和结构上，具有波澜起伏、跌宕多姿、大开大合、大起大落的特点。下片的描写和议论，豪纵酣畅，气势磅礴，词中出没风涛的白头翁形象，犹如百川汇海，含蓄地点明全篇主旨，有强烈的震撼力。全词熔写景、抒情、议论于一炉，既描写了浩阔雄壮、水天一色的自然风光，又其中灌注了一种坦荡旷达的浩然之气，展现出词人身处逆境却泰然处之、大气凛然的精神风貌，充分体现了苏词雄奇奔放的特色。</p><h2 id="创作背景"><a href="#创作背景" class="headerlink" title="创作背景"></a>创作背景</h2><p>　　这首词是作者贬官在黄州（今湖北黄冈）时作的。快哉亭，在黄州的江边，张怀民修建。怀民名梦得，又字偓佺，当时也贬官在黄州，与苏轼的心境相同，二人交往密切。作者不仅欣赏江边的优美风景，而更加钦佩张的气度。所以他为张所建的亭起名为“快哉亭”。</p>]]></content>
      
      
      <categories>
          
          <category> 诗词 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
            <tag> 每日诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在VS Code上玩转Jupyter Notebook</title>
      <link href="/2020/04/12/tool-installation/vscode-jupyter/"/>
      <url>/2020/04/12/tool-installation/vscode-jupyter/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="19620deeb09cb58d5324c83b47fc49c5a564b7cb204f123ce9de40268f9e8bb6"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 工具安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> jupyter notebook </tag>
            
            <tag> vs code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>100个网络基础知识</title>
      <link href="/2020/04/11/computer-network/100-ge-wang-luo-ji-chu-zhi-shi/"/>
      <url>/2020/04/11/computer-network/100-ge-wang-luo-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="100个网络基础知识"><a href="#100个网络基础知识" class="headerlink" title="100个网络基础知识"></a>100个网络基础知识</h1><h3 id="1）什么是链接？"><a href="#1）什么是链接？" class="headerlink" title="1）什么是链接？"></a>1）什么是链接？</h3><p>链接是指两个设备之间的连接。它包括用于一个设备能够与另一个设备通信的电缆类型和协议。</p><h3 id="2）OSI-参考模型的层次是什么？"><a href="#2）OSI-参考模型的层次是什么？" class="headerlink" title="2）OSI 参考模型的层次是什么？"></a>2）OSI 参考模型的层次是什么？</h3><p>有 7 个 OSI 层：物理层，数据链路层，网络层，传输层，会话层，表示层和应用层。</p><h3 id="3）什么是骨干网？"><a href="#3）什么是骨干网？" class="headerlink" title="3）什么是骨干网？"></a>3）什么是骨干网？</h3><p>骨干网络是集中的基础设施，旨在将不同的路由和数据分发到各种网络。它还处理带宽管理和各种通道。</p><h3 id="4）什么是-LAN？"><a href="#4）什么是-LAN？" class="headerlink" title="4）什么是 LAN？"></a>4）什么是 LAN？</h3><p>LAN 是局域网的缩写。它是指计算机与位于小物理位置的其他网络设备之间的连接。</p><h3 id="5）什么是节点？"><a href="#5）什么是节点？" class="headerlink" title="5）什么是节点？"></a>5）什么是节点？</h3><p>节点是指连接发生的点。它可以是作为网络一部分的计算机或设备。为了形成网络连接，需要两个或更多个节点。</p><h3 id="6）什么是路由器？"><a href="#6）什么是路由器？" class="headerlink" title="6）什么是路由器？"></a>6）什么是路由器？</h3><p>路由器可以连接两个或更多网段。这些是在其路由表中存储信息的智能网络设备，例如路径，跳数等。有了这个信息，他们就可以确定数据传输的最佳路径。路由器在 OSI 网络层运行。</p><h3 id="7）什么是点对点链接？"><a href="#7）什么是点对点链接？" class="headerlink" title="7）什么是点对点链接？"></a>7）什么是点对点链接？</h3><p>它是指网络上两台计算机之间的直接连接。除了将电缆连接到两台计算机的 NIC卡之外，点对点连接不需要任何其他网络设备。</p><h3 id="8）什么是匿名-FTP？"><a href="#8）什么是匿名-FTP？" class="headerlink" title="8）什么是匿名 FTP？"></a>8）什么是匿名 FTP？</h3><p>匿名 FTP 是授予用户访问公共服务器中的文件的一种方式。允许访问这些服务器中的数据的用户不需要识别自己，而是以匿名访客身份登录。</p><h3 id="9）什么是子网掩码？"><a href="#9）什么是子网掩码？" class="headerlink" title="9）什么是子网掩码？"></a>9）什么是子网掩码？</h3><p>子网掩码与 IP 地址组合，以识别两个部分：扩展网络地址和主机地址。像 IP 地址一样，子网掩码由 32 位组成。</p><h3 id="10）UTP-电缆允许的最大长度是多少？"><a href="#10）UTP-电缆允许的最大长度是多少？" class="headerlink" title="10）UTP 电缆允许的最大长度是多少？"></a>10）UTP 电缆允许的最大长度是多少？</h3><p>UTP 电缆的单段具有 90 到 100 米的允许长度。这种限制可以通过使用中继器和开关来克服</p><h3 id="11）什么是数据封装？"><a href="#11）什么是数据封装？" class="headerlink" title="11）什么是数据封装？"></a>11）什么是数据封装？</h3><p>数据封装是在通过网络传输信息之前将信息分解成更小的可管理块的过程。在这个过程中，源和目标地址与奇偶校验一起附加到标题中。</p><h3 id="12）描述网络拓扑"><a href="#12）描述网络拓扑" class="headerlink" title="12）描述网络拓扑"></a>12）描述网络拓扑</h3><p>网络拓扑是指计算机网络的布局。它显示了设备和电缆的物理布局，以及它们如何连接到彼此。</p><h3 id="13）什么是-VPN？"><a href="#13）什么是-VPN？" class="headerlink" title="13）什么是 VPN？"></a>13）什么是 VPN？</h3><p>VPN 意味着虚拟专用网络，这种技术允许通过网络（如 Internet）创建安全通道。</p><p>例如，VPN 允许您建立到远程服务器的安全拨号连接。</p><h3 id="14）简要描述-NAT。"><a href="#14）简要描述-NAT。" class="headerlink" title="14）简要描述 NAT。"></a>14）简要描述 NAT。</h3><p>NAT 是网络地址转换。这是一种协议，为公共网络上的多台计算机提供一种方式来共享到 Internet 的单一连接。</p><h3 id="15）OSI-参考模型下网络层的工作是什么？"><a href="#15）OSI-参考模型下网络层的工作是什么？" class="headerlink" title="15）OSI 参考模型下网络层的工作是什么？"></a>15）OSI 参考模型下网络层的工作是什么？</h3><p>网络层负责数据路由，分组交换和网络拥塞控制。路由器在此层下运行。</p><h3 id="16）网络拓扑如何影响您在建立网络时的决策？"><a href="#16）网络拓扑如何影响您在建立网络时的决策？" class="headerlink" title="16）网络拓扑如何影响您在建立网络时的决策？"></a>16）网络拓扑如何影响您在建立网络时的决策？</h3><p>网络拓扑决定了互连设备必须使用什么媒介。它还作为适用于设置的材料，连接器和终端的基础。</p><h3 id="17）什么是-RIP？"><a href="#17）什么是-RIP？" class="headerlink" title="17）什么是 RIP？"></a>17）什么是 RIP？</h3><p>RIP，路由信息协议的简称由路由器用于将数据从一个网络发送到另一个网络。</p><p>它通过将其路由表广播到网络中的所有其他路由器来有效地管理路由数据。它以跳数为单位确定网络距离。</p><h3 id="18）什么是不同的方式来保护计算机网络？"><a href="#18）什么是不同的方式来保护计算机网络？" class="headerlink" title="18）什么是不同的方式来保护计算机网络？"></a>18）什么是不同的方式来保护计算机网络？</h3><p>有几种方法可以做到这一点。在所有计算机上安装可靠和更新的防病毒程序。确保防火墙的设置和配置正确。用户认证也将有很大的帮助。所有这些组合将构成一个高度安全的网络。</p><h3 id="19）什么是-NIC？"><a href="#19）什么是-NIC？" class="headerlink" title="19）什么是 NIC？"></a>19）什么是 NIC？</h3><p>NIC 是网络接口卡（网卡）的缩写。这是连接到 PC 以连接到网络沈北。每个 NIC都有自己的 MAC 地址，用于标识网络上的 PC。</p><h3 id="20）什么是-WAN？"><a href="#20）什么是-WAN？" class="headerlink" title="20）什么是 WAN？"></a>20）什么是 WAN？</h3><p>WAN 代表广域网。它是地理上分散的计算机和设备的互连。它连接位于不同地区和国家/地区的网络。</p><h3 id="21）OSI-物理层的重要性是什么？"><a href="#21）OSI-物理层的重要性是什么？" class="headerlink" title="21）OSI 物理层的重要性是什么？"></a>21）OSI 物理层的重要性是什么？</h3><p>物理层进行从数据位到电信号的转换，反之亦然。这是网络设备和电缆类型的考虑和设置。</p><h3 id="22）TCP-IP-下有多少层？"><a href="#22）TCP-IP-下有多少层？" class="headerlink" title="22）TCP/IP 下有多少层？"></a>22）TCP/IP 下有多少层？</h3><p>有四层：网络层，互联网层，传输层和应用层。</p><h3 id="23）什么是代理服务器，它们如何保护计算机网络？"><a href="#23）什么是代理服务器，它们如何保护计算机网络？" class="headerlink" title="23）什么是代理服务器，它们如何保护计算机网络？"></a>23）什么是代理服务器，它们如何保护计算机网络？</h3><p>代理服务器主要防止外部用户识别内部网络的 IP 地址。不知道正确的 IP 地址，甚至无法识别网络的物理位置。代理服务器可以使外部用户几乎看不到网络。</p><h3 id="24）OSI-会话层的功能是什么？"><a href="#24）OSI-会话层的功能是什么？" class="headerlink" title="24）OSI 会话层的功能是什么？"></a>24）OSI 会话层的功能是什么？</h3><p>该层为网络上的两个设备提供协议和方法，通过举行会话来相互通信。这包括设置会话，管理会话期间的信息交换以及终止会话时的解除过程。</p><h3 id="25）实施容错系统的重要性是什么？有限吗？"><a href="#25）实施容错系统的重要性是什么？有限吗？" class="headerlink" title="25）实施容错系统的重要性是什么？有限吗？"></a>25）实施容错系统的重要性是什么？有限吗？</h3><p>容错系统确保持续的数据可用性。这是通过消除单点故障来实现的。但是，在某些情况下，这种类型的系统将无法保护数据，例如意外删除。</p><h3 id="26）10Base-T-是什么意思？"><a href="#26）10Base-T-是什么意思？" class="headerlink" title="26）10Base-T 是什么意思？"></a>26）10Base-T 是什么意思？</h3><p>10 是指数据传输速率，在这种情况下是 10Mbps。“Base”是指基带。T 表示双绞线，这是用于该网络的电缆。</p><h3 id="27）什么是私有-IP-地址？"><a href="#27）什么是私有-IP-地址？" class="headerlink" title="27）什么是私有 IP 地址？"></a>27）什么是私有 IP 地址？</h3><p>专用 IP 地址被分配用于内部网。这些地址用于内部网络，不能在外部公共网络上路由。这些确保内部网络之间不存在任何冲突，同时私有 IP 地址的范围同样可重复使用于多个内部网络，因为它们不会“看到”彼此。</p><h3 id="28）什么是-NOS？"><a href="#28）什么是-NOS？" class="headerlink" title="28）什么是 NOS？"></a>28）什么是 NOS？</h3><p>NOS 或网络操作系统是专门的软件，其主要任务是向计算机提供网络连接，以便能够与其他计算机和连接的设备进行通信。</p><h3 id="29）什么是-DoS？"><a href="#29）什么是-DoS？" class="headerlink" title="29）什么是 DoS？"></a>29）什么是 DoS？</h3><p>DoS 或拒绝服务攻击是试图阻止用户访问互联网或任何其他网络服务。这种攻击可能有不同的形式，由一群永久者组成。这样做的一个常见方法是使系统服务器过载，使其无法再处理合法流量，并将被强制重置。</p><h3 id="30）什么是-OSI，它在电脑网络中扮演什么角色？"><a href="#30）什么是-OSI，它在电脑网络中扮演什么角色？" class="headerlink" title="30）什么是 OSI，它在电脑网络中扮演什么角色？"></a>30）什么是 OSI，它在电脑网络中扮演什么角色？</h3><p>OSI（开放系统互连）作为数据通信的参考模型。它由 7 层组成，每层定义了网络设备如何相互连接和通信的特定方面。一层可以处理所使用的物理介质，而另一层则指示如何通过网络实际传输数据。</p><h3 id="31）电缆被屏蔽并具有双绞线的目的是什么？"><a href="#31）电缆被屏蔽并具有双绞线的目的是什么？" class="headerlink" title="31）电缆被屏蔽并具有双绞线的目的是什么？"></a>31）电缆被屏蔽并具有双绞线的目的是什么？</h3><p>其主要目的是防止串扰。串扰是电磁干扰或噪声，可能影响通过电缆传输的数据。</p><h3 id="32）地址共享的优点是什么？"><a href="#32）地址共享的优点是什么？" class="headerlink" title="32）地址共享的优点是什么？"></a>32）地址共享的优点是什么？</h3><p>通过使用地址转换而不是路由，地址共享提供了固有的安全性优势。这是因为互联网上的主机只能看到提供地址转换的计算机上的外部接口的公共 IP 地址，而不是内部网络上的私有 IP 地址。</p><h3 id="33）什么是-MAC-地址？"><a href="#33）什么是-MAC-地址？" class="headerlink" title="33）什么是 MAC 地址？"></a>33）什么是 MAC 地址？</h3><p>MAC 或媒介访问控制，可以唯一地标识网络上的设备。它也被称为物理地址或以太网地址。MAC 地址由 6 个字节组成。</p><h3 id="34）在-OSI-参考模型方面，TCP-IP-应用层的等同层或多层是什么？"><a href="#34）在-OSI-参考模型方面，TCP-IP-应用层的等同层或多层是什么？" class="headerlink" title="34）在 OSI 参考模型方面，TCP/IP 应用层的等同层或多层是什么？"></a>34）在 OSI 参考模型方面，TCP/IP 应用层的等同层或多层是什么？</h3><h3 id="TCP-IP-应用层实际上在-OSI-模型上具有三个对等体：会话层，表示层和应用层。"><a href="#TCP-IP-应用层实际上在-OSI-模型上具有三个对等体：会话层，表示层和应用层。" class="headerlink" title="TCP/IP 应用层实际上在 OSI 模型上具有三个对等体：会话层，表示层和应用层。"></a>TCP/IP 应用层实际上在 OSI 模型上具有三个对等体：会话层，表示层和应用层。</h3><h3 id="35）如何识别给定-IP-地址的-IP-类？"><a href="#35）如何识别给定-IP-地址的-IP-类？" class="headerlink" title="35）如何识别给定 IP 地址的 IP 类？"></a>35）如何识别给定 IP 地址的 IP 类？</h3><p>通过查看任何给定 IP 地址的第一个八位字节，您可以识别它是 A 类，B 类还是 C类。如果第一个八位字节以 0 位开头，则该地址为 Class A.如果以位 10 开头，则该地址为 B 类地址。如果从 110 开始，那么它是 C 类网络。</p><h3 id="36）OSPF-的主要目的是什么？"><a href="#36）OSPF-的主要目的是什么？" class="headerlink" title="36）OSPF 的主要目的是什么？"></a>36）OSPF 的主要目的是什么？</h3><p>OSPF 或开放最短路径优先，是使用路由表确定数据交换的最佳路径的链路状态路由协议。</p><h3 id="37）什么是防火墙？"><a href="#37）什么是防火墙？" class="headerlink" title="37）什么是防火墙？"></a>37）什么是防火墙？</h3><p>防火墙用于保护内部网络免受外部攻击。这些外部威胁可能是黑客谁想要窃取数据或计算机病毒，可以立即消除数据。它还可以防止来自外部网络的其他用户访问专用网络。</p><h3 id="38）描述星形拓扑"><a href="#38）描述星形拓扑" class="headerlink" title="38）描述星形拓扑"></a>38）描述星形拓扑</h3><p>星形拓扑由连接到节点的中央集线器组成。这是最简单的设置和维护之一。</p><h3 id="39）什么是网关？"><a href="#39）什么是网关？" class="headerlink" title="39）什么是网关？"></a>39）什么是网关？</h3><p>网关提供两个或多个网段之间的连接。它通常是运行网关软件并提供翻译服务的计算机。该翻译是允许不同系统在网络上通信的关键。</p><h3 id="40）星型拓扑的缺点是什么？"><a href="#40）星型拓扑的缺点是什么？" class="headerlink" title="40）星型拓扑的缺点是什么？"></a>40）星型拓扑的缺点是什么？</h3><p>星形拓扑的一个主要缺点是，一旦中央集线器或交换机被损坏，整个网络就变得不可用了。</p><h3 id="41）什么是-SLIP？"><a href="#41）什么是-SLIP？" class="headerlink" title="41）什么是 SLIP？"></a>41）什么是 SLIP？</h3><p>SLIP 或串行线路接口协议实际上是在 UNIX 早期开发的旧协议。这是用于远程访问的协议之一。</p><h3 id="42）给出一些私有网络地址的例子。"><a href="#42）给出一些私有网络地址的例子。" class="headerlink" title="42）给出一些私有网络地址的例子。"></a>42）给出一些私有网络地址的例子。</h3><p>10.0.0.0，子网掩码为 255.0.0.0</p><p>172.16.0.0，子网掩码为 255.240.0.0</p><p>千人ccie认证交流群463904693</p><p>领取最新CCIE考试题库</p><p>CCIE 认证经验分享千人群：463904693</p><p>192.168.0.0，子网掩码为 255.255.0.0</p><h3 id="43）什么是-tracert？"><a href="#43）什么是-tracert？" class="headerlink" title="43）什么是 tracert？"></a>43）什么是 tracert？</h3><p>Tracert 是一个 Windows 实用程序，可用于跟踪从路由器到目标网络的数据采集的路由。它还显示了在整个传输路由期间采用的跳数。</p><h3 id="44）网络管理员的功能是什么？"><a href="#44）网络管理员的功能是什么？" class="headerlink" title="44）网络管理员的功能是什么？"></a>44）网络管理员的功能是什么？</h3><p>网络管理员有许多责任，可以总结为 3 个关键功能：安装网络，配置网络设置以及网络的维护/故障排除。</p><h3 id="45）描述对等网络的一个缺点。"><a href="#45）描述对等网络的一个缺点。" class="headerlink" title="45）描述对等网络的一个缺点。"></a>45）描述对等网络的一个缺点。</h3><p>当您正在访问由网络上的某个工作站共享的资源时，该工作站的性能会降低。</p><h3 id="46）什么是混合网络？"><a href="#46）什么是混合网络？" class="headerlink" title="46）什么是混合网络？"></a>46）什么是混合网络？</h3><p>混合网络是利用客户端 - 服务器和对等体系结构的网络设置。</p><h3 id="47）什么是-DHCP？"><a href="#47）什么是-DHCP？" class="headerlink" title="47）什么是 DHCP？"></a>47）什么是 DHCP？</h3><p>DHCP 是动态主机配置协议的缩写。其主要任务是自动为网络上的设备分配 IP 地址。它首先检查任何设备尚未占用的下一个可用地址，然后将其分配给网络设备。</p><h3 id="48）ARP-的主要工作是什么？"><a href="#48）ARP-的主要工作是什么？" class="headerlink" title="48）ARP 的主要工作是什么？"></a>48）ARP 的主要工作是什么？</h3><p>ARP 或地址解析协议的主要任务是将已知的 IP 地址映射到 MAC 层地址。</p><h3 id="49）什么是-TCP-IP？"><a href="#49）什么是-TCP-IP？" class="headerlink" title="49）什么是 TCP/IP？"></a>49）什么是 TCP/IP？</h3><p>TCP/IP 是传输控制协议/互联网协议的缩写。这是一组协议层，旨在在不同类型的计算机网络（也称为异构网络）上进行数据交换。</p><h3 id="50）如何使用路由器管理网络？"><a href="#50）如何使用路由器管理网络？" class="headerlink" title="50）如何使用路由器管理网络？"></a>50）如何使用路由器管理网络？</h3><p>路由器内置了控制台，可让您配置不同的设置，如安全和数据记录。您可以为计算机分配限制，例如允许访问的资源，或者可以浏览互联网的某一天的特定时间。</p><p>您甚至可以对整个网络中看不到的网站施加限制。</p><h3 id="51）当您希望在不同平台（如-UNIX-系统和-Windows-服务器之间）传输文件时，可以应用什么协议？"><a href="#51）当您希望在不同平台（如-UNIX-系统和-Windows-服务器之间）传输文件时，可以应用什么协议？" class="headerlink" title="51）当您希望在不同平台（如 UNIX 系统和 Windows 服务器之间）传输文件时，可以应用什么协议？"></a>51）当您希望在不同平台（如 UNIX 系统和 Windows 服务器之间）传输文件时，可以应用什么协议？</h3><p>使用 FTP（文件传输协议）在这些不同的服务器之间进行文件传输。这是可能的，因为 FTP 是平台无关的。</p><h3 id="52）默认网关的使用是什么？"><a href="#52）默认网关的使用是什么？" class="headerlink" title="52）默认网关的使用是什么？"></a>52）默认网关的使用是什么？</h3><p>默认网关提供了本地网络连接到外部网络的方法。用于连接外部网络的默认网关通常是外部路由器端口的地址。</p><h3 id="53）保护网络的一种方法是使用密码。什么可以被认为是好的密码？"><a href="#53）保护网络的一种方法是使用密码。什么可以被认为是好的密码？" class="headerlink" title="53）保护网络的一种方法是使用密码。什么可以被认为是好的密码？"></a>53）保护网络的一种方法是使用密码。什么可以被认为是好的密码？</h3><p>良好的密码不仅由字母组成，还包括字母和数字的组合。结合大小写字母的密码比使用所有大写字母或全部小写字母的密码有利。密码必须不能被黑客很容易猜到，比如日期，姓名，收藏夹等等。</p><h3 id="54）UTP-电缆的正确终止率是多少？"><a href="#54）UTP-电缆的正确终止率是多少？" class="headerlink" title="54）UTP 电缆的正确终止率是多少？"></a>54）UTP 电缆的正确终止率是多少？</h3><p>非屏蔽双绞线网线的正常终止是 100 欧姆。</p><h3 id="55）什么是-netstat？"><a href="#55）什么是-netstat？" class="headerlink" title="55）什么是 netstat？"></a>55）什么是 netstat？</h3><p>Netstat 是一个命令行实用程序。它提供有关连接当前 TCP/IP 设置的有用信息。</p><h3 id="56）C-类网络中的网络-ID-数量是多少？"><a href="#56）C-类网络中的网络-ID-数量是多少？" class="headerlink" title="56）C 类网络中的网络 ID 数量是多少？"></a>56）C 类网络中的网络 ID 数量是多少？</h3><p>对于 C 类网络，可用的网络 ID 位数为 21。可能的网络 ID 数目为 2，提高到 21或 2,097,152。每个网络 ID 的主机 ID 数量为 2，增加到 8 减去 2，或 254。</p><h3 id="57）使用长于规定长度的电缆时会发生什么？"><a href="#57）使用长于规定长度的电缆时会发生什么？" class="headerlink" title="57）使用长于规定长度的电缆时会发生什么？"></a>57）使用长于规定长度的电缆时会发生什么？</h3><p>电缆太长会导致信号丢失。这意味着数据传输和接收将受到影响，因为信号长度下降。</p><h3 id="58）什么常见的软件问题可能导致网络缺陷？"><a href="#58）什么常见的软件问题可能导致网络缺陷？" class="headerlink" title="58）什么常见的软件问题可能导致网络缺陷？"></a>58）什么常见的软件问题可能导致网络缺陷？</h3><p>软件相关问题可以是以下任何一种或其组合：</p><p>- 客户端服务器问题</p><p>- 应用程序冲突</p><p>- 配置错误</p><p>- 协议不匹配</p><p>- 安全问题</p><p>- 用户政策和权利问题</p><h3 id="59）什么是-ICMP？"><a href="#59）什么是-ICMP？" class="headerlink" title="59）什么是 ICMP？"></a>59）什么是 ICMP？</h3><p>ICMP 是 Internet 控制消息协议。它为 TCP/IP 协议栈内的协议提供消息传递和通信。这也是管理由 PING 等网络工具使用的错误信息的协议。</p><blockquote></blockquote><h3 id="60）什么是-Ping？"><a href="#60）什么是-Ping？" class="headerlink" title="60）什么是 Ping？"></a>60）什么是 Ping？</h3><p>Ping 是一个实用程序，允许您检查网络上的网络设备之间的连接。您可以使用其IP 地址或设备名称（如计算机名称）ping 设备。</p><h3 id="61）什么是点对点（P2P）？"><a href="#61）什么是点对点（P2P）？" class="headerlink" title="61）什么是点对点（P2P）？"></a>61）什么是点对点（P2P）？</h3><p>对等是不在服务器上回复的网络。该网络上的所有 PC 都是单独的工作站。</p><h3 id="62）什么是-DNS？"><a href="#62）什么是-DNS？" class="headerlink" title="62）什么是 DNS？"></a>62）什么是 DNS？</h3><p>DNS 是域名系统。该网络服务的主要功能是为 TCP/IP 地址解析提供主机名。</p><h3 id="63）光纤与其他介质有什么优势？"><a href="#63）光纤与其他介质有什么优势？" class="headerlink" title="63）光纤与其他介质有什么优势？"></a>63）光纤与其他介质有什么优势？</h3><p>光纤的一个主要优点是不太容易受到电气干扰。它还支持更高的带宽，意味着可以发送和接收更多的数据。长距离信号降级也非常小。</p><h3 id="64）集线器和交换机有什么区别？"><a href="#64）集线器和交换机有什么区别？" class="headerlink" title="64）集线器和交换机有什么区别？"></a>64）集线器和交换机有什么区别？</h3><p>集线器充当多端口中继器。然而，随着越来越多的设备连接到它，它将无法有效地管理通过它的流量。交换机提供了一个更好的替代方案，可以提高性能，特别是在所有端口上预期有高流量时。</p><h3 id="65）Windows-RRAS-服务支持的不同网络协议是什么？"><a href="#65）Windows-RRAS-服务支持的不同网络协议是什么？" class="headerlink" title="65）Windows RRAS 服务支持的不同网络协议是什么？"></a>65）Windows RRAS 服务支持的不同网络协议是什么？</h3><p>支持三种主要的网络协议：NetBEUI，TCP/IP 和 IPX。</p><h3 id="66）A，B-和-C-类网络中的最大网络和主机是什么？"><a href="#66）A，B-和-C-类网络中的最大网络和主机是什么？" class="headerlink" title="66）A，B 和 C 类网络中的最大网络和主机是什么？"></a>66）A，B 和 C 类网络中的最大网络和主机是什么？</h3><p>对于 A 类，有 126 个可能的网络和 16,777,214 个主机</p><p>对于 B 类，有 16,384 个可能的网络和 65,534 个主机</p><p>对于 C 类，有 2,097,152 个可能的网络和 254 个主机</p><h3 id="67）直通电缆的标准颜色顺序是什么？"><a href="#67）直通电缆的标准颜色顺序是什么？" class="headerlink" title="67）直通电缆的标准颜色顺序是什么？"></a>67）直通电缆的标准颜色顺序是什么？</h3><p>橙色/白色，橙色，绿色/白色，蓝色，蓝色/白色，绿色，棕色/白色，棕色。</p><h3 id="68）什么协议落在-TCP-IP-协议栈的应用层之下？"><a href="#68）什么协议落在-TCP-IP-协议栈的应用层之下？" class="headerlink" title="68）什么协议落在 TCP/IP 协议栈的应用层之下？"></a>68）什么协议落在 TCP/IP 协议栈的应用层之下？</h3><p>以下是 TCP/IP 应用层协议：FTP，TFTP，Telnet 和 SMTP。</p><h3 id="69）您需要连接两台电脑进行文件共享。是否可以这样做，而不使用集线器或路由器？"><a href="#69）您需要连接两台电脑进行文件共享。是否可以这样做，而不使用集线器或路由器？" class="headerlink" title="69）您需要连接两台电脑进行文件共享。是否可以这样做，而不使用集线器或路由器？"></a>69）您需要连接两台电脑进行文件共享。是否可以这样做，而不使用集线器或路由器？</h3><p>是的，您可以使用一根电缆将两台计算机连接在一起。在这种情况下可以使用交叉型电缆。在这种设置中，一条电缆的数据传输引脚连接到另一条电缆的数据接收引脚，反之亦然。</p><h3 id="70）什么是-ipconfig？"><a href="#70）什么是-ipconfig？" class="headerlink" title="70）什么是 ipconfig？"></a>70）什么是 ipconfig？</h3><p>Ipconfig 是一个常用于识别网络上计算机的地址信息的实用程序。它可以显示物理地址以及 IP 地址。</p><h3 id="71）直通和交叉电缆有什么区别？"><a href="#71）直通和交叉电缆有什么区别？" class="headerlink" title="71）直通和交叉电缆有什么区别？"></a>71）直通和交叉电缆有什么区别？</h3><p>直通电缆用于将计算机连接到交换机，集线器或路由器。交叉电缆用于将两个类似设备连接在一起，如 PC 到 PC 或集线器到集线器。</p><h3 id="72）什么是客户端-服务器？"><a href="#72）什么是客户端-服务器？" class="headerlink" title="72）什么是客户端/服务器？"></a>72）什么是客户端/服务器？</h3><p>客户端/服务器是一种类型的网络，其中一个或多个计算机充当服务器。服务器提供集中的资源库，如打印机和文件。客户端是指访问服务器的工作站。</p><h3 id="73）描述网络。"><a href="#73）描述网络。" class="headerlink" title="73）描述网络。"></a>73）描述网络。</h3><p>网络是指用于数据通信的计算机和外围设备之间的互连。可以使用有线电缆或通过无线链路进行网络连接。</p><h3 id="74）将-NIC-卡从一台-PC-移动到另一台-PC-时，MAC-地址是否也被转移？"><a href="#74）将-NIC-卡从一台-PC-移动到另一台-PC-时，MAC-地址是否也被转移？" class="headerlink" title="74）将 NIC 卡从一台 PC 移动到另一台 PC 时，MAC 地址是否也被转移？"></a>74）将 NIC 卡从一台 PC 移动到另一台 PC 时，MAC 地址是否也被转移？</h3><p>是的，那是因为 MAC 地址是硬连线到 NIC 电路，而不是 PC。这也意味着当 NIC卡被另一个替换时，PC 可以具有不同的 MAC 地址。</p><h3 id="75）解释聚类支持"><a href="#75）解释聚类支持" class="headerlink" title="75）解释聚类支持"></a>75）解释聚类支持</h3><p>群集支持是指网络操作系统在容错组中连接多台服务器的能力。这样做的主要目的是在一台服务器发生故障的情况下，集群中的下一个服务器将继续进行所有处理。</p><h3 id="76）在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？"><a href="#76）在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？" class="headerlink" title="76）在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？"></a>76）在包含两个服务器和二十个工作站的网络中，安装防病毒程序的最佳位置是哪里？</h3><p>必须在所有服务器和工作站上安装防病毒程序，以确保保护。这是因为个人用户可以访问任何工作站，并在插入可移动硬盘驱动器或闪存驱动器时引入计算机病毒。</p><h3 id="77）描述以太网。"><a href="#77）描述以太网。" class="headerlink" title="77）描述以太网。"></a>77）描述以太网。</h3><p>以太网是当今使用的流行网络技术之一。它是在 20 世纪 70 年代初开发的，并且基于 IEEE 中规定的规范。以太网在局域网中使用。</p><h3 id="78）实现环形拓扑有什么缺点？"><a href="#78）实现环形拓扑有什么缺点？" class="headerlink" title="78）实现环形拓扑有什么缺点？"></a>78）实现环形拓扑有什么缺点？</h3><p>如果网络上的一个工作站发生故障，可能会导致整个网络丢失。另一个缺点是，当需要在网络的特定部分进行调整和重新配置时，整个网络也必须被暂时关闭。</p><h3 id="79）CSMA-CD-和-CSMA-CA-有什么区别？"><a href="#79）CSMA-CD-和-CSMA-CA-有什么区别？" class="headerlink" title="79）CSMA/CD 和 CSMA/CA 有什么区别？"></a>79）CSMA/CD 和 CSMA/CA 有什么区别？</h3><p>CSMA/CD 或碰撞检测，每当碰撞发生时重新发送数据帧。CSMA/CA 或碰撞避免，将首先在数据传输之前广播意图发送。</p><h3 id="80）什么是-SMTP？"><a href="#80）什么是-SMTP？" class="headerlink" title="80）什么是 SMTP？"></a>80）什么是 SMTP？</h3><h3 id="SMTP-是简单邮件传输协议的缩写。该协议处理所有内部邮件，并在-TCP-IP-协议栈上提供必要的邮件传递服务。"><a href="#SMTP-是简单邮件传输协议的缩写。该协议处理所有内部邮件，并在-TCP-IP-协议栈上提供必要的邮件传递服务。" class="headerlink" title="SMTP 是简单邮件传输协议的缩写。该协议处理所有内部邮件，并在 TCP/IP 协议栈上提供必要的邮件传递服务。"></a>SMTP 是简单邮件传输协议的缩写。该协议处理所有内部邮件，并在 TCP/IP 协议栈上提供必要的邮件传递服务。</h3><h3 id="81）什么是组播路由？"><a href="#81）什么是组播路由？" class="headerlink" title="81）什么是组播路由？"></a>81）什么是组播路由？</h3><p>组播路由是一种有针对性的广播形式，将消息发送到所选择的用户组，而不是将其发送到子网上的所有用户。</p><h3 id="82）加密在网络上的重要性是什么？"><a href="#82）加密在网络上的重要性是什么？" class="headerlink" title="82）加密在网络上的重要性是什么？"></a>82）加密在网络上的重要性是什么？</h3><p>加密是将信息转换成用户不可读的代码的过程。然后使用秘密密钥或密码将其翻译或解密回其正常可读格式。加密有助于确保中途截获的信息仍然不可读，因为用户必须具有正确的密码或密钥。</p><h3 id="83）如何安排和显示-IP-地址？"><a href="#83）如何安排和显示-IP-地址？" class="headerlink" title="83）如何安排和显示 IP 地址？"></a>83）如何安排和显示 IP 地址？</h3><p>IP 地址显示为一系列由周期或点分隔的四位十进制数字。这种安排的另一个术语是点分十进制格式。一个例子是 192.168.101.2</p><h3 id="84）解释认证的重要性。"><a href="#84）解释认证的重要性。" class="headerlink" title="84）解释认证的重要性。"></a>84）解释认证的重要性。</h3><p>认证是在用户登录网络之前验证用户凭据的过程。它通常使用用户名和密码进行。这提供了限制来自网络上的有害入侵者的访问的安全手段。</p><h3 id="85）隧道模式是什么意思？"><a href="#85）隧道模式是什么意思？" class="headerlink" title="85）隧道模式是什么意思？"></a>85）隧道模式是什么意思？</h3><p>这是一种数据交换模式，其中两个通信计算机本身不使用 IPSec。相反，将 LAN连接到中转网络的网关创建了一个使用 IPSec 协议来保护通过它的所有通信的虚拟隧道。</p><h3 id="86）建立-WAN-链路涉及的不同技术有哪些？"><a href="#86）建立-WAN-链路涉及的不同技术有哪些？" class="headerlink" title="86）建立 WAN 链路涉及的不同技术有哪些？"></a>86）建立 WAN 链路涉及的不同技术有哪些？</h3><p>模拟连接 - 使用常规电话线；数字连接 - 使用数字电话线；交换连接 - 使用发送方和接收方之间的多组链接来移动数据。</p><h3 id="87）网格拓扑的一个优点是什么？"><a href="#87）网格拓扑的一个优点是什么？" class="headerlink" title="87）网格拓扑的一个优点是什么？"></a>87）网格拓扑的一个优点是什么？</h3><p>在一个链接失败的情况下，总会有另一个链接可用。网状拓扑实际上是最容错的网络拓扑之一。</p><h3 id="88）在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？"><a href="#88）在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？" class="headerlink" title="88）在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？"></a>88）在排除计算机网络问题时，可能会发生什么常见的硬件相关问题？</h3><p>大部分网络由硬件组成。这些领域的问题可能包括硬盘故障，NIC 损坏甚至硬件启动。不正确的硬件配置也是其中一个疑难问题。</p><h3 id="89）可以做什么来修复信号衰减问题？"><a href="#89）可以做什么来修复信号衰减问题？" class="headerlink" title="89）可以做什么来修复信号衰减问题？"></a>89）可以做什么来修复信号衰减问题？</h3><p>处理这种问题的常见方法是使用中继器和集线器，因为它将有助于重新生成信号，从而防止信号丢失。检查电缆是否正确终止也是必须的。</p><h3 id="90）动态主机配置协议如何协助网络管理？"><a href="#90）动态主机配置协议如何协助网络管理？" class="headerlink" title="90）动态主机配置协议如何协助网络管理？"></a>90）动态主机配置协议如何协助网络管理？</h3><p>网络管理员不必访问每台客户端计算机来配置静态 IP 地址，而是可以应用动态主机配置协议来创建称为可以动态分配给客户端的范围的 IP 地址池。</p><h3 id="91）解释网络概念的概况？"><a href="#91）解释网络概念的概况？" class="headerlink" title="91）解释网络概念的概况？"></a>91）解释网络概念的概况？</h3><p>配置文件是为每个用户设置的配置设置。例如，可以创建将用户置于组中的配置文件。</p><h3 id="92）什么是-Sneakernet？"><a href="#92）什么是-Sneakernet？" class="headerlink" title="92）什么是 Sneakernet？"></a>92）什么是 Sneakernet？</h3><p>Sneakernet 被认为是最早的联网形式，其中使用可移动介质（如磁盘，磁带）物理传输数据。</p><h3 id="93）IEEE-在计算机网络中的作用是什么？"><a href="#93）IEEE-在计算机网络中的作用是什么？" class="headerlink" title="93）IEEE 在计算机网络中的作用是什么？"></a>93）IEEE 在计算机网络中的作用是什么？</h3><p>IEEE 或电气和电子工程师学会是由电气和电子设备标准发布和管理的工程师组成的组织。这包括网络设备，网络接口，cablings 和连接器。</p><h3 id="94）TCP-IP-Internet-层下有哪些协议？"><a href="#94）TCP-IP-Internet-层下有哪些协议？" class="headerlink" title="94）TCP/IP Internet 层下有哪些协议？"></a>94）TCP/IP Internet 层下有哪些协议？</h3><p>该层管理的协议有 4 种。这些是 ICMP，IGMP，IP 和 ARP。</p><h3 id="95）谈到网络，什么是权限？"><a href="#95）谈到网络，什么是权限？" class="headerlink" title="95）谈到网络，什么是权限？"></a>95）谈到网络，什么是权限？</h3><p>权限是指在网络上执行特定操作的授权许可。网络上的每个用户可以分配个人权限，具体取决于该用户必须允许的内容。</p><h3 id="96）建立-VLAN-的一个基本要求是什么？"><a href="#96）建立-VLAN-的一个基本要求是什么？" class="headerlink" title="96）建立 VLAN 的一个基本要求是什么？"></a>96）建立 VLAN 的一个基本要求是什么？</h3><p>需要一个 VLAN，因为在交换机级别只有一个广播域，这意味着每当新用户连接时，该信息都会传播到整个网络。交换机上的 VLAN 有助于在交换机级别创建单独的广播域。它用于安全目的。</p><h3 id="97）什么是-IPv6？"><a href="#97）什么是-IPv6？" class="headerlink" title="97）什么是 IPv6？"></a>97）什么是 IPv6？</h3><p>IPv6 或 Internet 协议版本 6 被开发以替代 IPv4。目前，IPv4 正在用于控制互联网流量，但 IPv4 已经饱和。IPv6 能够克服这个限制。</p><h3 id="98）什么是-RSA-算法？"><a href="#98）什么是-RSA-算法？" class="headerlink" title="98）什么是 RSA 算法？"></a>98）什么是 RSA 算法？</h3><p>RSA 是 Rivest-Shamir-Adleman 算法的缩写。它是目前最常用的公钥加密算法。</p><h3 id="99）什么是网格拓扑？"><a href="#99）什么是网格拓扑？" class="headerlink" title="99）什么是网格拓扑？"></a>99）什么是网格拓扑？</h3><p>网格拓扑是一种设置，其中每个设备都直接连接到网络上的每个其他设备。因此，它要求每个设备具有至少两个网络连接。</p><h3 id="100）100Base-FX-网络的最大段长度是多少？"><a href="#100）100Base-FX-网络的最大段长度是多少？" class="headerlink" title="100）100Base-FX 网络的最大段长度是多少？"></a>100）100Base-FX 网络的最大段长度是多少？</h3><p>使用 100Base-FX 的网段的最大允许长度为 412 米。整个网络的最大长度为 5 公里。</p><h1 id="下载网址"><a href="#下载网址" class="headerlink" title="下载网址"></a>下载网址</h1><ul><li><a href="https://batdalao.github.io/2020/04/11/computer-network/100-ge-wang-luo-ji-chu-zhi-shi/article.pdf">https://batdalao.github.io/2020/04/11/computer-network/100-ge-wang-luo-ji-chu-zhi-shi/article.pdf</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之图论基础</title>
      <link href="/2020/04/11/data-structures-and-algorithms/shu-ju-jie-gou-zhi-tu-lun-ji-chu/"/>
      <url>/2020/04/11/data-structures-and-algorithms/shu-ju-jie-gou-zhi-tu-lun-ji-chu/</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="ebeb7034412c0f087e80f5e71e59a947b2a30d33c54058349759f60384a3598b"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> C++ </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>130个实用网站</title>
      <link href="/2020/04/11/technical-talk/130-ge-shi-yong-wang-zhan/"/>
      <url>/2020/04/11/technical-talk/130-ge-shi-yong-wang-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="130个实用网站"><a href="#130个实用网站" class="headerlink" title="130个实用网站"></a>130个实用网站</h1><h4 id="搞学习"><a href="#搞学习" class="headerlink" title="搞学习"></a>搞学习</h4><ul><li>知乎：<a href="http://www.zhihu.com" target="_blank" rel="noopener">www.zhihu.com</a></li><li>TED（最优质的演讲）：<a href="https://www.ted.com/" target="_blank" rel="noopener">https://www.ted.com/</a></li><li>谷粉学术： <a href="https://gfsoso.99lb.net/scholar.html" target="_blank" rel="noopener">https://gfsoso.99lb.net/scholar.html</a></li><li>大学资源网：<a href="http://www.dxzy163.com/" target="_blank" rel="noopener">http://www.dxzy163.com/</a></li><li>简答题：<a href="http://www.jiandati.com/" target="_blank" rel="noopener">http://www.jiandati.com/</a></li><li>网易公开课：<a href="https://open.163.com/ted/" target="_blank" rel="noopener">https://open.163.com/ted/</a></li><li>网易云课堂：<a href="https://study.163.com/" target="_blank" rel="noopener">https://study.163.com/</a></li><li>中国大学MOOC：<a href="http://www.icourse163.org" target="_blank" rel="noopener">www.icourse163.org</a></li><li>网易云课堂：<a href="https://study.163.com/" target="_blank" rel="noopener">https://study.163.com/</a></li><li>哔哩哔哩弹幕网：<a href="http://www.bilibili.com" target="_blank" rel="noopener">www.bilibili.com</a></li><li>我要自学网：<a href="http://www.51zxw.net" target="_blank" rel="noopener">www.51zxw.net</a></li><li>学堂在线：<a href="http://www.xuetangx.com" target="_blank" rel="noopener">www.xuetangx.com</a></li><li>爱课程：<a href="http://www.icourses.cn" target="_blank" rel="noopener">www.icourses.cn</a></li><li>猫咪论文：<a href="https://lunwen.im/" target="_blank" rel="noopener">https://lunwen.im/</a></li><li>iData（论文搜索）：<a href="http://www.cn-ki.net" target="_blank" rel="noopener">www.cn-ki.net</a></li><li>文泉考试：<a href="https://www.wqkaoshi.com" target="_blank" rel="noopener">https://www.wqkaoshi.com</a></li><li>码农之家（计算机电子书下载）：<a href="http://www.xz577.com" target="_blank" rel="noopener">www.xz577.com</a></li><li>鸠摩搜书：<a href="http://www.jiumodiary.com" target="_blank" rel="noopener">www.jiumodiary.com</a></li><li>云海电子图书馆：<a href="http://www.pdfbook.cn" target="_blank" rel="noopener">www.pdfbook.cn</a></li><li>周读（书籍搜索）：ireadweek.com</li><li>知轩藏书：<a href="http://www.zxcs.me/" target="_blank" rel="noopener">http://www.zxcs.me/</a></li><li>脚本之家电子书下载：<a href="https://www.jb51.net/books/" target="_blank" rel="noopener">https://www.jb51.net/books/</a></li><li>搜书VIP-电子书搜索：<a href="http://www.soshuvip.com/all.html" target="_blank" rel="noopener">http://www.soshuvip.com/all.html</a></li><li>书格（在线古籍图书馆）：<a href="https://new.shuge.org/" target="_blank" rel="noopener">https://new.shuge.org/</a></li><li>术语在线：<a href="http://www.termonline.cn/" target="_blank" rel="noopener">http://www.termonline.cn/</a></li><li>必看网（人生必看的书籍）：<a href="https://www.biikan.com/" target="_blank" rel="noopener">https://www.biikan.com/</a></li></ul><h4 id="冷知识-黑科技"><a href="#冷知识-黑科技" class="headerlink" title="冷知识 / 黑科技"></a>冷知识 / 黑科技</h4><ul><li>上班摸鱼必备（假装电脑系统升级）：<a href="http://fakeupdate.net/" target="_blank" rel="noopener">http://fakeupdate.net/</a></li><li>创意光线绘画：<a href="http://weavesilk.com/" target="_blank" rel="noopener">http://weavesilk.com/</a></li><li>星系观察：<a href="https://stellarium-web.org/" target="_blank" rel="noopener">https://stellarium-web.org/</a></li><li>煎蛋：<a href="http://jandan.net/" target="_blank" rel="noopener">http://jandan.net/</a></li><li>渣男-说话的艺术：<a href="https://lovelive.tools/" target="_blank" rel="noopener">https://lovelive.tools/</a></li><li>全历史：<a href="https://www.allhistory.com/" target="_blank" rel="noopener">https://www.allhistory.com/</a></li><li>iData：<a href="https://www.cn-ki.net/" target="_blank" rel="noopener">https://www.cn-ki.net/</a></li><li>caj云阅读：<a href="http://cajviewer.cnki.net/cajcloud/" target="_blank" rel="noopener">http://cajviewer.cnki.net/cajcloud/</a></li></ul><h4 id="资源搜索"><a href="#资源搜索" class="headerlink" title="资源搜索"></a>资源搜索</h4><ul><li>DogeDoge搜索引擎：<a href="http://www.dogedoge.com" target="_blank" rel="noopener">www.dogedoge.com</a></li><li>秘迹搜索：<a href="https://mijisou.com/" target="_blank" rel="noopener">https://mijisou.com/</a></li><li>小白盘：<a href="https://www.xiaobaipan.com/" target="_blank" rel="noopener">https://www.xiaobaipan.com/</a></li><li>云盘精灵（资源搜索）：<a href="http://www.yunpanjingling.com" target="_blank" rel="noopener">www.yunpanjingling.com</a></li><li>虫部落（资源搜索）：<a href="http://www.chongbuluo.com" target="_blank" rel="noopener">www.chongbuluo.com</a></li><li>如风搜（资源搜索）：<a href="http://www.rufengso.net/" target="_blank" rel="noopener">http://www.rufengso.net/</a></li><li>爱扒：<a href="https://www.zyboe.com/" target="_blank" rel="noopener">https://www.zyboe.com/</a></li></ul><h4 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h4><ul><li>云端超级应用空间（PS，PPT，Excel，Ai）：<a href="https://uzer.me/" target="_blank" rel="noopener">https://uzer.me/</a></li><li>在线接口测试（Getman）：<a href="https://getman.cn/" target="_blank" rel="noopener">https://getman.cn/</a></li><li>香当网（年终总结，个人简历，事迹材料，租赁合同，演讲稿）：<a href="https://www.xiangdang.net/" target="_blank" rel="noopener">https://www.xiangdang.net/</a></li><li>二维码生成：<a href="https://cli.im/" target="_blank" rel="noopener">https://cli.im/</a></li><li>搜狗翻译：fanyi.sogou.com</li><li>熵数（图表制作，数据可视化）：<a href="https://dydata.io/appv2/#/pages/index/home" target="_blank" rel="noopener">https://dydata.io/appv2/#/pages/index/home</a></li><li>拷贝兔：<a href="https://cp.anyknew.com/" target="_blank" rel="noopener">https://cp.anyknew.com/</a></li><li>图片无限变放大：<a href="http://bigjpg.com/zh" target="_blank" rel="noopener">http://bigjpg.com/zh</a></li><li>幕布（在线大纲笔记工具）：mubu.com</li><li>奶牛快传（在线传输文件利器）：cowtransfer.com</li><li>在线转换器（在线转换器转换任何测量单位）：<a href="https://zh.justcnw.com/" target="_blank" rel="noopener">https://zh.justcnw.com/</a></li><li>调查问卷制作：<a href="https://www.wenjuan.com/" target="_blank" rel="noopener">https://www.wenjuan.com/</a></li><li>果核剥壳（软件下载）：<a href="https://www.ghpym.com/" target="_blank" rel="noopener">https://www.ghpym.com/</a></li><li>软件下载：<a href="https://www.unyoo.com/" target="_blank" rel="noopener">https://www.unyoo.com/</a></li><li>MSDN我告诉你（windows10系统镜像下载）：<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a></li></ul><h4 id="导航页（工具集）"><a href="#导航页（工具集）" class="headerlink" title="导航页（工具集）"></a>导航页（工具集）</h4><ul><li>NiceTool.net 好工具网：<a href="http://www.nicetool.net/" target="_blank" rel="noopener">http://www.nicetool.net/</a></li><li>现实君工具箱（综合型在线工具集成网站）：<a href="http://tool.uixsj.cn/" target="_blank" rel="noopener">http://tool.uixsj.cn/</a></li><li>蓝调网站：<a href="http://lcoc.top/" target="_blank" rel="noopener">http://lcoc.top/</a></li><li>偷渡鱼：<a href="https://touduyu.com/" target="_blank" rel="noopener">https://touduyu.com/</a></li><li>牛导航：<a href="http://www.ziliao6.com/" target="_blank" rel="noopener">http://www.ziliao6.com/</a></li><li>小呆导航：<a href="https://www.webjike.com/index.html" target="_blank" rel="noopener">https://www.webjike.com/index.html</a></li><li>简法主页：<a href="http://www.jianfast.com/" target="_blank" rel="noopener">http://www.jianfast.com/</a></li><li>KIM主页：<a href="https://kim.plopco.com/" target="_blank" rel="noopener">https://kim.plopco.com/</a></li><li>聚BT：<a href="https://jubt.net/cn/index.html" target="_blank" rel="noopener">https://jubt.net/cn/index.html</a></li><li>精准云工具合集：<a href="https://jingzhunyun.com/" target="_blank" rel="noopener">https://jingzhunyun.com/</a></li><li>兔2工具合集：<a href="https://www.tool2.cn/" target="_blank" rel="noopener">https://www.tool2.cn/</a></li><li>爱资料工具（在线实用工具集合）：<a href="http://www.toolnb.com" target="_blank" rel="noopener">www.toolnb.com</a></li><li>工具导航：<a href="https://hao.logosc.cn/" target="_blank" rel="noopener">https://hao.logosc.cn/</a></li></ul><h4 id="看视频"><a href="#看视频" class="headerlink" title="看视频"></a>看视频</h4><ul><li>电影推荐（分类别致）：<a href="http://www.mvcat.com" target="_blank" rel="noopener">http://www.mvcat.com</a></li><li>去看TV：<a href="https://www.qukantv.net/" target="_blank" rel="noopener">https://www.qukantv.net/</a></li><li>动漫视频网：<a href="http://www.zzzfun.com/" target="_blank" rel="noopener">http://www.zzzfun.com/</a></li><li>94神马电影网：<a href="http://www.9rmb.com/" target="_blank" rel="noopener">http://www.9rmb.com/</a></li><li>NO视频官网：<a href="http://www.novipnoad.com/" target="_blank" rel="noopener">http://www.novipnoad.com/</a></li><li>蓝光画质电影：<a href="http://www.languang.co/" target="_blank" rel="noopener">http://www.languang.co/</a></li><li>在线看剧：<a href="http://dy.27234.cn/" target="_blank" rel="noopener">http://dy.27234.cn/</a></li><li>大数据导航：<a href="http://hao.199it.com/" target="_blank" rel="noopener">http://hao.199it.com/</a></li><li>多功能图片网站：<a href="https://www.logosc.cn/so/" target="_blank" rel="noopener">https://www.logosc.cn/so/</a></li><li>牛牛TV：<a href="http://www.ziliao6.com/tv/" target="_blank" rel="noopener">http://www.ziliao6.com/tv/</a></li><li>VideoFk解析视频：<a href="http://www.videofk.com/" target="_blank" rel="noopener">http://www.videofk.com/</a></li><li>蓝调网站：<a href="http://lcoc.top/vip2.3/" target="_blank" rel="noopener">http://lcoc.top/vip2.3/</a></li></ul><h4 id="学设计"><a href="#学设计" class="headerlink" title="学设计"></a>学设计</h4><ul><li>免费音频素材：<a href="https://icons8.cn/music" target="_blank" rel="noopener">https://icons8.cn/music</a></li><li>新CG儿（视频素材模板，无水印+免费下载）：<a href="https://www.newcger.com/" target="_blank" rel="noopener">https://www.newcger.com/</a></li><li>小图标下载：<a href="https://www.easyicon.net/" target="_blank" rel="noopener">https://www.easyicon.net/</a></li><li>第一字体转换器：<a href="http://www.diyiziti.com/" target="_blank" rel="noopener">http://www.diyiziti.com/</a></li><li>doyoudosh（平面设计）：<a href="http://www.doyoudo.com" target="_blank" rel="noopener">www.doyoudo.com</a></li><li>企业宣传视频在线制作：<a href="https://duomu.tv/" target="_blank" rel="noopener">https://duomu.tv/</a></li><li>MAKE海报设计官网：<a href="http://maka.im/" target="_blank" rel="noopener">http://maka.im/</a></li><li>一键海报神器：<a href="https://www.logosc.cn/photo/?utm_source=hao.logosc.cn&amp;utm_medium=referral" target="_blank" rel="noopener">https://www.logosc.cn/photo/?utm_source=hao.logosc.cn&amp;utm_medium=referral</a></li><li>字由（字体设计）：<a href="http://www.hellofont.cn/" target="_blank" rel="noopener">http://www.hellofont.cn/</a></li><li>查字体网站：<a href="https://fonts.safe.360.cn/" target="_blank" rel="noopener">https://fonts.safe.360.cn/</a></li><li>爱给网（免费素材下载的网站，包括音效、配乐，3D、视频、游戏，平面、教程）：<a href="http://www.aigei.com/" target="_blank" rel="noopener">http://www.aigei.com/</a></li><li>在线视频剪辑：<a href="https://bilibili.clipchamp.com/editor" target="_blank" rel="noopener">https://bilibili.clipchamp.com/editor</a></li></ul><h4 id="搞文档"><a href="#搞文档" class="headerlink" title="搞文档"></a>搞文档</h4><ul><li>即书（在线制作PPT）：<a href="https://www.keysuper.com/" target="_blank" rel="noopener">https://www.keysuper.com/</a></li><li>PDF处理：<a href="https://smallpdf.com/cn" target="_blank" rel="noopener">https://smallpdf.com/cn</a></li><li>PDF处理：<a href="https://www.ilovepdf.com/zh-cn" target="_blank" rel="noopener">https://www.ilovepdf.com/zh-cn</a></li><li>PDF处理：<a href="https://www.pdfpai.com/" target="_blank" rel="noopener">https://www.pdfpai.com/</a></li><li>PDF处理：<a href="https://www.hipdf.cn/" target="_blank" rel="noopener">https://www.hipdf.cn/</a></li><li>腾讯文档（在线协作编辑和管理文档）：<a href="https://docs.qq.com/" target="_blank" rel="noopener">https://docs.qq.com/</a></li><li>ProcessOn（在线协作制作结构图）：<a href="http://www.processon.com" target="_blank" rel="noopener">www.processon.com</a></li><li>iLovePDF（在线转换PDF利器）：<a href="http://www.ilovepdf.com" target="_blank" rel="noopener">www.ilovepdf.com</a></li><li>PPT在线制作：<a href="https://www.woodo.cn/" target="_blank" rel="noopener">https://www.woodo.cn/</a></li><li>PDF24工具（pdf处理工具）：<a href="https://tools.pdf24.org/en" target="_blank" rel="noopener">https://tools.pdf24.org/en</a></li><li>IMGBOT（在线图片处理）：<a href="http://www.imgbot.ai" target="_blank" rel="noopener">www.imgbot.ai</a></li><li>福昕云编辑（在线编辑PDF）：<a href="http://edit.foxitcloud.cn/" target="_blank" rel="noopener">http://edit.foxitcloud.cn/</a></li><li>TinyPNG（在线压缩图片）：<a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/</a></li><li>UZER.ME（在线使用各种大应用，在线使用CAD，MATLAB，Office三件套<br>）：<a href="https://uzer.me/" target="_blank" rel="noopener">https://uzer.me/</a></li><li>优品PPT（模板下载）：<a href="http://www.ypppt.com/" target="_blank" rel="noopener">http://www.ypppt.com/</a></li><li>第一PPT（模板下载）：<a href="http://www.1ppt.com/xiazai/" target="_blank" rel="noopener">http://www.1ppt.com/xiazai/</a></li><li>三顿PPT导航：<a href="https://sandunppt.com/" target="_blank" rel="noopener">https://sandunppt.com/</a></li></ul><h4 id="找图片"><a href="#找图片" class="headerlink" title="找图片"></a>找图片</h4><ul><li>电脑壁纸：<a href="http://lcoc.top/bizhi/" target="_blank" rel="noopener">http://lcoc.top/bizhi/</a></li><li><a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com/</a></li><li><a href="https://pixabay.com/" target="_blank" rel="noopener">https://pixabay.com/</a></li><li><a href="https://www.pexels.com/" target="_blank" rel="noopener">https://www.pexels.com/</a></li><li><a href="https://visualhunt.com/" target="_blank" rel="noopener">https://visualhunt.com/</a></li><li><a href="https://www.ssyer.com/" target="_blank" rel="noopener">https://www.ssyer.com/</a></li><li>彼岸图网：<a href="http://pic.netbian.com/" target="_blank" rel="noopener">http://pic.netbian.com/</a></li><li>极像素（超高清大图）：<a href="https://www.sigoo.com/" target="_blank" rel="noopener">https://www.sigoo.com/</a></li><li>免费版权图片搜索：<a href="https://www.logosc.cn/so/" target="_blank" rel="noopener">https://www.logosc.cn/so/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
